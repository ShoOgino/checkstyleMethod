    /**
     * Checks a method AST for required properties.
     * @param aAST the AST to check.
     * @param aPrefix prefix of checked names.
     * @param aException name of required exception.
     */
    private void checkMethod(DetailAST aAST, String aPrefix, String aException)
    {
        final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
        final String name = nameAST.getText();
        if (name.startsWith(aPrefix)) {
            if (!Utils.isPublic(aAST)) {
                log(nameAST.getLineNo(), nameAST.getColumnNo(),
                    "nonpublic.bean", "Method " + name);
            }
            if (Utils.isVoid(aAST)) {
                log(nameAST.getLineNo(), nameAST.getColumnNo(),
                    "voidmethod.bean", name);
            }
            if (!Utils
                .hasThrows(aAST, aException))
            {
                log(nameAST.getLineNo(), nameAST.getColumnNo(),
                    "missingthrows.bean",
                    new Object[] {name, aException});
            }
        }
    }

