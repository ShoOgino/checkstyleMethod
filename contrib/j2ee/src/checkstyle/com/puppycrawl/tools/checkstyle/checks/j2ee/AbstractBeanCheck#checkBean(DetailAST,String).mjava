/**
 * Checks a bean class requirements:
 * <ul>
 * <li>The class is defined as <code>public</code>.</li>
 * <li>The class cannot be defined as <code>abstract</code> or
 * <code>final</code>.</li>
 * <li>It contains a <code>public</code> constructor with no parameters.</li>
 * <li>It must not define the <code>finalize</code> method.</li>
 * </ul>
 * @param aAST CLASS_DEF node for class definition to check.
 * @param aBeanType bean type for error messages.
 */
    protected void checkBean(DetailAST aAST, String aBeanType)
    {
        final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
        if (!Utils.isPublic(aAST)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "nonpublic.bean", aBeanType);
        }
        if (Utils.isFinal(aAST)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "illegalmodifier.bean",
                new Object[] {aBeanType, "final"});
        }
        if (Utils.isAbstract(aAST)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "illegalmodifier.bean",
            new Object[] {aBeanType, "abstract"});
        }
        if (!Utils.hasPublicConstructor(aAST, 0)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "nonpublicconstructor.bean", aBeanType);
        }
        if (Utils.hasPublicMethod(aAST, "finalize", true, 0)) {
            log(
                nameAST.getLineNo(),
                nameAST.getColumnNo(),
                "hasfinalize.bean",
                aBeanType);
        }
    }

