    /**
     * Adds a reference for an invocation in the invoked method definition.
     * The invocation is of the form class.method(args).
     * @param aInvokeRef the invocation reference.
     */
    public void addInvokeReference(InvokeReference aInvokeRef)
    {
        // find the class for the instruction
        final String className = aInvokeRef.getClassName();
        JavaClass javaClass = Repository.lookupClass(className);
        final String methodName = aInvokeRef.getName();
        final Type[] argTypes = aInvokeRef.getArgTypes();

        // search up the class hierarchy for the class containing the
        // method definition.
        MethodDefinition narrowest = null;
        while ((javaClass != null) && (narrowest == null)) {
            final JavaClassDefinition javaClassDef =
                (JavaClassDefinition) mJavaClasses.get(javaClass);
            if (javaClassDef != null) {
                // find narrowest compatible in the current class
                narrowest =
                    javaClassDef.findNarrowestMethod(
                        className,
                        methodName,
                        argTypes);
                if (narrowest != null) {
                    narrowest.addReference(aInvokeRef);
                }
            }
            // search the parent
            javaClass = javaClass.getSuperClass();
        }
    }

