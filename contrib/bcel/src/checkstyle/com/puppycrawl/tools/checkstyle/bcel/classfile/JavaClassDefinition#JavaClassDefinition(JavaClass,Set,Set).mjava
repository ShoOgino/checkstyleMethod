    /**
     * Creates a JavaClassDefinition from a JavaClass. The fields and
     * methods of the JavaClassDefinition are those whose scopes are
     * in restricted sets of Scopes.
     * @param aJavaClass the JavaClass for the definition.
     * @param aFieldScopes the restricted set of field scopes.
     * @param aMethodScopes the restriced set of method scopes.
     */
    public JavaClassDefinition(
        JavaClass aJavaClass,
        Set aFieldScopes,
        Set aMethodScopes)
    {
        mJavaClass = aJavaClass;

        // create method definitions, restricted by scope
        final Method[] methods = aJavaClass.getMethods();
        final Set methodSet = new HashSet();
        mMethodDefs = new MethodDefinition[methods.length];
        for (int i = 0; i < methods.length; i++) {
            if (Utils.inScope(methods[i], aMethodScopes)) {
                methodSet.add(new MethodDefinition(methods[i]));
            }
        }
        mMethodDefs =
            (MethodDefinition[]) methodSet.toArray(
                new MethodDefinition[methodSet.size()]);

        // create field definitions, restricted by scope
        final Field[] fields = aJavaClass.getFields();
        mFieldDefs = new HashMap(fields.length);
        for (int i = 0; i < fields.length; i++) {
            if (Utils.inScope(fields[i], aFieldScopes)) {
                mFieldDefs.put(
                    fields[i].getName(),
                    new FieldDefinition(fields[i]));
            }
        }
    }

