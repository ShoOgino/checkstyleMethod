  /**
   * process the given SymTabAST as a for block
   *
   * @param tree the SymTabAST to process
   * @return <code>void</code>
   * @see #makeBlock(SymTabAST)
   * @see #walkTree(SymTabAST, boolean)
   */
  public void processFor(SymTabAST tree) {
    BlockDef block = makeBlock(tree);

    symbolTable.pushScope( block );
    SymTabAST body;
    SymTabAST forEach = tree.findFirstToken(TokenTypes.FOR_EACH_CLAUSE);
    if (forEach != null) {
        walkTree(forEach, false);
        body = (SymTabAST)forEach.getNextSibling();
    }
    else {
        walkTree(tree.findFirstToken(TokenTypes.FOR_INIT), false);
        walkTree(tree.findFirstToken(TokenTypes.FOR_CONDITION), false);

        SymTabAST forIter = tree.findFirstToken(TokenTypes.FOR_ITERATOR);
        walkTree(forIter, false);
        body = (SymTabAST)forIter.getNextSibling();
    }

    //handle Checkstyle grammar
    if (body.getType() == TokenTypes.RPAREN) {
        body = (SymTabAST) body.getNextSibling();
    }
    walkTree(body, false);
    symbolTable.popScope();
  }

