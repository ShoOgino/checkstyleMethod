    /**
     * returns the most specific <code>Scope</code> to which the specified
     * <code>Occurence</code> belongs from the specified <code>Vector</code>
     * of <code>Scope</code>s.
     *
     * @param occ the <code>Occurrence</code> whose <code>Scope</code> we're interested in.
     * @param scopeList the <code>Vector</code> of <code>Scope</code>s to chose from.
     * @return Scope
     */
    public Scope findScope(Vector scopeList, Occurrence occ) {
        int i = 0;

        Scope bestSoFar = (Scope) scopeList.elementAt(i);

        while (!bestSoFar
            .getTreeNode()
            .getSpan()
            .contains(occ.getLine(), occ.getColumn())) {
            i++;
            bestSoFar = (Scope) scopeList.elementAt(i);
        }

        for (; i < scopeList.size(); i++) {
            Scope currentScope = (Scope) scopeList.elementAt(i);

            if (currentScope
                .getTreeNode()
                .getSpan()
                .contains(occ.getLine(), occ.getColumn())) {
                if (bestSoFar
                    .getTreeNode()
                    .getSpan()
                    .contains(currentScope.getTreeNode().getSpan())) {
                    bestSoFar = currentScope;
                }
            }
        }

        return bestSoFar;
    }

