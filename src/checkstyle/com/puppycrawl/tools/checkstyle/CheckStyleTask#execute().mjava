    /**
     * Actually checks the files specified. All errors are reported to
     * System.out. Will fail if any errors occurred.
     * @throws BuildException an error occurred
     */
    public void execute()
        throws BuildException
    {
        // output version info in debug mode
        final ResourceBundle compilationProperties =
            ResourceBundle.getBundle("checkstylecompilation");
        final String version =
            compilationProperties.getString("checkstyle.compile.version");
        final String compileTimestamp =
            compilationProperties.getString("checkstyle.compile.timestamp");
        log("checkstyle version " + version, Project.MSG_VERBOSE);
        log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);

        // Check for no arguments
        if ((mFileName == null) && (mFileSets.size() == 0)) {
            throw new BuildException(
                "Must specify atleast one of 'file' or nested 'fileset'.",
                getLocation());
        }

        if (mConfigLocation == null) {
            throw new BuildException("Must specify 'config'.", getLocation());
        }

        // Create the checker
        Checker c = null;
        try {
            c = createChecker();

            final SeverityLevelCounter warningCounter =
                    new SeverityLevelCounter(SeverityLevel.WARNING);
            c.addListener(warningCounter);

            // Process the files
            final File[] files = scanFileSets();

            log("Running Checkstyle " + version
                    + " on " + files.length + " files", Project.MSG_INFO);
            log("Using configuration " + mConfigLocation, Project.MSG_VERBOSE);

            final int numErrs = c.process(files);
            final int numWarnings = warningCounter.getCount();
            final boolean ok = numErrs <= mMaxErrors
                    && numWarnings <= mMaxWarnings;

            // Handle the return status
            if (!ok && mFailureProperty != null) {
                getProject().setProperty(mFailureProperty, "true");
            }

            if (!ok && mFailOnViolation) {
                throw new BuildException(
                        "Got " + numErrs + " errors and "
                        + numWarnings + " warnings.",
                                         getLocation());
            }
        }
        finally {
            if (c != null) {
                c.destroy();
            }
        }
    }

