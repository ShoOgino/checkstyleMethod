    /**
     * Actually checks the files specified. All errors are reported to
     * System.out. Will fail if any errors occurred.
     * @throws BuildException an error occurred
     */
    public void execute()
        throws BuildException
    {
        // Check for no arguments
        if ((mFileName == null) && (mFileSets.size() == 0)) {
            throw new BuildException(
                "Must specify atleast one of 'file' or nested 'fileset'.",
                getLocation());
        }

        if (mConfigFile == null) {
            throw new BuildException("Must specify 'config'.", getLocation());
        }

        // Create the checker
        Checker c = null;
        try {
            try {
                final Properties props = createOverridingProperties();
                final Configuration config =
                    ConfigurationLoader.loadConfiguration(
                        mConfigFile.getAbsolutePath(), props);

                DefaultContext context = new DefaultContext();
                ClassLoader loader = new AntClassLoader(getProject(), mClasspath);
                context.add("classloader", loader);

                c = new Checker();
                c.contextualize(context);
                c.configure(config);

                // setup the listeners
                AuditListener[] listeners = getListeners();
                for (int i = 0; i < listeners.length; i++) {
                    c.addListener(listeners[i]);
                }
            }
            catch (Exception e) {
                throw new BuildException(
                    "Unable to create a Checker: " + e.getMessage(), e);
            }

            // Process the files
            final File[] files = scanFileSets();
            final int numErrs = c.process(files);

            // Handle the return status
            if ((numErrs > 0) && mFailureProperty != null) {
                getProject().setProperty(mFailureProperty, "true");
            }

            if ((numErrs > 0) && mFailOnViolation) {
                throw new BuildException("Got " + numErrs + " errors.",
                                         getLocation());
            }
        }
        finally {
            if (c != null) {
                c.destroy();
            }
        }
    }

