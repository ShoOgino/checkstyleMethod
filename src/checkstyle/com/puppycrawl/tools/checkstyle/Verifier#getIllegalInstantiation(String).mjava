    /**
     * Checks illegal instantiations.
     * @param aClassName instantiated class, may or may not be qualified
     * @return the fully qualified class name of aClassName
     * or null if instantiation of aClassName is OK
     */
    private String getIllegalInstantiation(String aClassName)
    {
        final Set illegalInsts = mConfig.getIllegalInstantiations();
        final String javaLang = "java.lang.";

        if (illegalInsts.contains(aClassName)){
            return aClassName;
        }

        final Iterator illIter = illegalInsts.iterator();
        while (illIter.hasNext()) {
            final String illegal = (String) illIter.next();

            // class from java.lang
            if (((illegal.length() - javaLang.length()) == aClassName.length())
                && illegal.endsWith(aClassName)
                && illegal.startsWith(javaLang))
            {
                return illegal;
            }

            // class from same package
            if (illegal.length() - mPkgName.length() == aClassName.length() + 1
                && illegal.charAt(mPkgName.length()) == '.'
                && illegal.endsWith(aClassName)
                && illegal.startsWith(mPkgName))
            {
                return illegal;
            }

            // import statements
            final Iterator importIter = mImports.iterator();
            while (importIter.hasNext()) {
                final LineText importLineText = (LineText) importIter.next();
                final String importArg = importLineText.getText();
                if (importArg.endsWith(".*")) {
                    final String fqClass =
                        importArg.substring(0, importArg.length() - 1)
                        + aClassName;

                    // assume that illegalInsts only contain existing classes
                    // or else we might create a false alarm here
                    if (illegalInsts.contains(fqClass)) {
                        return fqClass;
                    }
                }
                else {
                    if (basename(importArg).equals(aClassName)
                        && illegalInsts.contains(importArg))
                    {
                        return importArg;
                    }
                }
            }
        }
        return null;
    }

