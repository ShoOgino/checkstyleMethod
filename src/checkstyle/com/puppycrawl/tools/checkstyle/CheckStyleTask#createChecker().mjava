    /**
     * Creates new instance of <code>Checker</code>.
     * @return new instance of <code>Checker</code>
     */
    private Checker createChecker()
    {
        Checker c = null;
        try {
            final Properties props = createOverridingProperties();
            final Configuration config =
                ConfigurationLoader.loadConfiguration(
                    mConfigLocation, new PropertiesExpander(props));

            final DefaultContext context = new DefaultContext();
            final ClassLoader taskLoader = this.getClass().getClassLoader();
            final ClassLoader loader =
                new AntClassLoader(taskLoader, getProject(), mClasspath, true);
            context.add("classloader", loader);

            c = new Checker();

            //load the set of package names
            if (mPackageNamesFile != null) {
                final ModuleFactory moduleFactory =
                    PackageNamesLoader.loadModuleFactory(
                        mPackageNamesFile.getAbsolutePath());
                c.setModuleFactory(moduleFactory);
            }
            c.contextualize(context);
            c.configure(config);

            // setup the listeners
            final AuditListener[] listeners = getListeners();
            for (int i = 0; i < listeners.length; i++) {
                c.addListener(listeners[i]);
            }
        }
        catch (Exception e) {
            throw new BuildException(
                "Unable to create a Checker: " + e.getMessage(), e);
        }

        return c;
    }

