    /**
     * Static helper method to parses a Java source file with a given
     * lexer class and parser class.
     * @param aLexerClass class to use for lexing
     * @param aParserClass class to use for parsing
     * @param aContents contains the contents of the file
     * @throws TokenStreamException if lexing failed
     * @throws RecognitionException if parsing failed
     * @return the root of the AST
     */
    private static DetailAST parse(
        Class aLexerClass,
        Class aParserClass,
        FileContents aContents)
        throws RecognitionException, TokenStreamException
    {
        try {
            final Reader sar = new StringArrayReader(aContents.getLines());
            final TokenStream lexer = (TokenStream)
                aLexerClass.getConstructor(new Class[] {Reader.class})
                    .newInstance(new Object[] {sar});
            aLexerClass.getMethod(
                "setFilename",
                new Class[] {String.class}).invoke(
                    lexer, new Object[] {aContents.getFilename()});
            aLexerClass.getMethod(
                "setCommentListener", new Class[] {CommentListener.class})
                    .invoke(lexer, new Object[] {aContents});

            final LLkParser parser = (LLkParser)
                aParserClass.getConstructor(new Class[] {TokenStream.class})
                    .newInstance(new Object[] {lexer});

            parser.setFilename(aContents.getFilename());
            parser.setASTNodeClass(DetailAST.class.getName());
            aParserClass.getMethod(
                "compilationUnit", new Class[] {}).invoke(
                    parser, new Object[] {});
            return (DetailAST) parser.getAST();
        }
        catch (InvocationTargetException exception) {
            //Re-throw antlr exceptions, pass on runtime exceptions
            //and convert any other exception to a runtime exception
            if (RecognitionException.class.isAssignableFrom(
                exception.getCause().getClass()))
            {
                throw (RecognitionException) exception.getCause();
            }
            else if (TokenStreamException.class.isAssignableFrom(
                exception.getCause().getClass()))
            {
                throw (TokenStreamException) exception.getCause();
            }
            else if (RuntimeException.class.isAssignableFrom(
                exception.getCause().getClass()))
            {
                throw (RuntimeException) exception.getCause();
            }
            else {
                throw new RuntimeException(exception.getCause());
            }
        }
        catch (RuntimeException exception) {
            //Pass on runtime exceptions
            throw exception;
        }
        catch (Exception exception) {
            //Convert any reflection exceptions to runtime exceptions
            throw new RuntimeException(exception);
        }
    }

