    /**
     * Creates a new <code>Checker</code> instance.
     *
     * @param aConfig the configuration to use
     * @param aConfigs the configuation of the checks to use
     * @throws CheckstyleException if an error occurs
     */
    public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)
        throws CheckstyleException
    {
        mConfig = aConfig;
        LocalizedMessage.setLocale(new Locale(mConfig.getLocaleLanguage(),
                                              mConfig.getLocaleCountry()));

        // TODO: create, configure and register the FileSetChecks from config
        // file instead of hardcoding it here in the Checker constructor.
        // Probably the addFileSetCheck mthod must be called from outside
        // the checker, just like the TreeWalker is not concerned with
        // finding all the checks it has to execute (IOC principle).

        // TODO: uncommenting the addFileSetCheck calls breaks the tests
        // because the packageHtml check is always executed and yields
        // additional errors that are not expected in the current test code
        // (which should stay like it currently is!)

        FileSetCheck translationCheck = new TranslationCheck();
        // addFileSetCheck(translationCheck);

        FileSetCheck packageHtmlCheck = new PackageHtmlCheck();
        // addFileSetCheck(packageHtmlCheck);

        final TreeWalker walker = new TreeWalker(mConfig);
        // TODO: improve the error handing
        for (int i = 0; i < aConfigs.length; i++) {
            final CheckConfiguration config = aConfigs[i];
            // IMPORTANT! Need to use the same class loader that created this
            // class. Otherwise can get ClassCastException problems.
            walker.registerCheck(
                config.createInstance(this.getClass().getClassLoader()),
                config);
        }
        addFileSetCheck(walker);

        this.addListener(mCounter);
    }

