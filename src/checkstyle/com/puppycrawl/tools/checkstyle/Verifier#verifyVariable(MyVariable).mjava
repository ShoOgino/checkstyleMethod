    /**
     * Verify that a variable conforms to the style.
     * @param aVar the variable details
     **/
    void verifyVariable(MyVariable aVar)
    {
        if (inMethodBlock())
        {
            checkVariable(aVar,
                          mConfig.getLocalVarRegexp(),
                          mConfig.getLocalVarPat());
            return;
        }

        final MyModifierSet mods = aVar.getModifierSet();
        final Scope declaredScope = mods.getVisibilityScope();
        final Scope variableScope =
            inInterfaceBlock() ? Scope.PUBLIC : declaredScope;

        // Always check that the order of modifiers follows the JLS suggestion
        checkModOrder(mods);

        if (inCheckScope(variableScope) &&
            getJavadocBefore(aVar.getLineNo() - 1) == null)
        {
            log(aVar.getLineNo(),
                "variable '" + aVar.getText() + "' missing Javadoc.");
        }

        // Check correct format
        if (inInterfaceBlock()) {
            // The only declarations allowed in interfaces are all static final,
            // even if not declared that way.
            checkVariable(aVar,
                          mConfig.getStaticFinalRegexp(),
                          mConfig.getStaticFinalPat());
        }
        else {

            if (mods.containsStatic()) {
                if (mods.containsFinal()) {
                    // Handle the serialVersionUID constant which is used for
                    // Serialization. Cannot enforce rules on it. :-)
                    if (!"serialVersionUID".equals(aVar.getText())) {
                        checkVariable(aVar,
                                      mConfig.getStaticFinalRegexp(),
                                      mConfig.getStaticFinalPat());
                    }
                }
                else {
                    if (Scope.PRIVATE.equals(variableScope)) {
                        checkVariable(aVar,
                                      mConfig.getStaticRegexp(),
                                      mConfig.getStaticPat());
                }
                    else {
                        log(aVar.getLineNo(),
                            "variable '" + aVar.getText() +
                            "' must be private and have accessor methods.");
                    }
                }
            }
            else {
                // These are the non-static variables
                final boolean isPckg = Scope.PACKAGE.equals(variableScope);
                final boolean isProt = Scope.PROTECTED.equals(variableScope);
                if (Scope.PRIVATE.equals(variableScope) ||
                    (mConfig.isAllowPackage() && isPckg) ||
                    (mConfig.isAllowProtected() && isProt))
                {
                    checkVariable(aVar,
                                  mConfig.getMemberRegexp(),
                                  mConfig.getMemberPat());
                }
                else if (mods.containsPublic() &&
                         mConfig.getPublicMemberRegexp().match(aVar.getText()))
                {
                    // silently allow
                }
                else {
                    log(aVar.getLineNo(),
                        "variable '" + aVar.getText() +
                        "' must be private and have accessor methods.");
                }
            }
        }
    }

