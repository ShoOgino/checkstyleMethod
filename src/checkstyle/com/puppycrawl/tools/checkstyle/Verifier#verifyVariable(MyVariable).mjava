    /**
     * Verify that a variable conforms to the style.
     * @param aVar the variable details
     **/
    void verifyVariable(MyVariable aVar)
    {
        if (inMethodBlock()) {
            if (aVar.getModifierSet().containsFinal()) {
                checkVariable(aVar,
                              mConfig.getLocalFinalVarRegexp(),
                              mConfig.getLocalFinalVarPat());
            }
            else {
                checkVariable(aVar,
                              mConfig.getLocalVarRegexp(),
                              mConfig.getLocalVarPat());
            }
            return;
        }

        final MyModifierSet mods = aVar.getModifierSet();
        final Scope declaredScope = mods.getVisibilityScope();
        final Scope variableScope =
            inInterfaceBlock() ? Scope.PUBLIC : declaredScope;

        if (inCheckScope(variableScope)
            && (getJavadocBefore(aVar.getStartLineNo() - 1) == null))
        {
            mMessages.add(aVar.getLineNo(), aVar.getColumnNo() - 1,
                          "javadoc.missing");
        }

        // Check correct format
        if (inInterfaceBlock()) {
            // The only declarations allowed in interfaces are all static final,
            // even if not declared that way.
            checkVariable(aVar,
                          mConfig.getStaticFinalRegexp(),
                          mConfig.getStaticFinalPat());
        }
        else {
            // Record the name of the variable for detection of unused
            Map typeVars = (Map) mTypeFieldsMap.get(mCurrentTypeName);
            if (typeVars == null) {
                typeVars = new HashMap();
                mTypeFieldsMap.put(mCurrentTypeName, typeVars);
            }
            typeVars.put(aVar.getText(), aVar);

            ///////////////////////////////////////////////////////////////////
            // THIS BLOCK NEEDS REFACTORING!!
            ///////////////////////////////////////////////////////////////////
            final boolean isPckg = Scope.PACKAGE.equals(variableScope);
            final boolean isProt = Scope.PROTECTED.equals(variableScope);

            if (mods.containsStatic()) {
                if (mods.containsFinal()) {
                    // Handle the serialVersionUID constant which is used for
                    // Serialization. Cannot enforce rules on it. :-)
                    if (!"serialVersionUID".equals(aVar.getText())) {
                        checkVariable(aVar,
                                      mConfig.getStaticFinalRegexp(),
                                      mConfig.getStaticFinalPat());
                    }
                }
                else {
                    if (Scope.PRIVATE.equals(variableScope)
                        || (mConfig.isAllowPackage() && isPckg)
                        || (mConfig.isAllowProtected() && isProt))
                    {
                        checkVariable(aVar,
                                      mConfig.getStaticRegexp(),
                                      mConfig.getStaticPat());
                    }
                    else {
                        mMessages.add(aVar.getLineNo(), aVar.getColumnNo() - 1,
                                      "variable.notPrivate", aVar.getText());
                    }
                }
            }
            else {
                // These are the non-static variables
                if (Scope.PRIVATE.equals(variableScope)
                    || (mConfig.isAllowPackage() && isPckg)
                    || (mConfig.isAllowProtected() && isProt))
                {
                    checkVariable(aVar,
                                  mConfig.getMemberRegexp(),
                                  mConfig.getMemberPat());
                }
                else if (mods.containsPublic()
                         && mConfig.getPublicMemberRegexp()
                               .match(aVar.getText()))
                {
                    // silently allow
                }
                else {
                    mMessages.add(aVar.getLineNo(), aVar.getColumnNo() - 1,
                                  "variable.notPrivate", aVar.getText());
                }
            }
        }
    }

