    /**
     * Static helper method to parses a Java source file with a given
     * lexer class and parser class.
     * @param aContents contains the contents of the file
     * @param aSilentlyConsumeErrors flag to output errors to stdout or not
     * @param aTreatAssertAsKeyword flag to treat 'assert' as a keyowrd
     * @param aTreatEnumAsKeyword flag to treat 'enum' as a keyowrd
     * @throws TokenStreamException if lexing failed
     * @throws RecognitionException if parsing failed
     * @return the root of the AST
     */
    private static DetailAST parse(
        FileContents aContents,
        boolean aSilentlyConsumeErrors,
        boolean aTreatAssertAsKeyword,
        boolean aTreatEnumAsKeyword)
        throws RecognitionException, TokenStreamException
    {
        final Reader sar = new StringArrayReader(aContents.getLines());
        final GeneratedJavaLexer lexer = new GeneratedJavaLexer(sar);
        lexer.setFilename(aContents.getFilename());
        lexer.setCommentListener(aContents);
        lexer.setTreatAssertAsKeyword(aTreatAssertAsKeyword);
        lexer.setTreatEnumAsKeyword(aTreatEnumAsKeyword);

        final GeneratedJavaRecognizer parser =
            aSilentlyConsumeErrors
                ? new SilentJavaRecognizer(lexer)
                : new GeneratedJavaRecognizer(lexer);
        parser.setFilename(aContents.getFilename());
        parser.setASTNodeClass(DetailAST.class.getName());
        parser.compilationUnit();

        return (DetailAST) parser.getAST();
    }

