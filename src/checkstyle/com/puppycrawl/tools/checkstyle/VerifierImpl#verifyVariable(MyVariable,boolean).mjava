    /** @see Verifier **/
    public void verifyVariable(MyVariable aVar, boolean aInInterface)
    {
        if (getJavadocBefore(aVar.getLineNo() - 1) == null) {
            if (!mConfig.isRelaxJavadoc() || inInterfaceBlock() ||
                (aVar.getModifierSet().containsProtected() ||
                 aVar.getModifierSet().containsPublic()))
            {
                log(aVar.getLineNo(),
                    "variable '" + aVar.getText() + "' missing Javadoc.");
            }
        }

        // Check correct format
        if (aInInterface) {
            // The only declarations allowed in interfaces are all static final,
            // even if not declared that way.
            checkVariable(aVar,
                          mConfig.getStaticFinalRegexp(),
                          mConfig.getStaticFinalPat());
        }
        else {
            final MyModifierSet mods = aVar.getModifierSet();

            // Logic to detect unused variables
            //if (mods.containsPrivate()) {
            //    System.out.println("Need to check for " + aVar.getText());
            //}

            // Checks for Javadoc
            if (mods.containsStatic()) {
                if (mods.containsFinal()) {
                    // Handle the serialVersionUID constant which is used for
                    // Serialization. Cannot enforce rules on it. :-)
                    if (!"serialVersionUID".equals(aVar.getText())) {
                        checkVariable(aVar,
                                      mConfig.getStaticFinalRegexp(),
                                      mConfig.getStaticFinalPat());
                    }
                }
                else {
                    if (mods.containsPrivate()) {
                        checkVariable(aVar,
                                      mConfig.getStaticRegexp(),
                                      mConfig.getStaticPat());
                }
                    else {
                        log(aVar.getLineNo(),
                            "variable '" + aVar.getText() +
                            "' must be private and have accessor methods.");
                    }
                }
            }
            else {
                // These are the non-static variables
                if (mods.containsPrivate() ||
                    (mConfig.isAllowProtected() && mods.containsProtected()))
                {
                    checkVariable(aVar,
                                  mConfig.getMemberRegexp(),
                                  mConfig.getMemberPat());
                }
                else if (mods.containsPublic() &&
                         mConfig.getPublicMemberRegexp().match(aVar.getText()))
                {
                    // silently allow
                }
                else {
                    log(aVar.getLineNo(),
                        "variable '" + aVar.getText() +
                        "' must be private and have accessor methods.");
                }
            }
        }
    }

