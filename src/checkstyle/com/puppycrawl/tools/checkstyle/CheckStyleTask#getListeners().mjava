    /**
     * Return the list of listeners set in this task.
     * @return the list of listeners.
     * @throws ClassNotFoundException if an error occurs
     * @throws InstantiationException if an error occurs
     * @throws IllegalAccessException if an error occurs
     * @throws IOException if an error occurs
     */
    protected AuditListener[] getListeners() throws ClassNotFoundException,
            InstantiationException, IllegalAccessException, IOException
    {
        final int formatterCount = Math.max(1, mFormatters.size());

        final AuditListener[] listeners = new AuditListener[formatterCount];

        // formatters
        if (mFormatters.isEmpty()) {
            final OutputStream debug = new LogOutputStream(this,
                    Project.MSG_DEBUG);
            final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);
            listeners[0] = new DefaultLogger(debug, true, err, true);
        }
        else {
            for (int i = 0; i < formatterCount; i++) {
                final Formatter f = mFormatters.get(i);
                listeners[i] = f.createListener(this);
            }
        }
        return listeners;
    }

