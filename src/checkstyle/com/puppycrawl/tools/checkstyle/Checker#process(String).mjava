    /**
     * Processes a specified file and prints out all errors found.
     * @return the number of errors found
     * @param aFileName the name of the file to process
     **/
    private int process(String aFileName)
    {
        final File f = new File(aFileName);
        final long timestamp = f.lastModified();
        if (mCache.alreadyChecked(aFileName, timestamp)) {
            return 0;
        }

        LineText[] errors;
        try {
            fireFileStarted(aFileName);
            final String[] lines = getLines(aFileName);
            final Reader sar = new StringArrayReader(lines);
            VerifierSingleton.getInstance().clearMessages();
            VerifierSingleton.getInstance().setLines(lines);
            try {
                final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);
                jl.setFilename(aFileName);
                final GeneratedJava14Recognizer jr =
                    new SilentJava14Recognizer(jl);
                jr.setFilename(aFileName);
                jr.setASTNodeClass(MyCommonAST.class.getName());
                jr.compilationUnit();
            }
            catch (RecognitionException re) {
                // Parsing might have failed because the checked
                // filecontains "assert" statement. Retry with a
                // grammar that treats "assert" as an identifier
                // and not as a keyword

                // Arghh - the pain - duplicate code!
                final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);
                jl.setFilename(aFileName);
                final GeneratedJavaRecognizer jr =
                    new GeneratedJavaRecognizer(jl);
                jr.setFilename(aFileName);
                jr.setASTNodeClass(MyCommonAST.class.getName());
                jr.compilationUnit();
            }
            errors = VerifierSingleton.getInstance().getMessages();
        }
        catch (FileNotFoundException fnfe) {
            errors = new LineText[] {new LineText(0, "File not found!")};
        }
        catch (IOException ioe) {
            errors = new LineText[] {
                new LineText(0, "Got an IOException -" + ioe.getMessage())};
        }
        catch (RecognitionException re) {
            errors = new LineText[] {
                new LineText(0,
                             "Got a RecognitionException -" + re.getMessage())};
        }
        catch (TokenStreamException te) {
            errors = new LineText[] {
                new LineText(0,
                             "Got a TokenStreamException -" + te.getMessage())};
        }

        if (errors.length == 0) {
            mCache.checkedOk(aFileName, timestamp);
        }
        else {
            fireErrors(aFileName, errors);
        }

        fireFileFinished(aFileName);
        return errors.length;
    }

