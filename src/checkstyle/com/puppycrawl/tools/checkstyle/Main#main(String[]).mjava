    /**
     * Loops over the files specified checking them for errors. The exit code
     * is the number of errors found in all the files.
     * @param aArgs the command line arguments
     **/
    public static void main(String[] aArgs)
    {
        if (aArgs.length == 0) {
            usage();
        }

        // be brain dead about arguments parsing
        String format = "plain";
        String output = null;
        Properties props = System.getProperties();
        final List foundFiles = new ArrayList();
        final ArrayList files = new ArrayList();
        for (int i = 0; i < aArgs.length; i++) {
            if ("-f".equals(aArgs[i])) {
                format = aArgs[++i];
            }
            else if ("-o".equals(aArgs[i])) {
                output = aArgs[++i];
            }
            else if ("-r".equals(aArgs[i])) {
                traverse(new File(aArgs[++i]), foundFiles);
            }
            else if ("-p".equals(aArgs[i])) {
                props = loadProperties(new File(aArgs[++i]));
            }
            else {
                files.add(aArgs[i]);
            }
        }

        // create the appropriate listener
        OutputStream out = System.out;
        boolean closeOut = false;
        if (output != null) {
            try {
                out = new FileOutputStream(output);
                closeOut = true;
            }
            catch (FileNotFoundException e) {
                System.out.println("Could not find file: '" + output + "'");
                System.exit(1);
            }
        }
        AuditListener listener = null;
        if ("xml".equals(format)) {
            listener = new XMLLogger(out, closeOut);
        }
        else if ("plain".equals(format)) {
            listener = new DefaultLogger(out, closeOut);
        }
        else {
            System.out.println("Invalid format: (" + format
                               + "). Must be 'plain' or 'xml'.");
            usage();
        }

        // Check that I have a config file
        if (files.isEmpty()) {
            System.out.println("Need to specify a config file");
            usage();
        }

        // Load the config file
        final String configFname = (String) files.remove(0);
        CheckConfiguration[] checkConfigs = null;
        try {
            checkConfigs = ConfigurationLoader.loadConfigs(configFname);
        }
        catch (CheckstyleException e) {
            System.out.println("Error loading configuration file");
            e.printStackTrace(System.out);
            System.exit(1);
        }

        Checker c = null;
        try {
            c = new Checker(new Configuration(props, System.out), checkConfigs);
            c.addListener(listener);
        }
        catch (Exception e) {
            System.out.println("Unable to create Checker: "
                               + e.getMessage());
            e.printStackTrace(System.out);
            System.exit(1);
        }

        files.addAll(foundFiles);
        final int numErrs =
            c.processNEW((String[]) files.toArray(new String[files.size()]));
        c.destroy();
        System.exit(numErrs);
    }

