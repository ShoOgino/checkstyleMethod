    /**
     * Loops over the files specified checking them for errors. The exit code
     * is the number of errors found in all the files.
     * @param aArgs the command line arguments
     **/
    public static void main(String[] aArgs)
    {
        if (aArgs.length == 0) {
            usage();
        }

        // be brain dead about arguments parsing
        String format = "plain";
        String output = null;
        String[] files = null;
        for (int i = 0; i < aArgs.length; i++) {
            if ("-f".equals(aArgs[i])) {
                format = aArgs[++i];
            }
            else if ("-o".equals(aArgs[i])) {
                output = aArgs[++i];
            }
            else {
                files = new String[aArgs.length - i];
                System.arraycopy(aArgs, i, files, 0, files.length);
                break;
            }
        }

        // create the appropriate listener
        OutputStream out = System.out;
        if (output != null) {
            try {
                out = new FileOutputStream(output);
            }
            catch (FileNotFoundException e) {
                System.out.println("Could not find file: '" + output + "'");
                System.exit(1);
            }
        }
        AuditListener listener = null;
        if ("xml".equals(format)) {
            listener = new XMLLogger(out);
        }
        else if ("plain".equals(format)) {
            listener = new DefaultLogger(out);
        }
        else {
            System.out.println("Invalid format: (" + format +
                               "). Must be 'plain' or 'xml'.");
            usage();
        }

        Checker c = null;
        try {
            c = new Checker(new Configuration(System.getProperties(),
                                              System.out),
                            System.out);
            c.addListener(listener);
        }
        catch (RESyntaxException rese) {
            System.out.println("Unable to create an regexp object: " +
                               rese.getMessage());
            rese.printStackTrace(System.out);
            System.exit(1);
        }
        catch (IOException ex) {
            System.out.println("I/O error occurred: " + ex.getMessage());
            ex.printStackTrace(System.out);
            System.exit(1);
        }

        final int numErrs = c.process(files);

        c.destroy();
        System.exit(numErrs);
    }

