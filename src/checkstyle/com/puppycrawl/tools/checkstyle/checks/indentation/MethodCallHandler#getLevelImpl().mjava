    /**
     * Compute the indentation amount for this handler.
     *
     * @return the expected indentation amount
     */
    protected IndentLevel getLevelImpl()
    {
        // if inside a method call's params, this could be part of
        // an expression, so get the previous line's start
        if (getParent() instanceof MethodCallHandler) {
            final MethodCallHandler container =
                ((MethodCallHandler) getParent());
            if (container != null) {
                if (areOnSameLine(container.getMainAst(), getMainAst())) {
                    return container.getLevel();
                }

                // we should increase indentation only if this is the first
                // chained method call which was moved to the next line
                final DetailAST main = getMainAst();
                final DetailAST dot = (DetailAST) main.getFirstChild();
                final DetailAST target = (DetailAST) dot.getFirstChild();

                if ((dot.getType() == TokenTypes.DOT)
                    && (target.getType() == TokenTypes.METHOD_CALL))
                {
                    final DetailAST dot1 = (DetailAST) target.getFirstChild();
                    final DetailAST target1 = (DetailAST) dot1.getFirstChild();

                    if ((dot1.getType() == TokenTypes.DOT)
                        && (target1.getType() == TokenTypes.METHOD_CALL))
                    {
                        return container.getLevel();
                    }
                }
                return new IndentLevel(container.getLevel(), getBasicOffset());
            }

            // if we get here, we are the child of the left hand side (name
            //  side) of a method call with no "containing" call, use
            //  the first non-method call parent

            ExpressionHandler p = getParent();
            while (p instanceof MethodCallHandler) {
                p = p.getParent();
            }
            return p.suggestedChildLevel(this);
        }

        // if our expression isn't first on the line, just use the start
        // of the line
        final LineSet lines = new LineSet();
        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);
        final int firstCol = lines.firstLineCol();
        final int lineStart = getLineStart(getFirstAst(getMainAst()));
        if (lineStart != firstCol) {
            return new IndentLevel(lineStart);
        }
        return super.getLevelImpl();
    }

