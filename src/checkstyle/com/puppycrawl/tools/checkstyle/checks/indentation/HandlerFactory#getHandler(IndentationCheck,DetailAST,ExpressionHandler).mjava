    /**
     * Get the handler for an AST.
     *
     * @param aIndentCheck   the indentation check
     * @param aAst           ast to handle
     * @param aParent        the handler parent of this AST
     *
     * @return the ExpressionHandler for aAst
     */
    public ExpressionHandler getHandler(IndentationCheck aIndentCheck,
        DetailAST aAst, ExpressionHandler aParent)
    {
        int type = aAst.getType();

        ExpressionHandler expHandler = null;
        try {
            Constructor handlerCtor = (Constructor) mTypeHandlers.get(
                new Integer(type));
            if (handlerCtor != null) {
                expHandler = (ExpressionHandler) handlerCtor.newInstance(
                    new Object[] {
                        aIndentCheck,
                        aAst,
                        aParent
                    }
                );
            }
        }
        catch (InstantiationException e) {
            System.out.println("couldn't instantiate constructor for "
                + aAst);
            e.printStackTrace();
        }
        catch (IllegalAccessException e) {
            System.out.println("couldn't access constructor for " + aAst);
            e.printStackTrace();
        }
        catch (InvocationTargetException e) {
            System.out.println("couldn't instantiate constructor for "
                + aAst);
            e.printStackTrace();
        }
        if (expHandler == null) {
            System.err.println("no handler for type " + type);
        }
        return expHandler;
    }

