    /**
     * Find the set of lines for a given subtree.
     * 
     * @param aLines          the set of lines to add to
     * @param aTree           the subtree to examine
     * @param aAllowNesting   whether or not to allow nested subtrees
     */
    protected void findSubtreeLines(LineSet aLines, DetailAST aTree, 
        boolean aAllowNesting) 
    {
        // find line for this node
        // TODO: getLineNo should probably not return < 0, but it is for 
        // the interface methods... I should ask about this

        if (getIndentCheck().getHandlerFactory().isHandledType(aTree.getType())
            || aTree.getLineNo() < 0) 
        {
            return;
        }

        // TODO: the problem with this is that not all tree tokens actually
        // have the right column number -- I should get a list of these 
        // and verify that checking nesting this way won't cause problems
//        if (allowNesting && tree.getColumnNo() != getLineStart(tree)) {
//            return;
//        }

        Integer lineNum = new Integer(aTree.getLineNo());
        Integer colNum = aLines.getStartColumn(lineNum);

        int thisLineColumn = expandedTabsColumnNo(aTree);
        if (colNum == null) {
            aLines.addLineAndCol(lineNum, thisLineColumn);
        } 
        else {
            if (expandedTabsColumnNo(aTree) < colNum.intValue()) {
                aLines.addLineAndCol(lineNum, thisLineColumn);
            }
        }

        // check children
        for (DetailAST node = (DetailAST) aTree.getFirstChild(); 
            node != null; 
            node = (DetailAST) node.getNextSibling()) 
        {
            findSubtreeLines(aLines, node, aAllowNesting);
        }
    }

