    /**
     * Checks find&lt;METHOD&gt;(...) method requirements..
     * @param aMethodAST the finder method definition AST.
     */
    protected void checkFindMethod(DetailAST aMethodAST)
    {
        // there must be only one findByPrimaryKey method with one parameter
        final DetailAST nameAST = aMethodAST.findFirstToken(TokenTypes.IDENT);
        final String name = nameAST.getText();
        if (name.equals("findByPrimaryKey")) {
            if (mHasFindByPrimaryKey) {
                logName(aMethodAST, "findbyprimarykey.bean", new Object[] {});
            }
            mHasFindByPrimaryKey = true;
            final DetailAST paramAST =
                aMethodAST.findFirstToken(TokenTypes.PARAMETERS);
            final int paramCount = paramAST.getChildCount();
            if (paramCount != 1) {
                logName(aMethodAST, "paramcount.bean", new Object[] {"1"});
            }
        }

        // return type is the entity beanï¿½s remote or local interface
        if (Utils.isVoid(aMethodAST)) {
            logName(aMethodAST, "voidmethod.bean", new Object[] {});
        }

        // every find method throws a javax.ejb.FindException
        checkThrows(aMethodAST, "javax.ejb.FinderException");
    }

