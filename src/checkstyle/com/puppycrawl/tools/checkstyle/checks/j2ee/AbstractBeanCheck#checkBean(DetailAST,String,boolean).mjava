/**
 * Checks a bean class requirements:
 * <ul>
 * <li>The class is defined as <code>public</code>.</li>
  * <li>It contains a <code>public</code> constructor with no parameters.</li>
 * <li>It must not define the <code>finalize</code> method.</li>
 * </ul>
 * @param aAST CLASS_DEF node for class definition to check.
 * @param aBeanType bean type for error messages.
 * @param aAllowAbstract if false, the class cannot be abstract.
 */
    protected void checkBean(
        DetailAST aAST,
        String aBeanType,
        boolean aAllowAbstract)
    {
        final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);
        final String name = nameAST.getText();
        final String arg = aBeanType + " '" + name + "'";

        if (!Utils.isPublic(aAST)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "nonpublic.bean", arg);
        }
        if (Utils.isFinal(aAST)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "illegalmodifier.bean",
                new Object[] {arg, "final"});
        }
        if (!aAllowAbstract && Utils.isAbstract(aAST)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "illegalmodifier.bean",
                new Object[] {arg, "abstract"});
        }
        if (!Utils.hasPublicConstructor(aAST, 0)) {
            log(nameAST.getLineNo(), nameAST.getColumnNo(),
                "nonpublicconstructor.bean", arg);
        }
        if (Utils.hasPublicMethod(aAST, "finalize", true, 0)) {
            log(
                nameAST.getLineNo(),
                nameAST.getColumnNo(),
                "hasfinalize.bean",
                arg);
        }
    }

