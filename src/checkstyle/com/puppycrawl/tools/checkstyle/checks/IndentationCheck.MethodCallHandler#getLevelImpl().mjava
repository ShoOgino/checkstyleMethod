        public int getLevelImpl()
        {
            // if inside a method call's params, this could be part of 
            // an expression, so get the previous line's start

            if (mParent instanceof MethodCallHandler) {
                MethodCallHandler container = ((MethodCallHandler) mParent)
                    .findContainingMethodCall(this);
                if (container != null) {
                    if (areOnSameLine(container.mMainAst, mMainAst)) {
                        return container.getLevel();
                    } 
                    else {
                        return container.getLevel() + mIndentationAmount;
                    }                 
                } 

                // if we get here, we are the child of the left hand side (name
                //  side) of a method call with no "containing" call, use 
                //  the first non-method callparent
                
                ExpressionHandler p = mParent;
                while (p instanceof MethodCallHandler) {
                    p = p.mParent;
                }
                return p.suggestedChildLevel(this);
            }
            
            // if our expression isn't first on the line, just use the start
            // of the line
            LineSet lines = new LineSet();
            findSubtreeLines(lines, (DetailAST) mMainAst.getFirstChild(), true);
            int firstCol = lines.firstLineCol();
            int lineStart = getLineStart(getFirstAst(mMainAst));
            if (lineStart != firstCol) {
                return lineStart;
            }
            else {
                return super.getLevelImpl();
            }
        }

