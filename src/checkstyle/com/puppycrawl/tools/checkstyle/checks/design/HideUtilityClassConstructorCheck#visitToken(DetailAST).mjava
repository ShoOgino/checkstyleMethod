    /** @see Check */
    public void visitToken(DetailAST aAST)
    {
        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);
        DetailAST child = (DetailAST) objBlock.getFirstChild();
        boolean hasMethod = false;
        boolean hasNonStaticMethod = false;
        boolean hasDefaultCtor = true;
        boolean hasPublicCtor = false;

        while (child != null) {
            if (child.getType() == TokenTypes.METHOD_DEF) {
                hasMethod = true;
                final DetailAST modifiers =
                    child.findFirstToken(TokenTypes.MODIFIERS);
                if (!modifiers.branchContains(TokenTypes.LITERAL_STATIC)) {
                    hasNonStaticMethod = true;
                }
            }
            if (child.getType() == TokenTypes.CTOR_DEF) {
                hasDefaultCtor = false;
                final DetailAST modifiers =
                    child.findFirstToken(TokenTypes.MODIFIERS);
                if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)
                    && !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED))
                {
                    // treat package visible as public
                    // for the purpose of this Check
                    hasPublicCtor = true;
                }

            }
            child = (DetailAST) child.getNextSibling();
        }

        final boolean hasAccessibleCtor = (hasDefaultCtor || hasPublicCtor);

        // figure out if class extends java.lang.object directly
        // keep it simple for now and get a 99% solution
        // TODO: check for "extends java.lang.Object" and "extends Object"
        // consider "import org.omg.CORBA.*"
        final DetailAST extendsClause =
                aAST.findFirstToken(TokenTypes.EXTENDS_CLAUSE);
        final boolean extendsJLO = // J.Lo even made it into in our sources :-)
                extendsClause.getFirstChild() == null;

        if (extendsJLO
                && hasMethod && !hasNonStaticMethod && hasAccessibleCtor)
        {
            log(aAST.getLineNo(), aAST.getColumnNo(),
                "Utility classes should not have "
                + "a public or default constructor.");
        }
    }

