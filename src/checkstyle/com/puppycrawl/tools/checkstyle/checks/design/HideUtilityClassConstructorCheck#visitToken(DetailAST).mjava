    /** {@inheritDoc} */
    public void visitToken(DetailAST aAST)
    {
        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);
        DetailAST child = (DetailAST) objBlock.getFirstChild();
        boolean hasMethodOrField = false;
        boolean hasNonStaticMethodOrField = false;
        boolean hasDefaultCtor = true;
        boolean hasPublicCtor = false;

        while (child != null) {
            int type = child.getType();
            if (type == TokenTypes.METHOD_DEF
                    || type == TokenTypes.VARIABLE_DEF)
            {
                hasMethodOrField = true;
                final DetailAST modifiers =
                    child.findFirstToken(TokenTypes.MODIFIERS);
                boolean isStatic =
                    modifiers.branchContains(TokenTypes.LITERAL_STATIC);
                boolean isPrivate =
                    modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);

                if (!isStatic && !isPrivate) {
                    hasNonStaticMethodOrField = true;
                }
            }
            if (type == TokenTypes.CTOR_DEF) {
                hasDefaultCtor = false;
                final DetailAST modifiers =
                    child.findFirstToken(TokenTypes.MODIFIERS);
                if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)
                    && !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED))
                {
                    // treat package visible as public
                    // for the purpose of this Check
                    hasPublicCtor = true;
                }

            }
            child = (DetailAST) child.getNextSibling();
        }

        final boolean hasAccessibleCtor = (hasDefaultCtor || hasPublicCtor);

        // figure out if class extends java.lang.object directly
        // keep it simple for now and get a 99% solution
        // TODO: check for "extends java.lang.Object" and "extends Object"
        // consider "import org.omg.CORBA.*"
        final boolean extendsJLO = // J.Lo even made it into in our sources :-)
            aAST.findFirstToken(TokenTypes.EXTENDS_CLAUSE) == null;

        final boolean isUtilClass =
            extendsJLO && hasMethodOrField && !hasNonStaticMethodOrField;

        if (isUtilClass && hasAccessibleCtor) {
            log(aAST.getLineNo(), aAST.getColumnNo(), "hide.utility.class");
        }
    }

