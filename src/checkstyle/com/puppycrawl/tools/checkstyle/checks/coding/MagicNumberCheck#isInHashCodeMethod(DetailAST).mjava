    /**
     * Determines whether or not the given AST is in a valid hash code method.
     * A valid hash code method is considered to be a method of the signature
     * {@code public int hashCode()}.
     *
     * @param aAST the AST from which to search for an enclosing hash code
     * method definition
     *
     * @return {@code true} if {@code aAST} is in the scope of a valid hash
     * code method
     */
    private boolean isInHashCodeMethod(DetailAST aAST)
    {
        // if not in a code block, can't be in hashCode()
        if (!ScopeUtils.inCodeBlock(aAST)) {
            return false;
        }

        // find the method definition AST
        DetailAST methodDefAST = aAST.getParent();
        while (methodDefAST != null
                && methodDefAST.getType() != TokenTypes.METHOD_DEF)
        {
            methodDefAST = methodDefAST.getParent();
        }

        if (methodDefAST == null) {
            return false;
        }

        // chech for 'hashCode' name
        final DetailAST identAST =
                methodDefAST.findFirstToken(TokenTypes.IDENT);
        System.out.println(identAST);
        if (!"hashCode".equals(identAST.getText())) {
            return false;
        }

        // check for no arguments
        final DetailAST paramAST =
                methodDefAST.findFirstToken(TokenTypes.PARAMETERS);
        if (paramAST.getChildCount() != 0) {
            return false;
        }

        // we are in a 'public int hashCode()' method!
        return true;
    }

