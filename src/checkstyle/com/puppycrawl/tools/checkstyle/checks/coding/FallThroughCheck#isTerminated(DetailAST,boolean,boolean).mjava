    /**
     * Checks if a given subtree terminated by return, throw or,
     * if allowed break, continue.
     * @param aAST root of given subtree
     * @param aUseBreak should we consider break as terminator.
     * @param aUseContinue should we consider continue as terminator.
     * @return true if the subtree is terminated.
     */
    private boolean isTerminated(final DetailAST aAST, boolean aUseBreak,
                                 boolean aUseContinue)
    {
        switch (aAST.getType()) {
        case TokenTypes.LITERAL_RETURN:
        case TokenTypes.LITERAL_THROW:
            return true;
        case TokenTypes.LITERAL_BREAK:
            return aUseBreak;
        case TokenTypes.LITERAL_CONTINUE:
            return aUseContinue;
        case TokenTypes.SLIST:
            return checkSlist(aAST, aUseBreak, aUseContinue);
        case TokenTypes.LITERAL_IF:
            return checkIf(aAST, aUseBreak, aUseContinue);
        case TokenTypes.LITERAL_FOR:
        case TokenTypes.LITERAL_WHILE:
        case TokenTypes.LITERAL_DO:
            return checkLoop(aAST);
        case TokenTypes.LITERAL_TRY:
            return checkTry(aAST, aUseBreak, aUseContinue);
        case TokenTypes.LITERAL_SWITCH:
            return checkSwitch(aAST, aUseContinue);
        default:
            return false;
        }
    }

