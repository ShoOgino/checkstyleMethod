    /**
     * Checks if an exception is already know (list of known
     * exceptions contains it or its superclass) and it's not
     * a superclass for some known exception and it's not
     * an unchecked exception.
     * If it's unknown then it will be added to ist of known exception.
     * All subclasses of this exception will be deleted from known
     * and the exception  will be added instead.
     *
     * @param aExc <code>FullIdent</code> of exception to check
     * @param aKnownExcs list of already known exception
     */
    private void checkException(FullIdent aExc, List aKnownExcs)
    {
        // Let's trye to load class.
        Class excClass = null;

        if (!mAllowUnchecked || !mAllowSubclasses) {
            excClass = resolveClass(aExc.getText());
            if (excClass == null) {
                log(aExc.getLineNo(), aExc.getColumnNo(),
                    "redundant.throws.classInfo", aExc.getText());
            }
        }

        if (!mAllowUnchecked) {
            if (isUnchecked(excClass)) {
                log(aExc.getLineNo(), aExc.getColumnNo(),
                    "redundant.throws.unchecked", aExc.getText());
            }
        }

        boolean shouldAdd = true;
        for (Iterator known = aKnownExcs.iterator(); known.hasNext();) {
            final ClassInfo ci = (ClassInfo) known.next();
            final FullIdent fi = ci.getName();

            if (isSameType(fi.getText(), aExc.getText())) {
                shouldAdd = false;
                log(aExc.getLineNo(), aExc.getColumnNo(),
                    "redundant.throws.duplicate", aExc.getText());
            }
            else if (!mAllowSubclasses) {
                if (isSubclass(ci.getClazz(), excClass)) {
                    known.remove();
                    log(fi.getLineNo(), fi.getColumnNo(),
                        "redundant.throws.subclass",
                        fi.getText(), aExc.getText());
                }
                else if (isSubclass(excClass, ci.getClazz())) {
                    shouldAdd = false;
                    log(aExc.getLineNo(), aExc.getColumnNo(),
                        "redundant.throws.subclass",
                        aExc.getText(), fi.getText());
                }
            }
        }

        if (shouldAdd) {
            aKnownExcs.add(new ClassInfo(aExc, excClass));
        }
    }

