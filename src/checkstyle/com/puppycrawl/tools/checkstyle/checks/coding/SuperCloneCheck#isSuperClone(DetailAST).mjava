    /**
     *  Determines whether a 'super' literal calls super.clone()
     * within a clone() method.
     * @param aAST the AST node for a 'super' literal.
     * @return true if aAST is a call to super.clone within a
     * clone() method.
     */
    private boolean isSuperClone(DetailAST aAST)
    {
        if (aAST.getType() != TokenTypes.LITERAL_SUPER) {
            return false;
        }
        // dot operator?
        DetailAST parent = aAST.getParent();
        if ((parent == null) || (parent.getType() != TokenTypes.DOT)) {
            return false;
        }

        // named 'clone'?
        final AST sibling = aAST.getNextSibling();
        if ((sibling == null) || (sibling.getType() != TokenTypes.IDENT)) {
            return false;
        }
        final String name = sibling.getText();
        if (!"clone".equals(name)) {
            return false;
        }

        // 0 parameters?
        final DetailAST args = (DetailAST) parent.getNextSibling();
        if ((args == null) || (args.getType() != TokenTypes.ELIST)) {
            return false;
        }
        if (args.getChildCount() != 0) {
            return false;
        }

        // in a clone() method?
        while (parent != null) {
            if (parent.getType() == TokenTypes.METHOD_DEF) {
                return isCloneMethod(parent);
            }
            else if ((parent.getType() == TokenTypes.CTOR_DEF)
                || (parent.getType() == TokenTypes.INSTANCE_INIT))
            {
                return false;
            }
            parent = parent.getParent();
        }
        return false;
    }

