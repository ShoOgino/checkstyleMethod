    /**
     * Checks if a given try/cath/finally block terminated by return, throw or,
     * if allowed break, continue.
     * @param aAST loop to check
     * @param aUseBreak should we consider break as terminator.
     * @param aUseContinue should we consider continue as terminator.
     * @return true if try/cath/finally block is terminated.
     */
    private boolean checkTry(final DetailAST aAST, boolean aUseBreak,
                             boolean aUseContinue)
    {
        final DetailAST finalStmt = aAST.getLastChild();
        if (finalStmt.getType() == TokenTypes.LITERAL_FINALLY) {
            return isTerminated(finalStmt.findFirstToken(TokenTypes.SLIST),
                                aUseBreak, aUseContinue);
        }

        boolean isTerminated = isTerminated((DetailAST) aAST.getFirstChild(),
                                            aUseBreak, aUseContinue);

        DetailAST catchStmt = aAST.findFirstToken(TokenTypes.LITERAL_CATCH);
        while (catchStmt != null && isTerminated) {
            DetailAST catchBody = catchStmt.findFirstToken(TokenTypes.SLIST);
            isTerminated &= isTerminated(catchBody, aUseBreak, aUseContinue);
            catchStmt = (DetailAST) catchStmt.getNextSibling();
        }
        return isTerminated;
    }

