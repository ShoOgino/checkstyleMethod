    /**
     * Decides whether the number of an AST is the RHS of a constant
     * definition.
     * @param aAST the AST to check.
     * @return true if the number of aAST is the RHS of a constant definition.
     */
    private boolean isConstantDefinition(DetailAST aAST)
    {
        if (ScopeUtils.inInterfaceBlock(aAST)) {
            return true;
        }
        DetailAST parent = aAST.getParent();

        if (parent == null) {
            return false;
        }

        //skip TYPECAST, UNARY_MINUS, UNARY_PLUS
        while ((parent.getType() == TokenTypes.UNARY_MINUS)
            || (parent.getType() == TokenTypes.UNARY_PLUS)
            || (parent.getType() == TokenTypes.TYPECAST))
        {
            parent = parent.getParent();
        }

        //expression?
        if ((parent == null) || (parent.getType() != TokenTypes.EXPR)) {
            return false;
        }

        //array init?
        parent = parent.getParent();
        if ((parent != null) && (parent.getType() == TokenTypes.ARRAY_INIT)) {
            parent = parent.getParent();
        }

        //assignment?
        if ((parent == null) || (parent.getType() != TokenTypes.ASSIGN)) {
            return false;
        }

        //variable definition?
        parent = parent.getParent();
        if ((parent == null) || (parent.getType() != TokenTypes.VARIABLE_DEF)) {
            return false;
        }

        //final?
        final DetailAST modifiersAST =
            parent.findFirstToken(TokenTypes.MODIFIERS);
        return modifiersAST.branchContains(TokenTypes.FINAL);
    }

