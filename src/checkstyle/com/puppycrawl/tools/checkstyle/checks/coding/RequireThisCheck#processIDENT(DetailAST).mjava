    /**
     * Checks if a given IDENT is method call or field name which
     * require explicit <code>this</code> qualifier.
     *
     * @param aAST IDENT to check.
     */
    private void processIDENT(DetailAST aAST)
    {
        final int parentType = aAST.getParent().getType();

        if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
            || parentType == TokenTypes.ANNOTATION
            || parentType == TokenTypes.ANNOTATION_FIELD_DEF)
        {
            //cannot refer to 'this' from annotations
            return;
        }

        // let's check method calls
        if (parentType == TokenTypes.METHOD_CALL) {
            if (mCheckMethods && isClassField(aAST.getText())) {
                log(aAST, "require.this.method", aAST.getText());
            }
            return;
        }

        // let's check fields
        if (!mCheckFields) {
            // we shouldn't check fields
            return;
        }

        if (ScopeUtils.getSurroundingScope(aAST) == null) {
            // it is not a class or interface it's
            // either import or package
            // we shouldn't checks this
            return;
        }

        if ((parentType == TokenTypes.DOT)
            && (aAST.getPreviousSibling() != null))
        {
            // it's the method name in a method call; no problem
            return;
        }
        if ((parentType == TokenTypes.TYPE)
            || (parentType == TokenTypes.LITERAL_NEW))
        {
            // it's a type name; no problem
            return;
        }
        if ((parentType == TokenTypes.VARIABLE_DEF)
            || (parentType == TokenTypes.CTOR_DEF)
            || (parentType == TokenTypes.METHOD_DEF)
            || (parentType == TokenTypes.CLASS_DEF)
            || (parentType == TokenTypes.ENUM_DEF)
            || (parentType == TokenTypes.INTERFACE_DEF)
            || (parentType == TokenTypes.PARAMETER_DEF)
            || (parentType == TokenTypes.TYPE_ARGUMENT))
        {
            // it's being declared; no problem
            return;
        }

        final String name = aAST.getText();
        if (isClassField(name)) {
            log(aAST, "require.this.variable", name);
        }
    }

