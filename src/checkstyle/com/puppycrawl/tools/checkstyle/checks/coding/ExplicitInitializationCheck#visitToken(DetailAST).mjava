    /** {@inheritDoc} */
    public void visitToken(DetailAST aAST)
    {
        // do not check local variables and
        // fields declared in interface
        if (ScopeUtils.isLocalVariableDef(aAST)
            || ScopeUtils.inInterfaceBlock(aAST))
        {
            return;
        }
        DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);
        if (assign == null) {
            // no assign - no check
            return;
        }

        DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);
        if (modifiers != null
            && modifiers.branchContains(TokenTypes.FINAL))
        {
            // do not check final variables
            return;
        }

        DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);
        DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);
        DetailAST exprStart =
            (DetailAST) assign.getFirstChild().getFirstChild();
        if (isObjectType(type)
            && exprStart.getType() == TokenTypes.LITERAL_NULL)
        {
            log(ident, "explicit.init", ident.getText(), "null");
        }
        int primitiveType = type.getFirstChild().getType();
        if (primitiveType == TokenTypes.LITERAL_BOOLEAN
            && exprStart.getType() == TokenTypes.LITERAL_FALSE)
        {
            log(ident, "explicit.init", ident.getText(), "false");
        }
        if (isNumericType(primitiveType) && isZero(exprStart)) {
            log(ident, "explicit.init", ident.getText(), "0");
        }
        if (primitiveType == TokenTypes.LITERAL_CHAR
            && (isZero(exprStart)
                || exprStart.getType() == TokenTypes.CHAR_LITERAL
                && "'\\0'".equals(exprStart.getText())))
        {
            log(ident, "explicit.init", ident.getText(), "\\0");
        }
    }

