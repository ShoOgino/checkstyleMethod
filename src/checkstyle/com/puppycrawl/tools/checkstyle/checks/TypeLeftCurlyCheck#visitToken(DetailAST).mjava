    /** @see Check */
    public void visitToken(DetailAST aAST)
    {
        final DetailAST brace = (DetailAST)
            Utils.getLastSibling(aAST.getFirstChild())
            .getFirstChild();
        // TODO: should check for modifiers
        final DetailAST startToken =
            (DetailAST) aAST.getFirstChild().getNextSibling();

        final String braceLine = getLines()[brace.getLineNo() - 1];

        // calculate the previous line length without trailing whitespace. Need
        // to handle the case where there is no previous line, cause the line
        // being check is the first line in the file.
        final int prevLineLen = (brace.getLineNo() == 1)
            ? mMaxLineLength
            : Utils.lengthMinusTrailingWhitespace(
                getLines()[brace.getLineNo() - 2]);

        // Check for being told to ignore, or have '{}' which is a special case
        if ((mOption == LeftCurlyOption.IGNORE)
            || ((braceLine.length() > (brace.getColumnNo() + 1))
                && (braceLine.charAt(brace.getColumnNo() + 1) == '}')))
        {
            // ignore
        }
        else if (mOption == LeftCurlyOption.NL) {
            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                log(brace.getLineNo(), brace.getColumnNo(),
                    "line.new", "{");
            }
        }
        else if (mOption == LeftCurlyOption.EOL) {
            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)
                && ((prevLineLen + 2) <= mMaxLineLength))
            {
                log(brace.getLineNo(), brace.getColumnNo(),
                    "line.previous", "{");
            }
        }
        else if (mOption == LeftCurlyOption.NLOW) {
            if (startToken.getLineNo() == brace.getLineNo()) {
                // all ok as on the same line
            }
            else if ((startToken.getLineNo() + 1) == brace.getLineNo()) {
                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                    log(brace.getLineNo(), brace.getColumnNo(),
                        "line.new", "{");
                }
                else if ((prevLineLen + 2) <= mMaxLineLength) {
                    log(brace.getLineNo(), brace.getColumnNo(),
                        "line.previous", "{");
                }
            }
            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                log(brace.getLineNo(), brace.getColumnNo(),
                    "line.new", "{");
            }
        }
    }

