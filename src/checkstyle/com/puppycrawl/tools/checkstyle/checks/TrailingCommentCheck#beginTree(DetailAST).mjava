    /** {@inheritDoc} */
    public void beginTree(DetailAST aRootAST)
    {
        final RE blankLinePattern = getRegexp();
        final Map cppComments = getFileContents().getCppComments();
        final Map cComments = getFileContents().getCComments();
        final Set lines = new HashSet();
        lines.addAll(cppComments.keySet());
        lines.addAll(cComments.keySet());

        final Iterator linesIter = lines.iterator();
        while (linesIter.hasNext()) {
            final Integer lineNo = (Integer) linesIter.next();
            // I don't want handle several comments on one line :(
            // Perhaps I'm wrong :)
            if (cppComments.containsKey(lineNo)
                && cComments.containsKey(lineNo)
                || cComments.containsKey(lineNo)
                && ((List) cComments.get(lineNo)).size() > 1)
            {
                log(lineNo.intValue(), "Too many comments.");
                continue;
            }

            final String line = getLines()[lineNo.intValue() - 1];
            String lineBefore = "";
            String lineAfter = "";
            if (cppComments.containsKey(lineNo)) {
                final TextBlock comment = (TextBlock) cppComments.get(lineNo);
                lineBefore = line.substring(0, comment.getStartColNo());
            }
            else if (cComments.containsKey(lineNo)) {
                final List commentList = (List) cComments.get(lineNo);
                final TextBlock comment =
                    (TextBlock) commentList.iterator().next();
                lineBefore = line.substring(0, comment.getStartColNo());
                if (comment.getText().length == 1) {
                    lineAfter = line.substring(comment.getEndColNo() + 1);
                }
            }
            lineAfter = lineAfter.trim();
            if (!blankLinePattern.match(lineBefore) || !"".equals(lineAfter)) {
                log(lineNo.intValue(), "trailing.comments");
            }
        }
    }

