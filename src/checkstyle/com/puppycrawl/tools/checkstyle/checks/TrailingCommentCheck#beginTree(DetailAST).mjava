    /** {@inheritDoc} */
    public void beginTree(DetailAST aRootAST)
    {
        final Pattern blankLinePattern = getRegexp();
        final Map cppComments = getFileContents().getCppComments();
        final Map cComments = getFileContents().getCComments();
        final Set lines = new HashSet();
        lines.addAll(cppComments.keySet());
        lines.addAll(cComments.keySet());

        final Iterator linesIter = lines.iterator();
        while (linesIter.hasNext()) {
            final Integer lineNo = (Integer) linesIter.next();

            final String line = getLines()[lineNo.intValue() - 1];
            String lineBefore = "";
            TextBlock comment = null;
            if (cppComments.containsKey(lineNo)) {
                comment = (TextBlock) cppComments.get(lineNo);
                lineBefore = line.substring(0, comment.getStartColNo());
            }
            else if (cComments.containsKey(lineNo)) {
                final List commentList = (List) cComments.get(lineNo);
                comment = (TextBlock) commentList.get(commentList.size() - 1);
                lineBefore = line.substring(0, comment.getStartColNo());
                if (comment.getText().length == 1) {
                    final String lineAfter =
                        line.substring(comment.getEndColNo() + 1).trim();
                    if (!"".equals(lineAfter)) {
                        // do not check comment which doesn't end line
                        continue;
                    }
                }
            }
            if ((comment != null)
                && !blankLinePattern.matcher(lineBefore).find()
                && !isLegalComment(comment))
            {
                log(lineNo.intValue(), "trailing.comments");
            }
        }
    }

