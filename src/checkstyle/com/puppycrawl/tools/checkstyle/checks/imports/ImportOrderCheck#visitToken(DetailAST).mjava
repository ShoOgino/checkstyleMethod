    @Override
    public void visitToken(DetailAST aAST)
    {
        final FullIdent ident;
        final boolean isStatic;

        if (aAST.getType() == TokenTypes.IMPORT) {
            ident = FullIdent.createFullIdentBelow(aAST);
            isStatic = false;
        }
        else {
            ident = FullIdent.createFullIdent((DetailAST) aAST.getFirstChild()
                    .getNextSibling());
            isStatic = true;
        }

        switch (getAbstractOption()) {
        case TOP:
            if (!isStatic && mLastImportStatic) {
                mLastGroup = Integer.MIN_VALUE;
                mLastImport = "";
            }
            // no break;

        case ABOVE:
            // previous non-static but current is static
            doVisitToken(ident, isStatic, (!mLastImportStatic && isStatic));
            break;

        case INFLOW:
            // previous argument is useless here
            doVisitToken(ident, isStatic, true);
            break;

        case BOTTOM:
            if (isStatic && !mLastImportStatic) {
                mLastGroup = Integer.MIN_VALUE;
                mLastImport = "";
            }
            // no break;

        case UNDER:
            // previous static but current is non-static
            doVisitToken(ident, isStatic, (mLastImportStatic && !isStatic));
            break;

        default:
            break;
        }

        mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();
        mLastImportStatic = isStatic;
        mBeforeFirstImport = false;
    }

