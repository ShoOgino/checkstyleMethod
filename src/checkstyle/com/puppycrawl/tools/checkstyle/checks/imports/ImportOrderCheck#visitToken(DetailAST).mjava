    /** {@inheritDoc} */
    @Override
    public void visitToken(DetailAST aAST)
    {
        final FullIdent ident;
        boolean isStatic;
        if (aAST.getType() == TokenTypes.IMPORT) {
            ident = FullIdent.createFullIdentBelow(aAST);
            isStatic = false;
        }
        else {
            ident = FullIdent.createFullIdent(
                (DetailAST) aAST.getFirstChild().getNextSibling());
            isStatic = true;
        }

        if (ident != null) {
            final String name = ident.getText();
            final int groupIdx = getGroupNumber(name);
            final int line = ident.getLineNo();

            if (groupIdx > mLastGroup) {
                if (!mBeforeFirstImport && mSeparated) {
                    // This check should be made more robust to handle
                    // comments and imports that span more than one line.
                    if (line - mLastImportLine < 2) {
                        log(line, "import.separation", name);
                    }
                }
            }
            else if (groupIdx == mLastGroup) {
                if (mOrdered) {
                    boolean shouldFireError = false;
                    if (mCaseSensitive) {
                        shouldFireError =
                            //current and previous static or current and
                            //previous non-static
                            (!(mLastImportStatic ^ isStatic)
                            &&
                            //and out of lexicographic order
                            (mLastImport.compareTo(name) >= 0))
                            ||
                            //previous static but current is non-static
                            (mLastImportStatic && !isStatic);
                    }
                    else {
                        shouldFireError =
                                //current and previous static or current and
                                //previous non-static
                                (!(mLastImportStatic ^ isStatic)
                                &&
                                //and out of lexicographic order
                                (mLastImport.compareToIgnoreCase(name) >= 0))
                                ||
                                //previous static but current is non-static
                                (mLastImportStatic && !isStatic);
                    }
                    if (shouldFireError) {
                        log(line, "import.ordering", name);
                    }
                }
            }
            else {
                log(line, "import.ordering", name);
            }

            mLastGroup = groupIdx;
            mLastImport = name;
            mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();
            mLastImportStatic = isStatic;
            mBeforeFirstImport = false;
        }
    }

