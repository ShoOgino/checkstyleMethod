    /**
     * Checks a set of tags for matching throws.
     * @param aTags the tags to check
     * @param aThrows the throws to check
     **/
    private void checkThrowsTags(List aTags, List aThrows)
    {
        // Loop over the tags, checking to see they exist in the throws.
        final Set foundThrows = new HashSet(); //used for performance only
        final ListIterator tagIt = aTags.listIterator();
        while (tagIt.hasNext()) {
            final JavadocTag tag = (JavadocTag) tagIt.next();

            if (!tag.isThrowsTag()) {
                continue;
            }

            tagIt.remove();

            // Loop looking for matching throw
            final String documentedEx = tag.getArg1();
            boolean found = foundThrows.contains(documentedEx);
            Class documentedClass = null;
            boolean classLoaded = false;

            final ListIterator throwIt = aThrows.listIterator();
            while (!found && throwIt.hasNext()) {
                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                final FullIdent fi = ei.getName();
                final String declaredEx = fi.getText();
                if (isSameType(declaredEx, documentedEx)) {
                    found = true;
                    ei.setFound();
                    foundThrows.add(documentedEx);
                }
                else if (mAllowThrowsTagsForSubclasses) {
                    if (!classLoaded) {
                        documentedClass = loadClassForTag(tag);
                        classLoaded = true;
                    }
                    found = isSubclass(documentedClass, ei.getClazz());
                }
            }

            // Handle extra JavadocTag.
            if (!found) {
                boolean reqd = true;
                if (mAllowUndeclaredRTE) {
                    if (!classLoaded) {
                        documentedClass = loadClassForTag(tag);
                        classLoaded = true;
                    }
                    reqd = !isUnchecked(documentedClass);
                }

                if (reqd) {
                    log(tag.getLineNo(), "javadoc.unusedTag",
                                  "@throws", tag.getArg1());
                }
            }
        }

        // Now dump out all throws without tags :- unless
        // the user has chosen to suppress these problems
        if (!mAllowMissingThrowsTags) {
            final ListIterator throwIt = aThrows.listIterator();
            while (throwIt.hasNext()) {
                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();
                if (!ei.isFound()) {
                    final FullIdent fi = ei.getName();
                    log(fi.getLineNo(), fi.getColumnNo(),
                        "javadoc.expectedTag", "@throws", fi.getText());
                }
            }
        }
    }

