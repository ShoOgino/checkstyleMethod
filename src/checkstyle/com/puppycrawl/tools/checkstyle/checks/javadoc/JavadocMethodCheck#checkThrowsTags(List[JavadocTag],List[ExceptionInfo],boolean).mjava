    /**
     * Checks a set of tags for matching throws.
     *
     * @param aTags the tags to check
     * @param aThrows the throws to check
     * @param aReportExpectedTags whether we should report if do not find
     *            expected tag
     */
    private void checkThrowsTags(List<JavadocTag> aTags,
            List<ExceptionInfo> aThrows, boolean aReportExpectedTags)
    {
        // Loop over the tags, checking to see they exist in the throws.
        // The foundThrows used for performance only
        final Set<String> foundThrows = new HashSet<String>();
        final ListIterator<JavadocTag> tagIt = aTags.listIterator();
        while (tagIt.hasNext()) {
            final JavadocTag tag = tagIt.next();

            if (!tag.isThrowsTag()) {
                continue;
            }

            tagIt.remove();

            // Loop looking for matching throw
            final String documentedEx = tag.getArg1();
            final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag
                    .getColumnNo());
            final ClassInfo documentedCI = createClassInfo(token,
                    getCurrentClassName());
            boolean found = foundThrows.contains(documentedEx);

            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();
            while (!found && throwIt.hasNext()) {
                final ExceptionInfo ei = throwIt.next();

                if (documentedCI.getClazz() == ei.getClazz()) {
                    found = true;
                    ei.setFound();
                    foundThrows.add(documentedEx);
                }
                else if (mAllowThrowsTagsForSubclasses) {
                    found = isSubclass(documentedCI.getClazz(), ei.getClazz());
                }
            }

            // Handle extra JavadocTag.
            if (!found) {
                boolean reqd = true;
                if (mAllowUndeclaredRTE) {
                    reqd = !isUnchecked(documentedCI.getClazz());
                }

                if (reqd) {
                    log(tag.getLineNo(), tag.getColumnNo(),
                            "javadoc.unusedTag", "@throws", tag.getArg1());

                }
            }
        }

        // Now dump out all throws without tags :- unless
        // the user has chosen to suppress these problems
        if (!mAllowMissingThrowsTags && aReportExpectedTags) {
            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();
            while (throwIt.hasNext()) {
                final ExceptionInfo ei = throwIt.next();
                if (!ei.isFound()) {
                    final Token fi = ei.getName();
                    log(fi.getLineNo(), fi.getColumnNo(),
                            "javadoc.expectedTag", "@throws", fi.getText());
                }
            }
        }
    }

