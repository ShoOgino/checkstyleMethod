    /**
     * Returns is a method has the "@Override" annotation.
     * @param aAST the AST to check with
     * @return whether the AST represents a method that has the annotation.
     */
    private boolean isOverrideMethod(DetailAST aAST)
    {
        // Need it to be a method, cannot have an override on anything else.
        // Must also have MODIFIERS token to hold the @Override
        if ((TokenTypes.METHOD_DEF != aAST.getType())
            || (TokenTypes.MODIFIERS != aAST.getFirstChild().getType()))
        {
            return false;
        }

        // Now loop over all nodes while they are annotations looking for
        // an "@Override".
        DetailAST node = aAST.getFirstChild().getFirstChild();
        while ((null != node) && (TokenTypes.ANNOTATION == node.getType())) {
            if ((node.getFirstChild().getType() == TokenTypes.AT)
                && (node.getFirstChild().getNextSibling().getType()
                    == TokenTypes.IDENT)
                && ("Override".equals(
                        node.getFirstChild().getNextSibling().getText())))
            {
                return true;
            }
            node = node.getNextSibling();
        }
        return false;
    }

