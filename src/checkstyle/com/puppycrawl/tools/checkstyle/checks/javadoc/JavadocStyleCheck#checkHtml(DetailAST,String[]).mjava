    /**
     * Checks the comment for HTML tags that do not have a corresponding close
     * tag or a close tage that has no previous open tag.  This code was
     * primarily copied from the DocCheck checkHtml method.
     *
     * @param aAST (Abstract Syntax Tree) the token to process.
     * @param aComment the source lines that make up the Javadoc comment.
     */
    private void checkHtml(DetailAST aAST, String[] aComment)
    {
        final int lineno = aAST.getLineNo() - aComment.length;
        final Stack htmlStack = new Stack();

        for (int i = 0; i < aComment.length; i++) {
            TagParser parser = null;
            try {
                // Can throw NoSuchElementException when tokenizing encounters
                // "<" at end of aComment[i].
                parser = new TagParser(aComment[i], lineno + i);
            }
            catch (NoSuchElementException e) {
                log(
                    lineno + i,
                    "javadoc.incompleteTag",
                    new Object[] {aComment[i]});
                return;
            }
            while (parser.hasNextTag()) {
                final HtmlTag tag = parser.nextTag();

                if (!tag.isCloseTag()) {
                    htmlStack.push(tag);
                }
                else {
                    // We have found a close tag.
                    if (isExtraHtml(tag.getId(), htmlStack)) {
                        // No corresponding open tag was found on the stack.
                        log(tag.getLineno(),
                            tag.getPosition(),
                            EXTRA_HTML,
                            tag);
                    }
                    else {
                        // See if there are any unclosed tags that were opened
                        // after this one.
                        checkUnclosedTags(htmlStack, tag.getId());
                    }
                }
            }
        }

        // Identify any tags left on the stack.
        String lastFound = ""; // Skip multiples, like <b>...<b>
        for (int i = 0; i < htmlStack.size(); i++) {
            final HtmlTag htag = (HtmlTag) htmlStack.elementAt(i);
            if (!isSingleTag(htag) && !htag.getId().equals(lastFound)) {
                log(htag.getLineno(), htag.getPosition(), UNCLOSED_HTML, htag);
                lastFound = htag.getId();
            }
        }
    }

