    /**
     * Checks the Javadoc for a method.
     *
     * @param aAST the token for the method
     * @param aComment the Javadoc comment
     * @param aScope the scope of the method.
     */
    private void checkComment(DetailAST aAST, TextBlock aComment, Scope aScope)
    {
        final List<JavadocTag> tags = getMethodTags(aComment);

        if (hasShortCircuitTag(aAST, tags, aScope)) {
            return;
        }

        Iterator<JavadocTag> it = tags.iterator();
        if (aAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {
            // Check for inheritDoc
            boolean hasInheritDocTag = false;
            while (it.hasNext() && !hasInheritDocTag) {
                hasInheritDocTag |= (it.next()).isInheritDocTag();
            }

            checkParamTags(tags, aAST, !hasInheritDocTag);
            checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);
            if (isFunction(aAST)) {
                checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);
            }
        }

        // Dump out all unused tags
        it = tags.iterator();
        while (it.hasNext()) {
            final JavadocTag jt = it.next();
            if (!jt.isSeeOrInheritDocTag()) {
                log(jt.getLineNo(), "javadoc.unusedTagGeneral");
            }
        }
    }

