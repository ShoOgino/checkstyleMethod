    /**
     * Should we check member with given modifiers.
     * @param aModifiers modifiers of member to check.
     * @return true if we should check such member.
     */
    private boolean shouldCheckInScope(DetailAST aModifiers)
    {
        if (aModifiers == null) {
            // if there are no modifaiers it is a package-private
            return mApplyToPackage;
        }

        final boolean isPublic =
            aModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);
        final boolean isProtected =
            aModifiers.branchContains(TokenTypes.LITERAL_PROTECTED);
        final boolean isPrivate =
            aModifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
        final boolean isPackage = !(isPublic || isProtected || isPrivate);

        return mApplyToPublic && isPublic || mApplyToProtected && isProtected
            || mApplyToPackage && isPackage || mApplyToPrivate && isPrivate;
    }

