    /**
     * Attempts to resolve the Class for a specified name. The algorithm is
     * to check:
     * - fully qualified name
     * - explicit imports
     * - enclosing package
     * - star imports
     * @param aName name of the class to resolve
     * @return the resolved class
     * @throws ClassNotFoundException if unable to resolve the class
     */
    Class resolve(String aName) throws ClassNotFoundException
    {
        // See if the class is full qualified
        if (isLoadable(aName)) {
            return safeLoad(aName);
        }

        // try matching explicit imports
        Iterator it = mImports.iterator();
        while (it.hasNext()) {
            final String imp = (String) it.next();
            if (imp.endsWith(aName) && isLoadable(imp)) {
                return safeLoad(imp);
            }
        }

        // See if in the package
        if (mPkg != null) {
            final String fqn = mPkg + "." + aName;
            if (isLoadable(fqn)) {
                return safeLoad(fqn);
            }
        }

        // try "java.lang."
        final String langClass = "java.lang." + aName;
        if (isLoadable(langClass)) {
            return safeLoad(langClass);
        }

        // try star imports
        it = mImports.iterator();
        while (it.hasNext()) {
            final String imp = (String) it.next();
            if (imp.endsWith(".*")) {
                final String fqn = imp.substring(0, imp.lastIndexOf('.') + 1)
                    + aName;
                if (isLoadable(fqn)) {
                    return safeLoad(fqn);
                }
            }
        }

        // Giving up, the type is unknown, so load the class to generate an
        // exception
        return safeLoad(aName);
    }

