    /**
     * Finds matches that are not inside comments.
     * @param aLine The text that should be matched.
     * @param aLineNumber The current line number.
     * @param aStartPosition The position to start searching from.
     * @return true if a match is done where there is no comment.
     */
    private boolean findNonCommentMatch(
            String aLine, int aLineNumber, int aStartPosition)
    {
        final Pattern pattern = getRegexp();
        final Matcher matcher = pattern.matcher(aLine);
        final boolean foundMatch = matcher.find(aStartPosition);
        if (!foundMatch) {
            return false;
        }
        // match is found, check for intersection with comment
        final int startCol = matcher.start(0);
        final int endCol = matcher.end(0);
        // Note that Matcher.end(int) returns he offset AFTER the
        // last matched character, but hasIntersectionWithComment()
        // needs column number of the last character.
        // So we need to use (endCol - 1) here.
        final boolean intersectsWithComment = getFileContents()
            .hasIntersectionWithComment(aLineNumber, startCol,
                                        aLineNumber, endCol - 1);
        if (intersectsWithComment) {
            if (endCol < aLine.length()) {
                // check if the expression is on the rest of the line
                return findNonCommentMatch(aLine, aLineNumber, endCol);
            }
            // end of line reached
            return false;
        }
        // not intersecting with comment
        return true;
    }

