  /**
   * gets the package represented by the tree.  The method
   * analyzes the tree, constructs an appropriate package name
   * and fetches it from the internal package list. If the package does not
   * exist it is created.
   *
   * @param tree <code>SymTabAST</code> to consider
   *
   * @return <code>PackageDef</code> the resulting package definition
   * @see #getPackage(Scope, SymTabAST)
   */
  private PackageDef createPackage( SymTabAST tree ) {
    PackageDef result = null;

    if (tree.getType() == TokenTypes.DOT) {
      // find the package result of left child
      SymTabAST leftChild = (SymTabAST)tree.getFirstChild();
      SymTabAST rightChild = (SymTabAST)leftChild.getNextSibling();

      PackageDef context = createPackage(leftChild);
      result = getPackage( context, rightChild );
    }
    else {
      result = getPackage(symbolTable.getBaseScope(), tree);
    }

    return result;
  }

