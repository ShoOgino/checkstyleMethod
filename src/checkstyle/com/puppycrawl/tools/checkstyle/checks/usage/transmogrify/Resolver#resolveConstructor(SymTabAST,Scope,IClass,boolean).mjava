    /**
     * Resolves a constructor call.
     *
     * @param tree the root node of the constructor call
     * @return the <code>ClassDef</code> for the class instantiated by the
     *         constructor
     */
    private IClass resolveConstructor(
        SymTabAST constructor,
        Scope location,
        IClass context,
        boolean referencePhase) {

        IClass classConstructed = null;

        SymTabAST nameNode = (SymTabAST) (constructor.getFirstChild());
        //SymTabAST parametersNode = (SymTabAST) (nameNode.getNextSibling());
        SymTabAST parametersNode =
            (SymTabAST) constructor.findFirstToken(TokenTypes.ELIST);
        SymTabAST nameIdent = null;
        if (nameNode.getType() == TokenTypes.IDENT) {
            nameIdent = nameNode;
        }
        else {
            nameIdent = (SymTabAST) nameNode.getFirstChild().getNextSibling();
        }

        classConstructed = resolveClass(nameNode, location, context, false);
        if (classConstructed != null) {
            MethodSignature signature =
                resolveParameters(
                    parametersNode,
                    location,
                    context,
                    referencePhase);

            IMethod constructorDef =
                classConstructed.getMethodDefinition(
                    nameIdent.getText(),
                    signature);

            if (constructorDef != null && referencePhase) {
                nameIdent.setDefinition(
                    constructorDef,
                    location,
                    referencePhase);
            }
        }

        return classConstructed;
    }

