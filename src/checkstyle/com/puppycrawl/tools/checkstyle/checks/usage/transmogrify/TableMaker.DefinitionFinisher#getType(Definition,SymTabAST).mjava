    /**
     * gets the classDef that represents the type of the given definition
     *
     *
     * @param def the definition whose type to find
     * @param typeNode the TokenTypes.TYPE node associated with the def
     *
     * @return the resulting class definition
     */
    protected IClass getType( Definition def, SymTabAST typeNode ) {
      IClass result = null;

      SymTabAST typeClassNode = null;
      boolean isArray = false;

      if ( typeNode.getFirstChild().getType()
           == TokenTypes.ARRAY_DECLARATOR ) {
        isArray = true;
        typeClassNode = (SymTabAST)typeNode.getFirstChild().getFirstChild();
      }
      else {
        typeClassNode = (SymTabAST)typeNode.getFirstChild();
      }

      Scope lookupScope = null;

      if (def instanceof Scope) {
         lookupScope = (Scope)def;
      }
      else {
         lookupScope = def.getParentScope();
      }

      Resolver resolver = new Resolver(symbolTable);
      IClass typeClass = resolver.resolveClass(typeClassNode, lookupScope, null, false);

      if ( isArray ) {
        result = new ArrayDef( typeClass );
      }
      else {
        result = typeClass;
      }

      return result;
    }

