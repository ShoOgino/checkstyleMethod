  /**
   * Whether this method signature is compatible with the signature of the
   * argument.  That is to say, each type for this signature are subclasses,
   * subinterfaces, or implement the interface for each corresponding type
   * in the argument signature.
   *
   * @param signature the signature of the method definition being compared
   * @return whether the signatures are compatible
   */
  public boolean isCompatibleWith(ISignature signature) {
    boolean result = true;

    IClass[] comparedArgTypes = signature.getParameters();
    if (_argTypes.length != comparedArgTypes.length) {
      result = false;
    }
    else {
      for (int i = 0; i < _argTypes.length; i++) {
        // TODO: Checkstyle modification. Why can _argTypes[i] be null?
        // if (!_argTypes[i].isCompatibleWith(comparedArgTypes[i])) {
        if ((_argTypes[i] != null)
            && !_argTypes[i].isCompatibleWith(comparedArgTypes[i]))
        {
          result = false;
          break;
        }
      }
    }

    return result;
  }

