    /**
     * Check the counters and report violations.
     * @param aAst
     *            The type-subtree of the AST(used to extract the line-number
     *            for the error-message.
     */
    private void checkCounters(DetailAST aAst)
    {
        final MethodCounter actualCounter = mCounters.peek();
        if (mCheckDefaultMethods) {
            if (actualCounter.value(Scope.PACKAGE) > mMax) {
                log(aAst.getLineNo(), "too.many.defaultMethods",
                    actualCounter.value(Scope.PACKAGE), mMax);
            }
        }
        if (mCheckPrivateMethods) {
            if (actualCounter.value(Scope.PRIVATE) > mMax) {
                log(aAst.getLineNo(), "too.many.privateMethods",
                    actualCounter.value(Scope.PRIVATE), mMax);
            }
        }
        if (mCheckProtectedMethods) {
            if (actualCounter.value(Scope.PROTECTED) > mMax) {
                log(aAst.getLineNo(), "too.many.protectedMethods",
                    actualCounter.value(Scope.PROTECTED), mMax);
            }
        }
        if (mCheckPublicMethods) {
            if (actualCounter.value(Scope.PUBLIC) > mMax) {
                log(aAst.getLineNo(), "too.many.publicMethods",
                    actualCounter.value(Scope.PUBLIC), mMax);
            }
        }
    }

