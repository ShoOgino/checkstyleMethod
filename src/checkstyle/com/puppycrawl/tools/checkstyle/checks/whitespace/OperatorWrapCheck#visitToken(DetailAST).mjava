    /** {@inheritDoc} */
    public void visitToken(DetailAST aAST)
    {
        if (aAST.getType() == TokenTypes.COLON) {
            DetailAST parent = aAST.getParent();
            if ((parent.getType() == TokenTypes.LITERAL_DEFAULT)
                || (parent.getType() == TokenTypes.LITERAL_CASE))
            {
                //we do not want to check colon for cases and defaults
                return;
            }
        }
        final AbstractOption wOp = getAbstractOption();

        final String text = aAST.getText();
        final int colNo = aAST.getColumnNo();
        final int lineNo = aAST.getLineNo();
        final String currentLine = getLines()[lineNo - 1];

        // TODO: Handle comments before and after operator
        // Check if rest of line is whitespace, and not just the operator
        // by itself. This last bit is to handle the operator on a line by
        // itself.
        if ((wOp == OperatorWrapOption.NL)
            && !text.equals(currentLine.trim())
            && (currentLine.substring(colNo + text.length())
                .trim().length() == 0))
        {
            log(lineNo, colNo, "line.new", text);
        }
        else if ((wOp == OperatorWrapOption.EOL)
                  && Utils.whitespaceBefore(colNo - 1, currentLine))
        {
            log(lineNo, colNo, "line.previous", text);
        }
    }

