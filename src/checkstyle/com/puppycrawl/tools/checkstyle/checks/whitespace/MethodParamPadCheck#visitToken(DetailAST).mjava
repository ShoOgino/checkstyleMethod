    @Override
    public void visitToken(DetailAST aAST)
    {
        final DetailAST parenAST;
        if ((aAST.getType() == TokenTypes.METHOD_CALL)) {
            parenAST = aAST;
        }
        else {
            parenAST = aAST.findFirstToken(TokenTypes.LPAREN);
            // array construction => parenAST == null
            if (parenAST == null) {
                return;
            }
        }

        final String line = getLines()[parenAST.getLineNo() - 1];
        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {
            if (!mAllowLineBreaks) {
                log(parenAST, "line.previous", parenAST.getText());
            }
        }
        else {
            final int before = parenAST.getColumnNo() - 1;
            if ((PadOption.NOSPACE == getAbstractOption())
                && (Character.isWhitespace(line.charAt(before))))
            {
                log(parenAST , "ws.preceded", parenAST.getText());
            }
            else if ((PadOption.SPACE == getAbstractOption())
                     && !Character.isWhitespace(line.charAt(before)))
            {
                log(parenAST, "ws.notPreceded", parenAST.getText());
            }
        }
    }

