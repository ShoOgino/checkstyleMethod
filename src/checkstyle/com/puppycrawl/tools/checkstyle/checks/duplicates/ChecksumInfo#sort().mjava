    /**
     * Sorts the {@link #mSortedChecksums} field and simultaneously
     * maintains the {@link mOrigIdx} mapping. The maintainance of the
     * reverse mapping is the reason why we don't simply use Arrays.sort() here.
     */
    private void sort()
    {
        // abbreviation for longish field name
        final int[] arr = mSortedChecksums;
        final int len = arr.length;

        // bubblesort will do for now. It's important that the algorithm
        // is stable, i.e. it doesn't swap equal values
        for (int i = 0; i < len; i++) {
            for (int j = i; j > 0 && arr[j] < arr[j - 1]; j--) {
                final int k = j - 1;
                // swap j and k and maintain mOrigIdx
                final int v = arr[j];
                arr[j] = arr[k];
                arr[k] = v;
                final int z = mOrigIdx[j];
                mOrigIdx[j] = mOrigIdx[k];
                mOrigIdx[k] = z;
            }
        }
    }

