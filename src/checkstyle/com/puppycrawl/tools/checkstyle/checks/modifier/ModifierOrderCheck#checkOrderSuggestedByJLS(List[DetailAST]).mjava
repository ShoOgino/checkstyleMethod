    /**
     * Checks if the modifiers were added in the order suggested
     * in the Java language specification.
     *
     * @param aModifiers list of modifier AST tokens
     * @return null if the order is correct, otherwise returns the offending
     * *       modifier AST.
     */
    DetailAST checkOrderSuggestedByJLS(List<DetailAST> aModifiers)
    {
        int i = 0;
        DetailAST modifier;
        final Iterator<DetailAST> it = aModifiers.iterator();
        //No modifiers, no problems
        if (!it.hasNext()) {
            return null;
        }

        //Speed past all initial annotations
        do {
            modifier = it.next();
        }
        while (it.hasNext() && (modifier.getType() == TokenTypes.ANNOTATION));

        //All modifiers are annotations, no problem
        if (modifier.getType() == TokenTypes.ANNOTATION) {
            return null;
        }

        while (i < JLS_ORDER.length) {
            if (modifier.getType() == TokenTypes.ANNOTATION) {
                //Annotation not at start of modifiers, bad
                return modifier;
            }

            while ((i < JLS_ORDER.length)
                   && !JLS_ORDER[i].equals(modifier.getText()))
            {
                i++;
            }

            if (i == JLS_ORDER.length) {
                //Current modifier is out of JLS order
                return modifier;
            }
            else if (!it.hasNext()) {
                //Reached end of modifiers without problem
                return null;
            }
            else {
                modifier = it.next();
            }
        }

        return modifier;
    }

