    /**
     * Check a line for matches.
     * @param aLineno the line number of the line to check
     * @param aLine the line to check
     * @param aMatcher the matcher to use
     * @param aStartPosition the position to start searching from.
     */
    private void checkLine(int aLineno, String aLine, Matcher aMatcher,
            int aStartPosition)
    {
        final boolean foundMatch = aMatcher.find(aStartPosition);
        if (!foundMatch) {
            return;
        }

        // match is found, check for intersection with comment
        final int startCol = aMatcher.start(0);
        final int endCol = aMatcher.end(0);
        // Note that Matcher.end(int) returns the offset AFTER the
        // last matched character, but shouldSuppress()
        // needs column number of the last character.
        // So we need to use (endCol - 1) here.
        if (mOptions.getSuppressor()
                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))
        {
            if (endCol < aLine.length()) {
                // check if the expression is on the rest of the line
                checkLine(aLineno, aLine, aMatcher, endCol);
            }
            return; // end processing here
        }

        mCurrentMatches++;
        if (mCurrentMatches > mOptions.getMaximum()) {
            if ("".equals(mOptions.getMessage())) {
                mOptions.getReporter().log(aLineno, "regexp.exceeded",
                        aMatcher.pattern().toString());
            }
            else {
                mOptions.getReporter().log(aLineno, mOptions.getMessage());
            }
        }
    }

