    /** @see com.puppycrawl.tools.checkstyle.api.Check */
    public int[] getDefaultTokens()
    {
        return new int[] {
            TokenTypes.RCURLY,            // '}'
            TokenTypes.QUESTION,          // '?'
            TokenTypes.COLON,             // ':' TODO: dont flag after "case"
            TokenTypes.ASSIGN,            // '='
            TokenTypes.EQUAL,             // "=="
            TokenTypes.NOT_EQUAL,         // "!="
            TokenTypes.DIV,               // '/'
            TokenTypes.DIV_ASSIGN,        // "/="
            TokenTypes.PLUS,              //' +' (unaray plus is UNARY_PLUS)
            TokenTypes.PLUS_ASSIGN,       // "+="
            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)
            TokenTypes.MINUS_ASSIGN,      //"-="
            TokenTypes.STAR,              // '*'
            TokenTypes.STAR_ASSIGN,       // "*="
            TokenTypes.MOD,               // '%'
            TokenTypes.MOD_ASSIGN,        // "%="
            TokenTypes.SR,                // ">>"
            TokenTypes.SR_ASSIGN,         // ">>="
            TokenTypes.BSR,               // ">>>"
            TokenTypes.BSR_ASSIGN,        // ">>>="
            TokenTypes.GE,                // ">="
            TokenTypes.GT,                // ">"
            TokenTypes.SL,                // "<<"
            TokenTypes.SL_ASSIGN,         // "<<="
            TokenTypes.LE,                // "<="
            TokenTypes.LT,                // '<'
            TokenTypes.BXOR,              // '^'
            TokenTypes.BXOR_ASSIGN,       // "^="
            TokenTypes.BOR,               // '|'
            TokenTypes.BOR_ASSIGN,        // "|="
            TokenTypes.LOR,               // "||"
            TokenTypes.BAND,              // '&'
            TokenTypes.BAND_ASSIGN,       // "&="
            TokenTypes.LAND,              // "&&"
            TokenTypes.LITERAL_CATCH,
            TokenTypes.LITERAL_DO,
            TokenTypes.LITERAL_ELSE,
            TokenTypes.LITERAL_FINALLY,
            TokenTypes.LITERAL_FOR,
            TokenTypes.LITERAL_IF,
            TokenTypes.LITERAL_RETURN,
            TokenTypes.LITERAL_SYNCHRONIZED,
            TokenTypes.LITERAL_TRY,
            TokenTypes.LITERAL_WHILE,
            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?
                                  // maybe it's a bug in the grammar?
        };
    }

