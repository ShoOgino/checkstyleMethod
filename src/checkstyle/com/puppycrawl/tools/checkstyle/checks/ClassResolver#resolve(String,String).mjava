    /**
     * Attempts to resolve the Class for a specified name. The algorithm is
     * to check:
     * - fully qualified name
     * - explicit imports
     * - enclosing package
     * - star imports
     * @param aName name of the class to resolve
     * @param aCurrentClass name of current class (for inner classes).
     * @return the resolved class
     * @throws ClassNotFoundException if unable to resolve the class
     */
    public Class<?> resolve(String aName, String aCurrentClass)
        throws ClassNotFoundException
    {
        // See if the class is full qualified
        Class<?> clazz = resolveQualifiedName(aName);
        if (clazz != null) {
            return clazz;
        }

        // try matching explicit imports
        Iterator<String> it = mImports.iterator();
        while (it.hasNext()) {
            final String imp = it.next();
            // Very important to add the "." in the check below. Otherwise you
            // when checking for "DataException", it will match on
            // "SecurityDataException". This has been the cause of a very
            // difficult bug to resolve!
            if (imp.endsWith("." + aName)) {
                clazz = resolveQualifiedName(imp);
                if (clazz != null) {
                    return clazz;
                }

            }
        }

        // See if in the package
        if (!"".equals(mPkg)) {
            clazz = resolveQualifiedName(mPkg + "." + aName);
            if (clazz != null) {
                return clazz;
            }
        }

        //inner class of this class???
        if (!"".equals(aCurrentClass)) {
            final String innerClass = (!"".equals(mPkg) ? (mPkg + ".") : "")
                + aCurrentClass + "$" + aName;
            if (isLoadable(innerClass)) {
                return safeLoad(innerClass);
            }
        }

        // try star imports
        it = mImports.iterator();
        while (it.hasNext()) {
            final String imp = it.next();
            if (imp.endsWith(".*")) {
                final String fqn = imp.substring(0, imp.lastIndexOf('.') + 1)
                    + aName;
                clazz = resolveQualifiedName(fqn);
                if (clazz != null) {
                    return clazz;
                }
            }
        }

        // Giving up, the type is unknown, so load the class to generate an
        // exception
        return safeLoad(aName);
    }

