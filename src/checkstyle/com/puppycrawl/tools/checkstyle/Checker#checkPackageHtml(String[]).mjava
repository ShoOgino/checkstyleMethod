    /**
     * Checks for a package.html file for all java files in parameter list.
     * @param aFiles the filenames of the java files to check
     * @return the number of errors found
     */
    private int checkPackageHtml(String[] aFiles)
    {
        if (!mConfig.isRequirePackageHtml()) {
            return 0;
        }

        int packageHtmlErrors = 0;
        final HashSet checkedPackages = new HashSet();
        for (int i = 0; i < aFiles.length; i++) {
            final File file = new File(aFiles[i]);
            final File packageDir = file.getParentFile();
            if (!checkedPackages.contains(packageDir)) {
                final File packageDoc =
                    new File(packageDir, "package.html");
                final String docFile = packageDoc.toString();
                fireFileStarted(docFile);
                if (!packageDoc.exists()) {
                    final LocalizedMessage error =
                        new LocalizedMessage(0, "javadoc.packageHtml", null, null);
                    fireErrors(docFile, new LocalizedMessage[]{error});
                    packageHtmlErrors++;
                }
                fireFileFinished(docFile);
                checkedPackages.add(packageDir);
            }
        }
        return packageHtmlErrors;
    }

