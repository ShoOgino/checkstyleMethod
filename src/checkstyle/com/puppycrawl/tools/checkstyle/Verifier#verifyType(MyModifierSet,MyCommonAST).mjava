    /**
     * Verify that a type conforms to the style.
     * @param aMods the set of modifiers for the type
     * @param aType the type details
     **/
    void verifyType(MyModifierSet aMods, MyCommonAST aType)
    {
        if (!mConfig.getTypeRegexp().match(aType.getText())) {
            log(aType.getLineNo(),
                aType.getColumnNo(),
                "type name '" + aType.getText() +
                "' must match pattern '" + mConfig.getTypePat() + "'.");
        }

        // Always check that the order of modifiers follows the JLS suggestion
        checkModOrder(aMods);

        //
        // Only Javadoc testing below
        //
        final Scope typeScope =
            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();

        if (!inCheckScope(typeScope)) {
            return; // no need to really check anything
        }

        final int lineNo = (aMods.size() > 0)
            ? aMods.getFirstLineNo()
            : aType.getLineNo();

        final String[] jd = getJavadocBefore(lineNo - 1);
        if (jd == null) {
            log(lineNo, "type is missing a Javadoc comment.");
        }
        else if (!mConfig.isAllowNoAuthor() &&
                 mInScope.size() == 0 && // don't check author for inner classes
                 (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))
        {
            log(lineNo, "type Javadoc comment is missing an @author tag.");
        }
    }

