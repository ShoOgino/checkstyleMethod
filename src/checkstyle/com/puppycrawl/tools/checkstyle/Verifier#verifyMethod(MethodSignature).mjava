    /**
     * Verify that a valid Javadoc comment exists for the method.
     * @param aSig the method signature
     **/
    void verifyMethod(MethodSignature aSig)
    {
        // no need to check constructor names
        if (!aSig.isConstructor() &&
            !mConfig.getMethodRegexp().match(aSig.getName()))
        {
            log(aSig.getLineNo(),
                "method name '" + aSig.getName() +
                "' must match pattern '" + mConfig.getMethodPat() + "'.");
        }

        // Always verify the parameters are ok
        for (Iterator it = aSig.getParams().iterator(); it.hasNext(); ) {
            checkParameter((LineText) it.next());
        }

        // Always check that the order of modifiers follows the JLS suggestion
        checkModOrder(aSig.getModSet());

        // now check the javadoc
        final Scope methodScope = inInterfaceBlock()
            ? Scope.PUBLIC
            : aSig.getModSet().getVisibilityScope();

        if (!inCheckScope(methodScope)) {
            return; // no need to really check anything
        }

        final String[] jd = getJavadocBefore(aSig.getLineNo() - 1);
        if (jd == null) {
            log(aSig.getLineNo(), "method is missing a Javadoc comment.");
        }
        else {
            final List tags = getMethodTags(jd, aSig.getLineNo() - 1);
            // Check for only one @see tag
            if ((tags.size() != 1) ||
                !((JavadocTag) tags.get(0)).isSeeTag())
            {
                checkParamTags(tags, aSig.getParams());
                checkThrowsTags(tags, aSig.getThrows());
                if (aSig.isFunction()) {
                    checkReturnTag(tags, aSig.getLineNo());
                }

                // Dump out all unused tags
                final Iterator it = tags.iterator();
                while (it.hasNext()) {
                    final JavadocTag jt = (JavadocTag) it.next();
                    if (!jt.isSeeTag()) {
                        log(jt.getLineNo(), "Unused Javadoc tag.");
                    }
                }
            }
        }
    }

