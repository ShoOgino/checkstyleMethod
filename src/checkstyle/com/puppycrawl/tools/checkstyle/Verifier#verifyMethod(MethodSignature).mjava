    /**
     * Verify that a valid Javadoc comment exists for the method.
     * @param aSig the method signature
     **/
    void verifyMethod(MethodSignature aSig)
    {
        // Check for to many parameters
        if (aSig.getParams().size() > mConfig.getMaxParameters()) {
            mMessages.add(aSig.getFirstLineNo(),
                          aSig.getFirstColNo(),
                          "maxParam", new Integer(mConfig.getMaxParameters()));
        }

        // now check the javadoc
        final Scope methodScope = inInterfaceBlock()
            ? Scope.PUBLIC
            : aSig.getModSet().getVisibilityScope();

        if (!inCheckScope(methodScope)) {
            return; // no need to really check anything
        }

        final String[] jd = getJavadocBefore(aSig.getFirstLineNo() - 1);
        if (jd == null) {
            mMessages.add(aSig.getFirstLineNo(),
                          aSig.getFirstColNo(),
                          "javadoc.missing");
        }
        else {
            final List tags = getMethodTags(jd, aSig.getFirstLineNo() - 1);
            // Check for only one @see tag
            if ((tags.size() != 1)
                || !((JavadocTag) tags.get(0)).isSeeTag())
            {
                checkParamTags(tags, aSig.getParams());
                checkThrowsTags(tags, aSig.getThrows());
                if (aSig.isFunction()) {
                    checkReturnTag(tags, aSig.getFirstLineNo());
                }

                // Dump out all unused tags
                final Iterator it = tags.iterator();
                while (it.hasNext()) {
                    final JavadocTag jt = (JavadocTag) it.next();
                    if (!jt.isSeeTag()) {
                        mMessages.add(jt.getLineNo(),
                                      "javadoc.unusedTagGeneral");
                    }
                }
            }
        }
    }

