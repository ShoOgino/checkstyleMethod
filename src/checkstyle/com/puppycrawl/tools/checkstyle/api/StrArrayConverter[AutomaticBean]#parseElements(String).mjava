    /**
     * <p>
     * Parse an incoming String of the form similar to an array initializer in
     * the Java language into a <code>List</code> individual Strings for each
     * element, according to the following rules.
     * </p>
     * <ul>
     * <li>The string must have matching '{' and '}' delimiters around a
     * comma-delimited list of values.</li>
     * <li>Whitespace before and after each element is stripped.
     * <li>If an element is itself delimited by matching single or double
     * quotes, the usual rules for interpreting a quoted String apply.</li>
     * </ul>
     * 
     * @param aValue
     *            String value to be parsed
     * @return the list of Strings parsed from the array
     * @throws NullPointerException
     *             if <code>svalue</code> is <code>null</code>
     */
    protected List parseElements(String aValue)
        throws NullPointerException
    {
        // Validate the passed argument
        if (aValue == null) {
            throw new NullPointerException();
        }

        // Trim any matching '{' and '}' delimiters
        aValue = aValue.trim();

        if (aValue.startsWith("{") && aValue.endsWith("}")) {
            aValue = aValue.substring(1, aValue.length() - 1);
        }

        final StringTokenizer st = new StringTokenizer(aValue, ",");
        final List retVal = new ArrayList();

        while (st.hasMoreTokens()) {
            final String token = st.nextToken();
            retVal.add(token.trim());
        }

        return retVal;
    }

