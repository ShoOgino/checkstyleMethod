    /**
     * Checks to see if the AST is annotated with
     * the passed in annotation and return the AST
     * representing that annotation.
     *
     * <p>
     * This method will not look for imports or package
     * statements to detect the passed in annotation.
     * </p>
     *
     * <p>
     * To check if an AST contains a passed in annotation
     * taking into account fully-qualified names
     * (ex: java.lang.Override, Override)
     * this method will need to be called twice. Once for each
     * name given.
     * </p>
     *
     * @param aAST the current node
     * @param aAnnotation the annotation name to check for
     * @return the AST representing that annotation
     * @throws NullPointerException if the aAST or
     * aAnnotation is null
     */
    public static DetailAST getAnnotation(final DetailAST aAST,
        String aAnnotation)
    {
        if (aAST == null) {
            throw new NullPointerException("the aAST is null");
        }

        if (aAnnotation == null) {
            throw new NullPointerException("the aAnnotation is null");
        }

        if (aAnnotation.trim().length() == 0) {
            throw new IllegalArgumentException("the aAnnotation"
                + "is empty or spaces");
        }

        final DetailAST holder = AnnotationUtility.getAnnotationHolder(aAST);

        for (DetailAST child = holder.getFirstChild();
            child != null; child = child.getNextSibling())
        {
            if (child.getType() == TokenTypes.ANNOTATION) {
                final DetailAST at = child.getFirstChild();
                final String aName =
                    FullIdent.createFullIdent(at.getNextSibling()).getText();
                if (aAnnotation.equals(aName)) {
                    return child;
                }
            }
        }

        return null;
    }

