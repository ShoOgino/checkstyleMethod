        /**
     * Replaces <code>${xxx}</code> style constructions in the given value 
     * with the string value of the corresponding data types.
     *
     * @param aValue The string to be scanned for property references.
     *              May be <code>null</code>, in which case this
     *              method returns immediately with no effect.
     * @param aProps  Mapping (String to String) of property names to their 
     *              values. Must not be <code>null</code>.
     * 
     * @throws CheckstyleException if the string contains an opening 
     *                           <code>${</code> without a closing 
     *                           <code>}</code>
     * @return the original string with the properties replaced, or
     *         <code>null</code> if the original string is <code>null</code>.
     * 
     * Code copied from ant - 
     * http://cvs.apache.org/viewcvs/jakarta-ant/src/main/org/apache/tools/ant/ProjectHelper.java
     */
     public static String replaceProperties(String aValue,  Properties aProps)
     throws CheckstyleException
     {
        if (aValue == null) {
            return null;
        }

        final Vector fragments = new Vector();
        final Vector propertyRefs = new Vector();
        parsePropertyString(aValue, fragments, propertyRefs);

        final StringBuffer sb = new StringBuffer();
        final Enumeration i = fragments.elements();
        final Enumeration j = propertyRefs.elements();
        while (i.hasMoreElements()) {
            String fragment = (String) i.nextElement();
            if (fragment == null) {
                final String propertyName = (String) j.nextElement();
                if (!aProps.containsKey(propertyName)) {
                    throw new CheckstyleException(
                        "Property ${" + propertyName + "} has not been set");
                }
                fragment = (aProps.containsKey(propertyName)) 
                    ? (String) aProps.get(propertyName) 
                    : "${" + propertyName + "}"; 
            }
            sb.append(fragment);
        }                        
        
        return sb.toString();
    }

