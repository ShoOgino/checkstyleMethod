    /**
     * Determines the set of files this FileSetCheck is interested in.
     * Returns the files that have one of the currently active file extensions.
     * If no file extensions are active the argument array is returned.
     *
     * <p>
     * This method can be used in the implementation of <code>process()</code>
     * to filter it's argument list for interesting files.
     * </p>
     *
     * @param aFiles the candidates for processing
     * @return the subset of aFiles that this FileSetCheck should process
     * @see FileSetCheck#process
     */
    protected final File[] filter(File[] aFiles)
    {
        if ((mFileExtensions == null) || (mFileExtensions.length == 0)) {
            return aFiles;
        }

        final ArrayList files = new ArrayList(aFiles.length);
        for (int i = 0; i < aFiles.length; i++) {
            final File f = aFiles[i];
            final String fileName = f.getName();
            for (int j = 0; j < mFileExtensions.length; j++) {
                final String fileExtension = mFileExtensions[j];
                if (fileName.endsWith(fileExtension)) {
                    files.add(f);
                }
            }
        }
        return (File[]) files.toArray(new File[files.size()]);
    }

