    /**
     * Creates a new <code>PropertyCacheFile</code> instance.
     *
     * @param aCurrentConfig the current configuration, not null
     * @param aFileName the cache file
     */
    PropertyCacheFile(Configuration aCurrentConfig, String aFileName)
    {
        boolean setInActive = true;
        if (aFileName != null) {
            FileInputStream inStream = null;
            // get the current config so if the file isn't found
            // the first time the hash will be added to output file
            final String currentConfigHash = getConfigHashCode(aCurrentConfig);
            try {
                inStream = new FileInputStream(aFileName);
                mDetails.load(inStream);
                final String cachedConfigHash =
                    mDetails.getProperty(CONFIG_HASH_KEY);
                setInActive = false;
                if ((cachedConfigHash == null)
                    || !cachedConfigHash.equals(currentConfigHash))
                {
                    // Detected configuration change - clear cache
                    mDetails.clear();
                    mDetails.put(CONFIG_HASH_KEY, currentConfigHash);
                }
            }
            catch (final FileNotFoundException e) {
                // Ignore, the cache does not exist
                setInActive = false;
                // put the hash in the file if the file is going to be created
                mDetails.put(CONFIG_HASH_KEY, currentConfigHash);
            }
            catch (final IOException e) {
                Utils.getExceptionLogger()
                    .debug("Unable to open cache file, ignoring.", e);
            }
            finally {
                Utils.closeQuietly(inStream);
            }
        }
        mDetailsFile = (setInActive) ? null : aFileName;
    }

