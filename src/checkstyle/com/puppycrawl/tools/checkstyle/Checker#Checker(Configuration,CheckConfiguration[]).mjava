    /**
     * Creates a new <code>Checker</code> instance.
     *
     * @param aConfig the configuration to use
     * @param aConfigs the configuation of the checks to use
     * @throws ClassNotFoundException if an error occurs
     * @throws InstantiationException if an error occurs
     * @throws IllegalAccessException if an error occurs
     * @throws InvocationTargetException if an error occurs
     * @throws NoSuchMethodException if an error occurs
     */
    public Checker(Configuration aConfig, CheckConfiguration[] aConfigs)
        throws ClassNotFoundException, InstantiationException,
               IllegalAccessException, InvocationTargetException,
               NoSuchMethodException
    {
        mConfig = aConfig;
        mCache = new PropertyCacheFile(aConfig);
        LocalizedMessage.setLocale(new Locale(mConfig.getLocaleLanguage(),
                                              mConfig.getLocaleCountry()));
        mMessages = new LocalizedMessages(mConfig.getTabWidth());
        mWalker = new TreeWalker(mMessages);
        // TODO: improve the error handing
        for (int i = 0; i < aConfigs.length; i++) {
            final CheckConfiguration config = aConfigs[i];
            mWalker.registerCheck(
                config.createInstance(mConfig.getClassLoader()), config);
        }
    }

