    /** @see Verifier **/
    public void verifyMethodJavadoc(MyModifierSet aMods,
                                    MyCommonAST aReturnType,
                                    MethodSignature aSig)
    {
        final Scope methodScope =
            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();

        if (!inCheckScope(methodScope)) {
            return; // no need to really check anything
        }

        // Calculate line number. Unfortunately aReturnType does not contain a
        // valid line number
        final int lineNo = (aMods.size() > 0)
            ? aMods.getFirstLineNo()
            : aSig.getLineNo();

        final boolean isFunction = (aReturnType == null)
            ? false
            : !"void".equals(aReturnType.getFirstChild().getText());

        final String[] jd = getJavadocBefore(lineNo - 1);
        if (jd == null) {
            log(lineNo, "method is missing a Javadoc comment.");
        }
        else {
            final List tags = getMethodTags(jd, lineNo - 1);
            // Check for only one @see tag
            if ((tags.size() != 1) ||
                !((JavadocTag) tags.get(0)).isSeeTag())
            {
                checkParamTags(tags, aSig.getParams());
                checkThrowsTags(tags, aSig.getThrows());
                if (isFunction) {
                    checkReturnTag(tags, lineNo);
                }

                // Dump out all unused tags
                final Iterator it = tags.iterator();
                while (it.hasNext()) {
                    final JavadocTag jt = (JavadocTag) it.next();
                    if (!jt.isSeeTag()) {
                        log(jt.getLineNo(), "Unused Javadoc tag.");
                    }
                }
            }
        }
    }

