    @Override
    protected void processFiltered(File file, List<String> lines) throws CheckstyleException {
        // check if already checked and passed the file
        final String fileName = file.getPath();
        final long timestamp = file.lastModified();
        if (cache != null
                && (cache.isInCache(fileName, timestamp)
                    || !CommonUtils.matchesFileExtension(file, getFileExtensions()))) {
            return;
        }

        final String msg = "%s occurred during the analysis of file %s.";

        try {
            final FileText text = FileText.fromLines(file, lines);
            final FileContents contents = new FileContents(text);
            final DetailAST rootAST = parse(contents);

            getMessageCollector().reset();

            walk(rootAST, contents, AstState.ORDINARY);

            final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);

            walk(astWithComments, contents, AstState.WITH_COMMENTS);
        }
        catch (final TokenStreamRecognitionException tre) {
            final String exceptionMsg = String.format(msg, "TokenStreamRecognitionException",
                     fileName);
            throw new CheckstyleException(exceptionMsg, tre);
        }
        catch (RecognitionException | TokenStreamException ex) {
            final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);
            throw new CheckstyleException(exceptionMsg, ex);
        }

        if (cache != null && getMessageCollector().size() == 0) {
            cache.put(fileName, timestamp);
        }
    }

