    /**
     * Creates a new file text representation.
     *
     * The file will be read using the specified encoding, replacing
     * malformed input and unmappable characters with the default
     * replacement character.
     *
     * @param file the name of the file
     * @param charsetName the encoding to use when reading the file
     * @throws NullPointerException if the text is null
     * @throws IOException if the file could not be read
     */
    public FileText(File file, String charsetName) throws IOException {
        this.file = file;

        // We use our own decoder, to be sure we have complete control
        // about replacements.
        final CharsetDecoder decoder;
        try {
            charset = Charset.forName(charsetName);
            decoder = charset.newDecoder();
            decoder.onMalformedInput(CodingErrorAction.REPLACE);
            decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
        }
        catch (final UnsupportedCharsetException ex) {
            final String message = "Unsupported charset: " + charsetName;
            final UnsupportedEncodingException ex2;
            ex2 = new UnsupportedEncodingException(message);
            ex2.initCause(ex);
            throw ex2;
        }

        final char[] chars = new char[READ_BUFFER_SIZE];
        final StringBuilder buf = new StringBuilder();
        final FileInputStream stream = new FileInputStream(file);
        final Reader reader = new InputStreamReader(stream, decoder);
        try {
            while (true) {
                final int len = reader.read(chars);
                if (len < 0) {
                    break;
                }
                buf.append(chars, 0, len);
            }
        }
        finally {
            Closeables.closeQuietly(reader);
        }
        // buf.trimToSize(); // could be used instead of toString().
        fullText = buf.toString();

        // Use the BufferedReader to break down the lines as this
        // is about 30% faster than using the
        // LINE_TERMINATOR.split(fullText, -1) method
        final ArrayList<String> lines = new ArrayList<>();
        final BufferedReader br =
            new BufferedReader(new StringReader(fullText));
        while (true) {
            final String l = br.readLine();
            if (null == l) {
                break;
            }
            lines.add(l);
        }
        this.lines = lines.toArray(new String[lines.size()]);
    }

