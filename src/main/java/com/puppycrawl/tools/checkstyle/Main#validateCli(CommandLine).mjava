    /**
     * Do validation of Command line options
     * @param cmdLine command line object
     * @return list of violations
     */
    private static List<String> validateCli(CommandLine cmdLine)
    {
        final List<String> result = new ArrayList<>();
        // ensure a configuration file is specified
        if (!cmdLine.hasOption("c")) {
            result.add("Must specify a config XML file.");
        }
        else {
            // validate optional parameters
            if (cmdLine.hasOption("f")) {
                final String format = cmdLine.getOptionValue("f");
                if (!"plain".equals(format) && !"xml".equals(format)) {
                    result.add(String.format("Invalid output format."
                            + " Found '%s' but expected 'plain' or 'xml'.", format));
                }
            }
            if (cmdLine.hasOption("p")) {
                final String propertiesLocation = cmdLine.getOptionValue("p");
                final File file = new File(propertiesLocation);
                if (!file.exists()) {
                    result.add(String.format("Could not find file '%s'.", propertiesLocation));
                }
            }
            if (cmdLine.hasOption("o")) {
                final String outputLocation = cmdLine.getOptionValue("o");
                final File file = new File(outputLocation);
                if (!file.exists()) {
                    result.add(String.format("Could not find file '%s'.", outputLocation));
                }
            }
            final List<File> files = getFilesToProcess(cmdLine.getArgs());
            if (files.isEmpty()) {
                result.add("Must specify files to process, found 0.");
            }
        }

        return result;
    }

