    /**
     * This method creates in AuditListener an open stream for validation data, it must be closed by
     * {@link RootModule} (default implementation is {@link Checker}) by calling
     * {@link AuditListener#auditFinished(AuditEvent)}.
     * @param format format of the audit listener
     * @param outputLocation the location of output
     * @return a fresh new {@code AuditListener}
     * @exception IOException when provided output location is not found
     */
    private static AuditListener createListener(String format, String outputLocation)
            throws IOException {
        final AuditListener listener;
        if (XML_FORMAT_NAME.equals(format)) {
            final OutputStream out = getOutputStream(outputLocation);
            final AutomaticBean.OutputStreamOptions closeOutputStreamOption =
                    getOutputStreamOptions(outputLocation);
            listener = new XMLLogger(out, closeOutputStreamOption);
        }
        else if (PLAIN_FORMAT_NAME.equals(format)) {
            final OutputStream out = getOutputStream(outputLocation);
            final AutomaticBean.OutputStreamOptions closeOutputStreamOption =
                    getOutputStreamOptions(outputLocation);
            listener = new DefaultLogger(out, closeOutputStreamOption);
        }
        else {
            final LocalizedMessage outputFormatExceptionMessage = new LocalizedMessage(1,
                    Definitions.CHECKSTYLE_BUNDLE, CREATE_LISTENER_EXCEPTION,
                    new String[] {format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME}, null,
                    Main.class, null);
            throw new IllegalStateException(outputFormatExceptionMessage.getMessage());
        }

        return listener;
    }

