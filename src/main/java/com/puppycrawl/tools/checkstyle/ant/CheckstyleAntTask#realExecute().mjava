    /**
     * Helper implementation to perform execution.
     */
    private void realExecute() {
        // output version info in debug mode
        final ResourceBundle compilationProperties = ResourceBundle
                .getBundle("checkstylecompilation");
        final String version = compilationProperties
                .getString("checkstyle.compile.version");
        final String compileTimestamp = compilationProperties
                .getString("checkstyle.compile.timestamp");
        log("checkstyle version " + version, Project.MSG_VERBOSE);
        log("compiled on " + compileTimestamp, Project.MSG_VERBOSE);

        // Check for no arguments
        if (fileName == null && fileSets.isEmpty()) {
            throw new BuildException(
                    "Must specify at least one of 'file' or nested 'fileset'.",
                    getLocation());
        }

        if (configLocation == null) {
            throw new BuildException("Must specify 'config'.", getLocation());
        }

        // Create the checker
        Checker c = null;
        try {
            c = createChecker();

            final SeverityLevelCounter warningCounter =
                new SeverityLevelCounter(SeverityLevel.WARNING);
            c.addListener(warningCounter);

            // Process the files
            long startTime = System.currentTimeMillis();
            final List<File> files = scanFileSets();
            long endTime = System.currentTimeMillis();
            log("To locate the files took " + (endTime - startTime) + " ms.",
                Project.MSG_VERBOSE);

            log("Running Checkstyle " + version + " on " + files.size()
                    + " files", Project.MSG_INFO);
            log("Using configuration " + configLocation, Project.MSG_VERBOSE);

            startTime = System.currentTimeMillis();
            final int numErrs = c.process(files);
            endTime = System.currentTimeMillis();
            log("To process the files took " + (endTime - startTime) + " ms.",
                Project.MSG_VERBOSE);
            final int numWarnings = warningCounter.getCount();
            final boolean ok = numErrs <= maxErrors
                    && numWarnings <= maxWarnings;

            // Handle the return status
            if (!ok) {
                final String failureMsg =
                        "Got " + numErrs + " errors and " + numWarnings
                                + " warnings.";
                if (failureProperty != null) {
                    getProject().setProperty(failureProperty, failureMsg);
                }

                if (failOnViolation) {
                    throw new BuildException(failureMsg, getLocation());
                }
            }
        }
        finally {
            if (c != null) {
                c.destroy();
            }
        }
    }

