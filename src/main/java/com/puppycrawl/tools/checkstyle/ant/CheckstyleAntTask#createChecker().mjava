    /**
     * Creates new instance of <code>Checker</code>.
     * @return new instance of <code>Checker</code>
     */
    private Checker createChecker() {
        Checker checker;
        try {
            final Properties props = createOverridingProperties();
            final Configuration config =
                ConfigurationLoader.loadConfiguration(
                    configLocation,
                    new PropertiesExpander(props),
                    omitIgnoredModules);

            final DefaultContext context = new DefaultContext();
            final ClassLoader loader = new AntClassLoader(getProject(),
                    classpath);
            context.add("classloader", loader);

            final ClassLoader moduleClassLoader =
                Checker.class.getClassLoader();
            context.add("moduleClassLoader", moduleClassLoader);

            checker = new Checker();

            checker.contextualize(context);
            checker.configure(config);

            // setup the listeners
            final AuditListener[] listeners = getListeners();
            for (AuditListener element : listeners) {
                checker.addListener(element);
            }
        }
        catch (final Exception e) {
            throw new BuildException("Unable to create a Checker: "
                    + e.getMessage(), e);
        }

        return checker;
    }

