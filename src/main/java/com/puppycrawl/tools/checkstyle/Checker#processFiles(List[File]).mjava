    /**
     * Processes a list of files with all FileSetChecks.
     * @param files a list of files to process.
     * @throws CheckstyleException if error condition within Checkstyle occurs.
     */
    private void processFiles(List<File> files) throws CheckstyleException {
        for (final File file : files) {
            try {
                final String fileName = file.getAbsolutePath();
                fireFileStarted(fileName);
                final long timestamp = file.lastModified();
                if (cache != null && cache.isInCache(fileName, timestamp)
                    || !CommonUtils.matchesFileExtension(file, fileExtensions)) {
                    continue;
                }
                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();
                try {
                    final FileText theText = new FileText(file.getAbsoluteFile(), charset);
                    for (final FileSetCheck fsc : fileSetChecks) {
                        fileMessages.addAll(fsc.process(file, theText));
                    }
                }
                catch (final IOException ioe) {
                    LOG.debug("IOException occurred.", ioe);
                    fileMessages.add(new LocalizedMessage(0,
                        Definitions.CHECKSTYLE_BUNDLE, "general.exception",
                        new String[] {ioe.getMessage()}, null, getClass(), null));
                }
                fireErrors(fileName, fileMessages);
                fireFileFinished(fileName);
                if (cache != null && fileMessages.isEmpty()) {
                    cache.put(fileName, timestamp);
                }
            }
            catch (Exception ex) {
                // We need to catch all exception to put a reason failure(file name) in exception
                throw new CheckstyleException("Exception was thrown while processing "
                    + file.getPath(), ex);
            }
        }
    }

