    /**
     * Create the Properties object based on the arguments specified
     * to the ANT task.
     * @return the properties for property expansion expansion
     * @throws BuildException if an error occurs
     */
    private Properties createOverridingProperties()
    {
        final Properties retVal = new Properties();

        // Load the properties file if specified
        if (propertiesFile != null) {
            FileInputStream inStream = null;
            try {
                inStream = new FileInputStream(propertiesFile);
                retVal.load(inStream);
            }
            catch (final IOException e) {
                throw new BuildException("Error loading Properties file '"
                        + propertiesFile + "'", e, getLocation());
            }
            finally {
                Utils.closeQuietly(inStream);
            }
        }

        // override with Ant properties like ${basedir}
        final Hashtable<?, ?> antProps = this.getProject().getProperties();
        for (Object name : antProps.keySet()) {
            final String key = (String) name;
            final String value = String.valueOf(antProps.get(key));
            retVal.put(key, value);
        }

        // override with properties specified in subelements
        for (Property p : overrideProps) {
            retVal.put(p.getKey(), p.getValue());
        }

        return retVal;
    }

