    /**
     * Executes required Checkstyle actions based on passed parameters.
     * @param line
     *        list of actions to execute
     * @throws CheckstyleException
     *         when could not create checker
     * @throws UnsupportedEncodingException
     *         if there is problem to use UTf-8
     */
    private static void processCommandLine(CommandLine line)
            throws CheckstyleException, UnsupportedEncodingException
    {
        // show version and exit
        if (line.hasOption("v")) {
            System.out.println("Checkstyle version: "
                    + Main.class.getPackage().getImplementationVersion());
            return;
        }

        // ensure a configuration file is specified
        if (!line.hasOption("c")) {
            System.out.println("Must specify a config XML file.");
            return;
        }

        // setup the properties
        final Properties props =
                line.hasOption("p")
                        ? loadProperties(new File(line.getOptionValue("p")))
                        : System.getProperties();
        final String configFormat = line.getOptionValue("c");
        final Configuration config = loadConfig(configFormat, props);

        // setup the output stream
        OutputStream out = null;
        boolean closeOut = false;
        if (line.hasOption("o")) {
            final String fname = line.getOptionValue("o");
            try {
                out = new FileOutputStream(fname);
                closeOut = true;
            }
            catch (final FileNotFoundException e) {
                throw new CheckstyleException(String.format(
                        "Could not find file '%s': %s ", fname, e.getMessage()));
            }
        }
        else {
            out = System.out;
            closeOut = false;
        }

        final String format = line.hasOption("f") ? line.getOptionValue("f") : "plain";
        final AuditListener listener = createListener(format, out, closeOut);
        final List<File> files = getFilesToProcess(line.getArgs());
        if (files.isEmpty()) {
            throw new CheckstyleException("Must specify files to process, found 0.");
        }

        final Checker checker = createChecker(config, listener);
        final int errorCounter = checker.process(files);
        checker.destroy();
        if (errorCounter != 0) {
            throw new CheckstyleException(String.format(
                    "Checkstyle ends with %d errors.", errorCounter));
        }
    }

