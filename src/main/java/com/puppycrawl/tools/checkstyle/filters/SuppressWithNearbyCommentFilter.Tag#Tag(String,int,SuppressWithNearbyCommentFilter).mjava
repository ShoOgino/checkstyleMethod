        /**
         * Constructs a tag.
         * @param text the text of the suppression.
         * @param line the line number.
         * @param filter the {@code SuppressWithNearbyCommentFilter} with the context
         * @throws ConversionException if unable to parse expanded text.
         */
        public Tag(String text, int line, SuppressWithNearbyCommentFilter filter) {
            this.text = text;

            //Expand regexp for check and message
            //Does not intern Patterns with Utils.getPattern()
            String format = "";
            try {
                format = CommonUtils.fillTemplateWithStringsByRegexp(
                        filter.checkFormat, text, filter.commentRegexp);
                tagCheckRegexp = Pattern.compile(format);
                if (filter.messageFormat == null) {
                    tagMessageRegexp = null;
                }
                else {
                    format = CommonUtils.fillTemplateWithStringsByRegexp(
                            filter.messageFormat, text, filter.commentRegexp);
                    tagMessageRegexp = Pattern.compile(format);
                }
                format = CommonUtils.fillTemplateWithStringsByRegexp(
                        filter.influenceFormat, text, filter.commentRegexp);
                final int influence;
                try {
                    if (CommonUtils.startsWithChar(format, '+')) {
                        format = format.substring(1);
                    }
                    influence = Integer.parseInt(format);
                }
                catch (final NumberFormatException e) {
                    throw new ConversionException(
                        "unable to parse influence from '" + text
                            + "' using " + filter.influenceFormat, e);
                }
                if (influence >= 0) {
                    firstLine = line;
                    lastLine = line + influence;
                }
                else {
                    firstLine = line + influence;
                    lastLine = line;
                }
            }
            catch (final PatternSyntaxException e) {
                throw new ConversionException(
                    "unable to parse expanded comment " + format,
                    e);
            }
        }

