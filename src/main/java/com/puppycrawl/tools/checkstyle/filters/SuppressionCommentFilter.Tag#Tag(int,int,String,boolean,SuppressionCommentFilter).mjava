        /**
         * Constructs a tag.
         * @param line the line number.
         * @param column the column number.
         * @param text the text of the suppression.
         * @param reportingOn {@code true} if the tag turns checkstyle reporting.
         * @param filter the {@code SuppressionCommentFilter} with the context
         * @throws ConversionException if unable to parse expanded text.
         */
        public Tag(int line, int column, String text, boolean reportingOn,
                   SuppressionCommentFilter filter) {
            this.line = line;
            this.column = column;
            this.text = text;
            this.reportingOn = reportingOn;

            //Expand regexp for check and message
            //Does not intern Patterns with Utils.getPattern()
            String format = "";
            try {
                if (reportingOn) {
                    format =
                        expandFromComment(text, filter.checkFormat, filter.onRegexp);
                    tagCheckRegexp = Pattern.compile(format);
                    if (filter.messageFormat == null) {
                        tagMessageRegexp = null;
                    }
                    else {
                        format =
                                expandFromComment(text, filter.messageFormat, filter.onRegexp);
                        tagMessageRegexp = Pattern.compile(format);
                    }
                }
                else {
                    format =
                        expandFromComment(text, filter.checkFormat, filter.offRegexp);
                    tagCheckRegexp = Pattern.compile(format);
                    if (filter.messageFormat == null) {
                        tagMessageRegexp = null;
                    }
                    else {
                        format =
                                expandFromComment(
                                        text,
                                        filter.messageFormat,
                                        filter.offRegexp);
                        tagMessageRegexp = Pattern.compile(format);
                    }
                }
            }
            catch (final PatternSyntaxException e) {
                throw new ConversionException(
                    "unable to parse expanded comment " + format,
                    e);
            }
        }

