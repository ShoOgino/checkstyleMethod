    /**
     * Generate the map of third party Checkstyle module names to the set of their fully qualified
     * names.
     * @param loader the class loader used to load Checkstyle package names
     * @return the map of third party Checkstyle module names to the set of their fully qualified
     *      names
     */
    private Map<String, Set<String>> generateThirdPartyNameToFullModuleName(ClassLoader loader) {
        Map<String, Set<String>> returnValue;
        try {
            returnValue = ModuleReflectionUtil.getCheckstyleModules(packages, loader).stream()
                    .collect(Collectors.toMap(
                        Class::getSimpleName,
                        cls -> Collections.singleton(cls.getCanonicalName()),
                        (fullNames1, fullNames2) -> {
                            final Set<String> mergedNames = new LinkedHashSet<>(fullNames1);
                            mergedNames.addAll(fullNames2);
                            return mergedNames;
                        }));
        }
        catch (IOException ignore) {
            returnValue = new HashMap<>();
        }
        return returnValue;
    }

