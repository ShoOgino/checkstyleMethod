    /**
     * Gets first Ast node inside SWITCH block if variable usage is met
     * only inside the block (not in its declaration!).
     * @param aBlock
     *        Ast node represents SWITCH block.
     * @param aVariable
     *        Variable which is checked for content in block.
     * @return If variable usage is met only inside the block
     *         (not in its declaration!) than return the first Ast node
     *         of this block, otherwise - null.
     */
    private DetailAST getFirstNodeInsideSwitchBlock(
            DetailAST aBlock, DetailAST aVariable)
    {
        DetailAST firstNodeInsideBlock = null;

        if (!isVariableInOperatorExpr(aBlock, aVariable)) {
            DetailAST currentNode = aBlock
                    .findFirstToken(TokenTypes.CASE_GROUP);
            final List<DetailAST> variableUsageExpressions =
                    new ArrayList<DetailAST>();

            // Checking variable usage inside all CASE blocks.
            while (currentNode != null
                    && currentNode.getType() == TokenTypes.CASE_GROUP)
            {
                final DetailAST lastNodeInCaseGroup =
                        currentNode.getLastChild();

                if (isChild(lastNodeInCaseGroup, aVariable)) {
                    variableUsageExpressions.add(lastNodeInCaseGroup);
                }
                currentNode = currentNode.getNextSibling();
            }

            // If variable usage exists in several related blocks, then
            // firstNodeInsideBlock = null, otherwise if variable usage exists
            // only inside one block, then get node from
            // variableUsageExpressions.
            if (variableUsageExpressions.size() == 1) {
                firstNodeInsideBlock = variableUsageExpressions.get(0);
            }
        }

        return firstNodeInsideBlock;
    }

