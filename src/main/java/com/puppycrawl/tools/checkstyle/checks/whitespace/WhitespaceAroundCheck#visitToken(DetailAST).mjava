    @Override
    public void visitToken(DetailAST ast)
    {
        final int currentType = ast.getType();
        final int parentType = ast.getParent().getType();

        // Check for CURLY in array initializer
        if (((currentType == TokenTypes.RCURLY)
                || (currentType == TokenTypes.LCURLY))
            && ((parentType == TokenTypes.ARRAY_INIT)
                || (parentType == TokenTypes.ANNOTATION_ARRAY_INIT)))
        {
            return;
        }

        // Check for import pkg.name.*;
        if ((currentType == TokenTypes.STAR)
            && (parentType == TokenTypes.DOT))
        {
            return;
        }

        // Check for an SLIST that has a parent CASE_GROUP. It is not a '{'.
        if ((currentType == TokenTypes.SLIST)
            && (parentType == TokenTypes.CASE_GROUP))
        {
            return;
        }

        if ((currentType == TokenTypes.COLON)) {
            //we do not want to check colon for cases and defaults
            if (parentType == TokenTypes.LITERAL_DEFAULT
                || parentType == TokenTypes.LITERAL_CASE)
            {
                return;
            }
            else if (parentType == TokenTypes.FOR_EACH_CLAUSE
                && this.ignoreEnhancedForColon)
            {
                return;
            }
        }

        // Checks if empty methods, ctors or loops are allowed.
        if (isEmptyMethodBlock(ast, parentType)
                || isEmptyCtorBlock(ast, parentType)
                || isEmptyLoop(ast, parentType))
        {
            return;
        }

        // Checks if empty classes, interfaces or enums are allowed
        if (allowEmptyTypes && (isEmptyType(ast, parentType))) {
            return;
        }

        final String line = getLine(ast.getLineNo() - 1);
        final int before = ast.getColumnNo() - 1;
        final int after = ast.getColumnNo() + ast.getText().length();

        if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {
            log(ast.getLineNo(), ast.getColumnNo(),
                    WS_NOT_PRECEDED, ast.getText());
        }

        if (after >= line.length()) {
            return;
        }

        final char nextChar = line.charAt(after);
        if (!Character.isWhitespace(nextChar)
            // Check for "return;"
            && !((currentType == TokenTypes.LITERAL_RETURN)
                && (ast.getFirstChild().getType() == TokenTypes.SEMI))
            // Check for "})" or "};" or "},". Happens with anon-inners
            && !((currentType == TokenTypes.RCURLY)
                && ((nextChar == ')')
                    || (nextChar == ';')
                    || (nextChar == ',')
                    || (nextChar == '.'))))
        {
            log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),
                    WS_NOT_FOLLOWED, ast.getText());
        }
    }

