    /**
     * Verifies that a type definition has a required tag.
     * @param lineNo the line number for the type definition.
     * @param comment the Javadoc comment for the type definition.
     * @param tag the required tag name.
     * @param tagRE regexp for the full tag.
     * @param formatRE regexp for the tag value.
     * @param format pattern for the tag value.
     */
    private void checkTag(
            int lineNo,
            String[] comment,
            String tag,
            Pattern tagRE,
            Pattern formatRE,
            String format)
    {
        if (tagRE == null) {
            return;
        }

        int tagCount = 0;
        for (int i = 0; i < comment.length; i++) {
            final String s = comment[i];
            final Matcher matcher = tagRE.matcher(s);
            if (matcher.find()) {
                tagCount += 1;
                final int contentStart = matcher.start(1);
                final String content = s.substring(contentStart);
                if ((formatRE != null) && !formatRE.matcher(content).find()) {
                    log(lineNo + i - comment.length, TAG_FORMAT, tag,
                        format);
                }
                else {
                    logTag(lineNo + i - comment.length, tag, content);
                }

            }
        }
        if (tagCount == 0) {
            log(lineNo, MISSING_TAG, tag);
        }

    }

