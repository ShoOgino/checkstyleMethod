    @Override
    public void visitToken(DetailAST ast) {
        final DetailAST parenAST;
        if (ast.getType() == TokenTypes.METHOD_CALL) {
            parenAST = ast;
        }
        else {
            parenAST = ast.findFirstToken(TokenTypes.LPAREN);
            // array construction => parenAST == null
            if (parenAST == null) {
                return;
            }
        }

        final String line = getLines()[parenAST.getLineNo() - 1];
        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {
            if (!allowLineBreaks) {
                log(parenAST, LINE_PREVIOUS, parenAST.getText());
            }
        }
        else {
            final int before = parenAST.getColumnNo() - 1;
            if (PadOption.NOSPACE == getAbstractOption()
                && Character.isWhitespace(line.charAt(before))) {
                log(parenAST , WS_PRECEDED, parenAST.getText());
            }
            else if (PadOption.SPACE == getAbstractOption()
                     && !Character.isWhitespace(line.charAt(before))) {
                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());
            }
        }
    }

