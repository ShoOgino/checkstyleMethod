    /**
     * Get the handler for an AST.
     *
     * @param indentCheck   the indentation check
     * @param ast           ast to handle
     * @param parent        the handler parent of this AST
     *
     * @return the ExpressionHandler for ast
     */
    public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,
        DetailAST ast, AbstractExpressionHandler parent) {
        final AbstractExpressionHandler handler =
            createdHandlers.get(ast);
        if (handler != null) {
            return handler;
        }

        if (ast.getType() == TokenTypes.METHOD_CALL) {
            return createMethodCallHandler(indentCheck, ast, parent);
        }

        AbstractExpressionHandler expHandler = null;
        try {
            final Constructor<?> handlerCtor =
                typeHandlers.get(ast.getType());
            if (handlerCtor != null) {
                expHandler = (AbstractExpressionHandler) handlerCtor.newInstance(
                        indentCheck, ast, parent);
            }
        }
        catch (final InstantiationException | InvocationTargetException e) {
            final String message = "couldn't instantiate constructor for " + ast;
            LOG.debug(message, e);
            throw new RuntimeException(message);
        }
        catch (final IllegalAccessException e) {
            final String message = "couldn't access constructor for " + ast;
            LOG.debug(message, e);
            throw new RuntimeException(message);
        }
        if (expHandler == null) {
            throw new RuntimeException("no handler for type " + ast.getType());
        }
        return expHandler;
    }

