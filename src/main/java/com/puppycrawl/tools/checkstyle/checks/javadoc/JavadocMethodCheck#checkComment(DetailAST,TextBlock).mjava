    /**
     * Checks the Javadoc for a method.
     *
     * @param ast the token for the method
     * @param comment the Javadoc comment
     */
    private void checkComment(DetailAST ast, TextBlock comment) {
        final List<JavadocTag> tags = getMethodTags(comment);

        if (hasShortCircuitTag(ast, tags)) {
            return;
        }

        final Iterator<JavadocTag> it = tags.iterator();
        if (ast.getType() == TokenTypes.ANNOTATION_FIELD_DEF) {
            checkReturnTag(tags, ast.getLineNo(), true);
        }
        else {
            // Check for inheritDoc
            boolean hasInheritDocTag = false;
            while (!hasInheritDocTag && it.hasNext()) {
                hasInheritDocTag = it.next().isInheritDocTag();
            }
            final boolean reportExpectedTags = !hasInheritDocTag && !hasAllowedAnnotations(ast);

            checkParamTags(tags, ast, reportExpectedTags);
            checkThrowsTags(tags, getThrows(ast), reportExpectedTags);
            if (CheckUtils.isNonVoidMethod(ast)) {
                checkReturnTag(tags, ast.getLineNo(), reportExpectedTags);
            }
        }

        // Dump out all unused tags
        for (JavadocTag javadocTag : tags) {
            if (!javadocTag.isSeeOrInheritDocTag()) {
                log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);
            }
        }
    }

