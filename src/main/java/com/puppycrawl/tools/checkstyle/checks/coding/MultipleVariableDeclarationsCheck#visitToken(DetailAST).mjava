    @Override
    public void visitToken(DetailAST ast)
    {
        DetailAST nextNode = ast.getNextSibling();
        final boolean isCommaSeparated =
            ((nextNode != null) && (nextNode.getType() == TokenTypes.COMMA));

        if (nextNode == null) {
            // no next statement - no check
            return;
        }

        if ((nextNode.getType() == TokenTypes.COMMA)
            || (nextNode.getType() == TokenTypes.SEMI))
        {
            nextNode = nextNode.getNextSibling();
        }

        if ((nextNode != null)
            && (nextNode.getType() == TokenTypes.VARIABLE_DEF))
        {
            final DetailAST firstNode = CheckUtils.getFirstNode(ast);
            if (isCommaSeparated) {
                // Check if the multiple variable declarations are in a
                // for loop initializer. If they are, then no warning
                // should be displayed. Declaring multiple variables in
                // a for loop initializer is a good way to minimize
                // variable scope. Refer Feature Request Id - 2895985
                // for more details
                if (ast.getParent().getType() != TokenTypes.FOR_INIT) {
                    log(firstNode, "multiple.variable.declarations.comma");
                }
                return;
            }

            final DetailAST lastNode = getLastNode(ast);
            final DetailAST firstNextNode = CheckUtils.getFirstNode(nextNode);

            if (firstNextNode.getLineNo() == lastNode.getLineNo()) {
                log(firstNode, "multiple.variable.declarations");
            }
        }

    }

