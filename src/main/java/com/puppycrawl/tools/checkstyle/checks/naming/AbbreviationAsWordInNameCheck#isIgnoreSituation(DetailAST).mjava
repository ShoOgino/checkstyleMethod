    /**
     * Checks if it is an ignore situation.
     * @param aAst input DetailAST node.
     * @return true if it is an ignore situation found for given input DetailAST
     *         node.
     */
    private boolean isIgnoreSituation(DetailAST aAst)
    {
        final DetailAST modifiers = aAst.getFirstChild();

        boolean result = false;
        if (aAst.getType() == TokenTypes.VARIABLE_DEF) {
            if ((mIgnoreFinal || mIgnoreStatic)
                    && isInterfaceDeclaration(aAst))
            {
                // field declarations in interface are static/final
                result = true;
            }
            else {
                result = (mIgnoreFinal
                          && modifiers.branchContains(TokenTypes.FINAL))
                    || (mIgnoreStatic
                        && modifiers.branchContains(TokenTypes.LITERAL_STATIC));
            }
        }
        else if (aAst.getType() == TokenTypes.METHOD_DEF) {
            result = mIgnoreOverriddenMethods
                    && hasOverrideAnnotation(modifiers);
        }
        return result;
    }

