    /**
     * Checks if the modifiers were added in the order suggested
     * in the Java language specification.
     *
     * @param modifiers list of modifier AST tokens
     * @return null if the order is correct, otherwise returns the offending
     *     modifier AST.
     */
    static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {
        final Iterator<DetailAST> it = modifiers.iterator();

        //Speed past all initial annotations
        DetailAST modifier = skipAnnotations(it);

        DetailAST offendingModifier = null;

        //All modifiers are annotations, no problem
        if (modifier.getType() != TokenTypes.ANNOTATION) {
            int i = 0;

            while (modifier != null
                    && offendingModifier == null) {

                if (modifier.getType() == TokenTypes.ANNOTATION) {
                    //Annotation not at start of modifiers, bad
                    offendingModifier = modifier;
                    break;
                }

                while (i < JLS_ORDER.length
                       && !JLS_ORDER[i].equals(modifier.getText())) {
                    i++;
                }

                if (i == JLS_ORDER.length) {
                    //Current modifier is out of JLS order
                    offendingModifier = modifier;
                }
                else if (it.hasNext()) {
                    modifier = it.next();
                }
                else {
                    //Reached end of modifiers without problem
                    modifier = null;
                }
            }
        }
        return offendingModifier;
    }

