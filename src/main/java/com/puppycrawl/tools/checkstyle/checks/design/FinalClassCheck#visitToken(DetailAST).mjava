    @Override
    public void visitToken(DetailAST ast) {
        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);

        switch (ast.getType()) {

            case TokenTypes.PACKAGE_DEF:
                packageName = extractQualifiedName(ast);
                break;

            case TokenTypes.CLASS_DEF:
                registerNestedSubclassToOuterSuperClasses(ast);

                final boolean isFinal = modifiers.branchContains(TokenTypes.FINAL);
                final boolean isAbstract = modifiers.branchContains(TokenTypes.ABSTRACT);

                final String qualifiedClassName = getQualifiedClassName(ast);
                classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));
                break;

            case TokenTypes.CTOR_DEF:
                if (!ScopeUtils.isInEnumBlock(ast)) {
                    final ClassDesc desc = classes.peek();
                    if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {
                        desc.registerPrivateCtor();
                    }
                    else {
                        desc.registerNonPrivateCtor();
                    }
                }
                break;

            default:
                throw new IllegalStateException(ast.toString());
        }
    }

