    @Override
    public void startElement(String namespaceUri,
                             String localName,
                             String qName,
                             Attributes attributes)
            throws SAXException {
        if ("import-control".equals(qName)) {
            final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);
            final MismatchStrategy strategyOnMismatch = getStrategyForImportControl(attributes);
            final boolean regex = containsRegexAttribute(attributes);
            stack.push(new PkgImportControl(pkg, regex, strategyOnMismatch));
        }
        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {
            final String name = safeGet(attributes, NAME_ATTRIBUTE_NAME);
            final MismatchStrategy strategyOnMismatch = getStrategyForSubpackage(attributes);
            final boolean regex = containsRegexAttribute(attributes);
            final PkgImportControl parentImportControl = (PkgImportControl) stack.peek();
            final AbstractImportControl importControl = new PkgImportControl(parentImportControl,
                    name, regex, strategyOnMismatch);
            parentImportControl.addChild(importControl);
            stack.push(importControl);
        }
        else if (FILE_ELEMENT_NAME.equals(qName)) {
            final String name = safeGet(attributes, NAME_ATTRIBUTE_NAME);
            final boolean regex = containsRegexAttribute(attributes);
            final PkgImportControl parentImportControl = (PkgImportControl) stack.peek();
            final AbstractImportControl importControl = new FileImportControl(parentImportControl,
                    name, regex);
            parentImportControl.addChild(importControl);
            stack.push(importControl);
        }
        else if (ALLOW_ELEMENT_NAME.equals(qName) || "disallow".equals(qName)) {
            final AbstractImportRule rule = createImportRule(qName, attributes);
            stack.peek().addImportRule(rule);
        }
    }

