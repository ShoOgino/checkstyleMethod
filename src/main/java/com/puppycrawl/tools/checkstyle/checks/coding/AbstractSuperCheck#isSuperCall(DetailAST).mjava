    /**
     * Determines whether a 'super' literal is a call to the super method
     * for this check.
     * @param literalSuperAst the AST node of a 'super' literal.
     * @return true if ast is a call to the super method
     * for this check.
     */
    private boolean isSuperCall(DetailAST literalSuperAst) {
        boolean superCall = false;

        if (literalSuperAst.getType() == TokenTypes.LITERAL_SUPER) {
            // dot operator?
            final DetailAST dotAst = literalSuperAst.getParent();

            if (dotAst.getType() == TokenTypes.DOT
                && !isSameNameMethod(literalSuperAst)
                && !hasArguments(dotAst)) {
                superCall = isSuperCallInOverridingMethod(dotAst);
            }
        }
        return superCall;
    }

