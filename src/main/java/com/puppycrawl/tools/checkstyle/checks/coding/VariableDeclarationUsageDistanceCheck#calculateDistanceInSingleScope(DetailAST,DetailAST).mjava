    /**
     * Calculates distance between declaration of variable and its first usage
     * in single scope.
     * @param aSemicolonAst
     *        Regular node of Ast which is checked for content of checking
     *        variable.
     * @param aVariableIdentAst
     *        Variable which distance is calculated for.
     * @return entry which contains expression with variable usage and distance.
     */
    private Entry<DetailAST, Integer> calculateDistanceInSingleScope(
            DetailAST aSemicolonAst, DetailAST aVariableIdentAst)
    {
        int dist = 0;
        boolean firstUsageFound = false;
        DetailAST currentAst = aSemicolonAst;
        DetailAST variableUsageAst = null;

        while (!firstUsageFound && currentAst != null
                && currentAst.getType() != TokenTypes.RCURLY)
        {
            if (currentAst.getFirstChild() != null) {

                if (isChild(currentAst, aVariableIdentAst)) {

                    switch (currentAst.getType()) {
                    case TokenTypes.VARIABLE_DEF:
                        dist++;
                        break;
                    case TokenTypes.SLIST:
                        dist = 0;
                        break;
                    case TokenTypes.LITERAL_FOR:
                    case TokenTypes.LITERAL_WHILE:
                    case TokenTypes.LITERAL_DO:
                    case TokenTypes.LITERAL_IF:
                    case TokenTypes.LITERAL_SWITCH:
                        if (isVariableInOperatorExpr(currentAst, aVariableIdentAst)) {
                            dist++;
                        }
                        else { // variable usage is in inner scope
                            // reset counters, because we can't determine distance
                            dist = 0;
                        }
                        break;
                    default:
                        if (currentAst.branchContains(TokenTypes.SLIST)) {
                            dist = 0;
                        }
                        else {
                            dist++;
                        }
                    }
                    variableUsageAst = currentAst;
                    firstUsageFound = true;
                }
                else if (currentAst.getType() != TokenTypes.VARIABLE_DEF) {
                    dist++;
                }
            }
            currentAst = currentAst.getNextSibling();
        }

        // If variable wasn't used after its declaration, distance is 0.
        if (!firstUsageFound) {
            dist = 0;
        }

        return new SimpleEntry<DetailAST, Integer>(variableUsageAst, dist);
    }

