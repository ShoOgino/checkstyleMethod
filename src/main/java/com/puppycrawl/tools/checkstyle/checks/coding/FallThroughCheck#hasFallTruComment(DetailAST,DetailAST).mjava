    /**
     * Determines if the fall through case between <code>currentCase</code> and
     * <code>nextCase</code> is reliefed by a appropriate comment.
     *
     * @param currentCase AST of the case that falls through to the next case.
     * @param nextCase AST of the next case.
     * @return True if a relief comment was found
     */
    private boolean hasFallTruComment(DetailAST currentCase,
            DetailAST nextCase)
    {

        final int startLineNo = currentCase.getLineNo();
        final int endLineNo = nextCase.getLineNo();
        final int endColNo = nextCase.getColumnNo();

        /*
         * Remember: The lines number returned from the AST is 1-based, but
         * the lines number in this array are 0-based. So you will often
         * see a "lineNo-1" etc.
         */
        final String[] lines = getLines();

        /*
         * Handle:
         *    case 1:
         *    /+ FALLTHRU +/ case 2:
         *    ....
         * and
         *    switch(i) {
         *    default:
         *    /+ FALLTHRU +/}
         */
        final String linepart = lines[endLineNo - 1].substring(0, endColNo);
        if (commentMatch(regExp, linepart, endLineNo)) {
            return true;
        }

        /*
         * Handle:
         *    case 1:
         *    .....
         *    // FALLTHRU
         *    case 2:
         *    ....
         * and
         *    switch(i) {
         *    default:
         *    // FALLTHRU
         *    }
         */
        for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
            if (lines[i].trim().length() != 0) {
                return commentMatch(regExp, lines[i], i + 1);
            }
        }

        // Well -- no relief comment found.
        return false;
    }

