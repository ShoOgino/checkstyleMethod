    @Override
    public void visitToken(DetailAST ast) {
        // check whether annotation is SuppressWarnings
        // expected children: AT ( IDENT | DOT ) LPAREN <values> RPAREN
        String identifier = getIdentifier(getNthChild(ast, 1));
        if (identifier.startsWith(JAVA_LANG_PREFIX)) {
            identifier = identifier.substring(JAVA_LANG_PREFIX.length());
        }
        if ("SuppressWarnings".equals(identifier)) {

            // get values of annotation
            List<String> values = null;
            final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
            if (lparenAST != null) {
                final DetailAST nextAST = lparenAST.getNextSibling();
                if (nextAST != null) {
                    final int nextType = nextAST.getType();
                    switch (nextType) {
                        case TokenTypes.EXPR:
                        case TokenTypes.ANNOTATION_ARRAY_INIT:
                            values = getAnnotationValues(nextAST);
                            break;

                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
                            // expected children: IDENT ASSIGN ( EXPR |
                            // ANNOTATION_ARRAY_INIT )
                            values = getAnnotationValues(getNthChild(nextAST, 2));
                            break;

                        case TokenTypes.RPAREN:
                            // no value present (not valid Java)
                            break;

                        default:
                            // unknown annotation value type (new syntax?)
                    }
                }
            }
            if (values == null) {
                log(ast, "suppress.warnings.missing.value");
                return;
            }

            final DetailAST targetAST = getAnnotationTarget(ast);


            if (targetAST == null) {
                log(ast, "suppress.warnings.invalid.target");
                return;
            }

            // get text range of target
            final int firstLine = targetAST.getLineNo();
            final int firstColumn = targetAST.getColumnNo();
            final DetailAST nextAST = targetAST.getNextSibling();
            final int lastLine;
            final int lastColumn;
            if (nextAST != null) {
                lastLine = nextAST.getLineNo();
                lastColumn = nextAST.getColumnNo() - 1;
            }
            else {
                lastLine = Integer.MAX_VALUE;
                lastColumn = Integer.MAX_VALUE;
            }

            // add suppression entries for listed checks
            final List<Entry> entries = ENTRIES.get();
            if (entries != null) {
                for (String value : values) {
                    // strip off the checkstyle-only prefix if present
                    if (value.startsWith(CHECKSTYLE_PREFIX)) {
                        value = value.substring(CHECKSTYLE_PREFIX.length());
                    }
                    entries.add(new Entry(value, firstLine, firstColumn,
                        lastLine, lastColumn));
                }
            }
        }
    }

