    /**
     * Checks line wrapping into annotations.
     *
     * @param atNode block tag node.
     * @param firstNodesOnLines map which contains
     *     first nodes as values and line numbers as keys.
     * @param indentLevel line wrapping indentation.
     */
    private void checkAnnotationIndentation(DetailAST atNode,
            NavigableMap<Integer, DetailAST> firstNodesOnLines, int indentLevel) {
        final int firstNodeIndent = getLineStart(atNode);
        final int currentIndent = firstNodeIndent + indentLevel;
        final Collection<DetailAST> values = firstNodesOnLines.values();
        final DetailAST lastAnnotationNode = atNode.getParent().getLastChild();
        final int lastAnnotationLine = lastAnnotationNode.getLineNo();

        final Iterator<DetailAST> itr = values.iterator();
        while (firstNodesOnLines.size() > 1) {
            final DetailAST node = itr.next();

            final DetailAST parentNode = node.getParent();
            final boolean isArrayInitPresentInAncestors =
                isParentContainsTokenType(node, TokenTypes.ANNOTATION_ARRAY_INIT);
            final boolean isCurrentNodeCloseAnnotationAloneInLine =
                node.getLineNo() == lastAnnotationLine
                    && isEndOfScope(lastAnnotationNode, node);
            if (!isArrayInitPresentInAncestors
                    && (isCurrentNodeCloseAnnotationAloneInLine
                    || node.getType() == TokenTypes.AT
                    && (parentNode.getParent().getType() == TokenTypes.MODIFIERS
                        || parentNode.getParent().getType() == TokenTypes.ANNOTATIONS)
                    || TokenUtil.areOnSameLine(node, atNode))) {
                logWarningMessage(node, firstNodeIndent);
            }
            else if (!isArrayInitPresentInAncestors) {
                logWarningMessage(node, currentIndent);
            }
            itr.remove();
        }
    }

