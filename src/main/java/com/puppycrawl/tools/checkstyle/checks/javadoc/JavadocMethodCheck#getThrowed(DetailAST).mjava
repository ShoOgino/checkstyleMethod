    /**
     * Get ExceptionInfo for all exceptions that throws in method code by 'throw new'.
     *
     * @param methodAst method DetailAST object where to find exceptions
     * @return list of ExceptionInfo
     */
    private static List<ExceptionInfo> getThrowed(DetailAST methodAst) {
        final List<ExceptionInfo> returnValue = new ArrayList<>();
        final DetailAST blockAst = methodAst.findFirstToken(TokenTypes.SLIST);
        if (blockAst != null) {
            final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,
                    TokenTypes.LITERAL_THROW);
            for (DetailAST throwAst : throwLiterals) {
                if (!isInIgnoreBlock(blockAst, throwAst)) {
                    final DetailAST newAst = throwAst.getFirstChild().getFirstChild();
                    if (newAst.getType() == TokenTypes.LITERAL_NEW) {
                        final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());
                        final ExceptionInfo exceptionInfo = new ExceptionInfo(
                                new ClassInfo(new Token(ident)));
                        returnValue.add(exceptionInfo);
                    }
                }
            }
        }
        return returnValue;
    }

