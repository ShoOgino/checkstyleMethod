    /**
     * Find the set of lines for a given subtree.
     *
     * @param aLines          the set of lines to add to
     * @param aTree           the subtree to examine
     * @param aAllowNesting   whether or not to allow nested subtrees
     */
    protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,
        boolean aAllowNesting)
    {
        if (getIndentCheck().getHandlerFactory().isHandledType(aTree.getType())
            || (aTree.getLineNo() < 0))
        {
            return;
        }

        final int lineNum = aTree.getLineNo();
        final Integer colNum = aLines.getStartColumn(lineNum);

        final int thisLineColumn = expandedTabsColumnNo(aTree);
        if ((colNum == null) || (thisLineColumn < colNum.intValue())) {
            aLines.addLineAndCol(lineNum, thisLineColumn);
        }

        // check children
        for (DetailAST node = aTree.getFirstChild();
            node != null;
            node = node.getNextSibling())
        {
            findSubtreeLines(aLines, node, aAllowNesting);
        }
    }

