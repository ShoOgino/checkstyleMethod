    /**
     * Returns the element after which empty lines exist.
     *
     * @param ast the ast to check.
     * @param line the empty line which gives violation.
     * @return The DetailAST after which empty lines are present.
     */
    private static DetailAST getLastElementBeforeEmptyLines(DetailAST ast, int line) {
        DetailAST result = ast;
        if (ast.getFirstChild().getLineNo() <= line) {
            result = ast.getFirstChild();
            while (result.getNextSibling() != null
                    && result.getNextSibling().getLineNo() <= line) {
                result = result.getNextSibling();
            }
            if (result.hasChildren()) {
                result = getLastElementBeforeEmptyLines(result, line);
            }
        }

        if (result.getNextSibling() != null) {
            final Optional<DetailAST> postFixNode = getPostFixNode(result.getNextSibling());
            if (postFixNode.isPresent()) {
                // A post fix AST will always have a sibling METHOD CALL
                // METHOD CALL will at least have two children
                // The first first child is DOT in case of POSTFIX which have at least 2 children
                // First child of DOT again puts us back to normal AST tree which will
                // recurse down below from here
                final DetailAST firstChildAfterPostFix = postFixNode.get();
                result = getLastElementBeforeEmptyLines(firstChildAfterPostFix, line);
            }
        }
        return result;
    }

