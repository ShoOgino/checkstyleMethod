    /**
     * Decides whether to ignore an AST node that is the parameter of a
     * setter method, where the property setter method for field 'xyz' has
     * name 'setXyz', one parameter named 'xyz', and return type void.
     * @param ast the AST to check.
     * @param name the name of ast.
     * @return true if ast should be ignored because check property
     * ignoreSetter is true and ast is the parameter of a setter method.
     */
    private boolean isIgnoredSetterParam(DetailAST ast, String name)
    {
        if (ast.getType() != TokenTypes.PARAMETER_DEF
            || !ignoreSetter)
        {
            return false;
        }
        //single pnameter?
        final DetailAST parametersAST = ast.getParent();
        if (parametersAST.getChildCount() != 1) {
            return false;
        }
        //method pnameter, not constructor pnameter?
        final DetailAST methodAST = parametersAST.getParent();
        if (methodAST.getType() != TokenTypes.METHOD_DEF) {
            return false;
        }
        //void?
        final DetailAST typeAST = methodAST.findFirstToken(TokenTypes.TYPE);
        if (!typeAST.branchContains(TokenTypes.LITERAL_VOID)) {
            return false;
        }

        //property setter name?
        final String methodName =
                methodAST.findFirstToken(TokenTypes.IDENT).getText();
        final String expectedName = "set" + capitalize(name);
        return methodName.equals(expectedName);
    }

