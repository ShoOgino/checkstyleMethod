    /**
     * Parses the text line for any HTML tags and adds them to the internal
     * List of tags.
     * @param aText the source line to parse.
     * @param aLineNo the source line number.
     */
    private void parseTags(String[] aText, int aLineNo)
    {
        final int nLines = aText.length;
        Point position = new Point(0, 0);

        position = findChar(aText, '<', position);
        while (position.getLineNo() < nLines) {
            // if this is html comment then skip it
            if (isCommentTag(aText, position)) {
                position = skipHtmlComment(aText, position);
            }
            else if (!isTag(aText, position)) {
                position = getNextCharPos(aText, position);
            }
            else {
                // find end of tag
                final Point endTag = findChar(aText, '>', position);
                final boolean incompleteTag = (endTag.getLineNo() >= nLines);
                // get tag id (one word)
                final String tagId =
                    (incompleteTag ? "" : getTagId(aText, position));
                // is this closed tag
                final boolean closedTag =
                    ((endTag.getLineNo() < nLines) && (endTag.getColumnNo() > 0)
                     && (aText[endTag.getLineNo()]
                     .charAt(endTag.getColumnNo() - 1) == '/'));
                // add new tag
                add(new HtmlTag(tagId,
                                position.getLineNo() + aLineNo,
                                position.getColumnNo(),
                                closedTag,
                                incompleteTag,
                                aText[position.getLineNo()]));
                position = endTag;
            }
            position = findChar(aText, '<', position);
        }
    }

