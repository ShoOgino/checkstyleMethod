    /**
     * Parses the text line for any HTML tags and adds them to the internal
     * List of tags.
     * @param text the source line to parse.
     * @param lineNo the source line number.
     */
    private void parseTags(String[] text, int lineNo) {
        final int nLines = text.length;
        Point position = new Point(0, 0);

        position = findChar(text, '<', position);
        while (position.getLineNo() < nLines) {
            // if this is html comment then skip it
            if (isCommentTag(text, position)) {
                position = skipHtmlComment(text, position);
            }
            else if (!isTag(text, position)) {
                position = getNextCharPos(text, position);
            }
            else {
                // find end of tag
                final Point endTag = findChar(text, '>', position);
                final boolean incompleteTag = endTag.getLineNo() >= nLines;
                // get tag id (one word)
                final String tagId;

                if (incompleteTag) {
                    tagId = "";
                }
                else {
                    tagId = getTagId(text, position);
                }
                // is this closed tag
                final boolean closedTag =
                        endTag.getLineNo() < nLines
                         && text[endTag.getLineNo()]
                         .charAt(endTag.getColumnNo() - 1) == '/';
                // add new tag
                add(new HtmlTag(tagId,
                                position.getLineNo() + lineNo,
                                position.getColumnNo(),
                                closedTag,
                                incompleteTag,
                                text[position.getLineNo()]));
                position = endTag;
            }
            position = findChar(text, '<', position);
        }
    }

