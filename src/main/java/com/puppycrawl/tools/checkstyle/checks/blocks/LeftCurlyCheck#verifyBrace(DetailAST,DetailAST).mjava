    /**
     * Verifies that a specified left curly brace is placed correctly
     * according to policy.
     * @param brace token for left curly brace
     * @param startToken token for start of expression
     */
    private void verifyBrace(final DetailAST brace,
                             final DetailAST startToken) {
        final String braceLine = getLine(brace.getLineNo() - 1);

        // calculate the previous line length without trailing whitespace. Need
        // to handle the case where there is no previous line, cause the line
        // being check is the first line in the file.
        final int prevLineLen = brace.getLineNo() == 1
            ? maxLineLength
            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));

        // Check for being told to ignore, or have '{}' which is a special case
        if (braceLine.length() <= brace.getColumnNo() + 1
                || braceLine.charAt(brace.getColumnNo() + 1) != '}') {
            if (getAbstractOption() == LeftCurlyOption.NL) {
                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                    log(brace.getLineNo(), brace.getColumnNo(),
                        MSG_KEY_LINE_NEW, "{");
                }
            }
            else if (getAbstractOption() == LeftCurlyOption.EOL) {

                validateEol(brace, braceLine, prevLineLen);
            }
            else if (startToken.getLineNo() != brace.getLineNo()) {

                validateNewLinePosion(brace, startToken, braceLine, prevLineLen);

            }
        }
    }

