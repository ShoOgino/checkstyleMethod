    /**
     * Verifies that a specified left curly brace is placed correctly
     * according to policy.
     * @param brace token for left curly brace
     * @param startToken token for start of expression
     */
    private void verifyBrace(final DetailAST brace,
                             final DetailAST startToken)
    {
        final String braceLine = getLine(brace.getLineNo() - 1);

        // calculate the previous line length without trailing whitespace. Need
        // to handle the case where there is no previous line, cause the line
        // being check is the first line in the file.
        final int prevLineLen = brace.getLineNo() == 1
            ? maxLineLength
            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));

        // Check for being told to ignore, or have '{}' which is a special case
        if (braceLine.length() > brace.getColumnNo() + 1
            && braceLine.charAt(brace.getColumnNo() + 1) == '}')
        {
            ; // ignore
        }
        else if (getAbstractOption() == LeftCurlyOption.NL) {
            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                log(brace.getLineNo(), brace.getColumnNo(),
                    MSG_KEY_LINE_NEW, "{");
            }
        }
        else if (getAbstractOption() == LeftCurlyOption.EOL) {
            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)
                && prevLineLen + 2 <= maxLineLength)
            {
                log(brace.getLineNo(), brace.getColumnNo(),
                    MSG_KEY_LINE_PREVIOUS, "{");
            }
            if (!hasLineBreakAfter(brace)) {
                log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);
            }
        }
        else if (getAbstractOption() == LeftCurlyOption.NLOW) {
            if (startToken.getLineNo() == brace.getLineNo()) {
                ; // all ok as on the same line
            }
            else if (startToken.getLineNo() + 1 == brace.getLineNo()) {
                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                    log(brace.getLineNo(), brace.getColumnNo(),
                        MSG_KEY_LINE_NEW, "{");
                }
                else if (prevLineLen + 2 <= maxLineLength) {
                    log(brace.getLineNo(), brace.getColumnNo(),
                        MSG_KEY_LINE_PREVIOUS, "{");
                }
            }
            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {
                log(brace.getLineNo(), brace.getColumnNo(),
                    MSG_KEY_LINE_NEW, "{");
            }
        }
    }

