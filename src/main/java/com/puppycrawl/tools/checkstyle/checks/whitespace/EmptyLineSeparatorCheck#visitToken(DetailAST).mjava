    @Override
    public void visitToken(DetailAST ast)
    {
        final DetailAST nextToken = ast.getNextSibling();

        if (nextToken != null) {
            final int astType = ast.getType();
            switch (astType) {
                case TokenTypes.VARIABLE_DEF:
                    if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {
                        if (allowNoEmptyLineBetweenFields
                            && nextToken.getType() != TokenTypes.VARIABLE_DEF
                            && nextToken.getType() != TokenTypes.RCURLY)
                        {
                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,
                                 nextToken.getText());
                        }
                        else if ((!allowNoEmptyLineBetweenFields || !allowMultipleEmptyLines)
                                 && nextToken.getType() != TokenTypes.RCURLY)
                        {
                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,
                                 nextToken.getText());
                        }
                    }
                    if (!allowMultipleEmptyLines && isTypeField(ast)
                             && isPrePreviousLineEmpty(ast))
                    {
                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                    }
                    break;
                case TokenTypes.IMPORT:
                    if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)
                        || (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)
                            && ast.getPreviousSibling() == null))
                    {
                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
                    }
                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {
                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                    }
                    break;
                case TokenTypes.PACKAGE_DEF:
                    if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {
                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());
                    }
                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {
                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                    }
                default:
                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {
                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
                    }
                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {
                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
                    }
            }
        }
    }

