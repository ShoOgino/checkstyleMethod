    /**
     * Verifies that a type definition has a required tag.
     * @param lineNo the line number for the type definition.
     * @param comment the Javadoc comment for the type definition.
     */
    private void checkTag(int lineNo, String... comment) {
        if (tagRE == null) {
            return;
        }

        int tagCount = 0;
        for (int i = 0; i < comment.length; i++) {
            final String commentValue = comment[i];
            final Matcher matcher = tagRE.matcher(commentValue);
            if (matcher.find()) {
                tagCount += 1;
                final int contentStart = matcher.start(1);
                final String content = commentValue.substring(contentStart);
                if (tagFormatRE != null && !tagFormatRE.matcher(content).find()) {
                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);
                }
                else {
                    logTag(lineNo + i - comment.length, tag, content);
                }
            }
        }
        if (tagCount == 0) {
            log(lineNo, MISSING_TAG, tag);
        }

    }

