    /**
     * Returns the literal string expression represented by an AST.
     * @param ast an AST node for an EXPR
     * @return the Java string represented by the given AST expression
     * @throws IllegalArgumentException if the AST is invalid
     */
    private static String getStringExpr(DetailAST ast)
    {
        if (ast != null && ast.getType() == TokenTypes.EXPR) {
            final DetailAST firstChild = ast.getFirstChild();
            switch (firstChild.getType()) {
            case TokenTypes.STRING_LITERAL:
                // NOTE: escaped characters are not unescaped
                final String quotedText = firstChild.getText();
                return quotedText.substring(1, quotedText.length() - 1);
            case TokenTypes.IDENT:
                return firstChild.getText();
            default:
                throw new IllegalArgumentException("String literal AST expected: "
                        + firstChild);
            }
        }
        throw new IllegalArgumentException("Expression AST expected: " + ast);
    }

