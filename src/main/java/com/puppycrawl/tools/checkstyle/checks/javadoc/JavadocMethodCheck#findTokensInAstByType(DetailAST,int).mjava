    /**
     * Finds node of specified type among root children, siblings, siblings children
     * on any deep level.
     *
     * @param root    DetailAST
     * @param astType value of TokenType
     * @return {@link List} of {@link DetailAST} nodes which matches the predicate.
     */
    public static List<DetailAST> findTokensInAstByType(DetailAST root, int astType) {
        final List<DetailAST> result = new ArrayList<>();
        // iterative preorder depth-first search
        DetailAST curNode = root;
        do {
            // process curNode
            if (curNode.getType() == astType) {
                result.add(curNode);
            }
            // process children (if any)
            if (curNode.hasChildren()) {
                curNode = curNode.getFirstChild();
                continue;
            }
            // backtrack to parent if last child, stopping at root
            while (curNode != root && curNode.getNextSibling() == null) {
                curNode = curNode.getParent();
            }
            // explore siblings if not root
            if (curNode != root) {
                curNode = curNode.getNextSibling();
            }
        } while (curNode != root);
        return result;
    }

