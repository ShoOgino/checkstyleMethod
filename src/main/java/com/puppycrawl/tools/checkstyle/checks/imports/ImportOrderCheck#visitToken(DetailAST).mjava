    @Override
    public void visitToken(DetailAST ast) {
        final FullIdent ident;
        final boolean isStatic;

        if (ast.getType() == TokenTypes.IMPORT) {
            ident = FullIdent.createFullIdentBelow(ast);
            isStatic = false;
        }
        else {
            ident = FullIdent.createFullIdent(ast.getFirstChild()
                    .getNextSibling());
            isStatic = true;
        }

        final boolean isStaticAndNotLastImport = isStatic && !lastImportStatic;
        final boolean isNotStaticAndLastImport = !isStatic && lastImportStatic;
        final ImportOrderOption abstractOption = getAbstractOption();
        switch (abstractOption) {
            case TOP:
                if (isNotStaticAndLastImport) {
                    lastGroup = Integer.MIN_VALUE;
                    lastImport = "";
                }
                doVisitToken(ident, isStatic, isStaticAndNotLastImport);
                break;

            case BOTTOM:
                if (isStaticAndNotLastImport) {
                    lastGroup = Integer.MIN_VALUE;
                    lastImport = "";
                }
                doVisitToken(ident, isStatic, isNotStaticAndLastImport);
                break;

            case ABOVE:
                // previous non-static but current is static
                doVisitToken(ident, isStatic, isStaticAndNotLastImport);
                break;

            case UNDER:
                doVisitToken(ident, isStatic, isNotStaticAndLastImport);
                break;

            case INFLOW:
                // previous argument is useless here
                doVisitToken(ident, isStatic, true);
                break;

            default:
                throw new IllegalStateException(
                        "Unexpected option for static imports: " + abstractOption.toString());

        }

        lastImportLine = ast.findFirstToken(TokenTypes.SEMI).getLineNo();
        lastImportStatic = isStatic;
        beforeFirstImport = false;
    }

