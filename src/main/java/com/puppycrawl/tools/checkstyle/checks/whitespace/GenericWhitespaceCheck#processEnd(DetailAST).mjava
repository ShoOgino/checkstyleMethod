    /**
     * Checks the token for the end of Generics.
     * @param ast the token to check
     */
    private void processEnd(DetailAST ast)
    {
        final String line = getLine(ast.getLineNo() - 1);
        final int before = ast.getColumnNo() - 1;
        final int after = ast.getColumnNo() + 1;

        if ((0 <= before) && Character.isWhitespace(line.charAt(before))
                && !Utils.whitespaceBefore(before, line))
        {
            log(ast.getLineNo(), before, WS_PRECEDED, ">");
        }

        if (after < line.length()) {

            // Check if the last Generic, in which case must be a whitespace
            // or a '(),[.'.
            if (1 == depth) {
                final char charAfter = line.charAt(after);

                // Need to handle a number of cases. First is:
                //    Collections.<Object>emptySet();
                //                        ^
                //                        +--- whitespace not allowed
                if ((ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)
                    && (ast.getParent().getParent().getType()
                        == TokenTypes.DOT)
                    && (ast.getParent().getParent().getParent().getType()
                        == TokenTypes.METHOD_CALL))
                {
                    if (Character.isWhitespace(charAfter)) {
                        log(ast.getLineNo(), after, WS_FOLLOWED, ">");
                    }
                }
                else if (!Character.isWhitespace(charAfter)
                    && ('(' != charAfter) && (')' != charAfter)
                    && (',' != charAfter) && ('[' != charAfter)
                    && ('.' != charAfter) && (':' != charAfter))
                {
                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, ">");
                }
            }
            else {
                // In a nested Generic type, so can only be a '>' or ',' or '&'

                // In case of several extends definitions:
                //
                //   class IntEnumValueType<E extends Enum<E> & IntEnum>
                //                                          ^
                //   should be whitespace if followed by & -+
                //
                final int indexOfAmp = line.indexOf('&', after);
                if ((indexOfAmp != -1)
                    && whitespaceBetween(after, indexOfAmp, line))
                {
                    if (indexOfAmp - after == 0) {
                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, "&");
                    }
                    else if (indexOfAmp - after != 1) {
                        log(ast.getLineNo(), after, WS_FOLLOWED, ">");
                    }
                }
                else if (line.charAt(after) == ' ') {
                    log(ast.getLineNo(), after, WS_FOLLOWED, ">");
                }
            }
        }
    }

