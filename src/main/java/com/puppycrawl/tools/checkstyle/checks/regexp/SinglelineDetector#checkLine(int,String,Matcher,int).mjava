    /**
     * Check a line for matches.
     * @param lineno the line number of the line to check
     * @param line the line to check
     * @param matcher the matcher to use
     * @param startPosition the position to start searching from.
     */
    private void checkLine(int lineno, String line, Matcher matcher,
            int startPosition)
    {
        final boolean foundMatch = matcher.find(startPosition);
        if (!foundMatch) {
            return;
        }

        // match is found, check for intersection with comment
        final int startCol = matcher.start(0);
        final int endCol = matcher.end(0);
        // Note that Matcher.end(int) returns the offset AFTER the
        // last matched character, but shouldSuppress()
        // needs column number of the last character.
        // So we need to use (endCol - 1) here.
        if (options.getSuppressor()
                .shouldSuppress(lineno, startCol, lineno, endCol - 1))
        {
            if (endCol < line.length()) {
                // check if the expression is on the rest of the line
                checkLine(lineno, line, matcher, endCol);
            }
            return; // end processing here
        }

        currentMatches++;
        if (currentMatches > options.getMaximum()) {
            if ("".equals(options.getMessage())) {
                options.getReporter().log(lineno, "regexp.exceeded",
                        matcher.pattern().toString());
            }
            else {
                options.getReporter().log(lineno, options.getMessage());
            }
        }
    }

