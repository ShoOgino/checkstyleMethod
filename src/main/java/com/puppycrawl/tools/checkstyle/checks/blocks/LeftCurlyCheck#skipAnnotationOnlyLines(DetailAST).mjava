    /**
     * Skip lines that only contain {@code TokenTypes.ANNOTATION}s.
     * If the received {@code DetailAST}
     * has annotations within its modifiers then first token on the line
     * of the first token after all annotations is return. This might be
     * an annotation.
     * Otherwise, the received {@code DetailAST} is returned.
     * @param ast {@code DetailAST}.
     * @return {@code DetailAST}.
     */
    private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {
        DetailAST resultNode = ast;
        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);

        if (modifiers != null) {
            DetailAST lastAnnotation = findLastAnnotation(modifiers);

            if (lastAnnotation != null) {
                final DetailAST tokenAfterLast;

                if (lastAnnotation.getNextSibling() == null) {
                    tokenAfterLast = modifiers.getNextSibling();
                }
                else {
                    tokenAfterLast = lastAnnotation.getNextSibling();
                }

                if (tokenAfterLast.getLineNo() > lastAnnotation.getLineNo()) {
                    resultNode = tokenAfterLast;
                }
                else {
                    final int lastAnnotationLineNumber = lastAnnotation.getLineNo();
                    while (lastAnnotation.getPreviousSibling() != null
                           && lastAnnotation.getPreviousSibling().getLineNo()
                               == lastAnnotationLineNumber) {

                        lastAnnotation = lastAnnotation.getPreviousSibling();
                    }
                    resultNode = lastAnnotation;
                }
            }
        }
        return resultNode;
    }

