    /**
     * Skip lines that only contain {@code TokenTypes.ANNOTATION}s.
     * If the received {@code DetailAST}
     * has annotations within its modifiers then first token on the line
     * of the first token afer all annotations is return. This might be
     * an annotation.
     * Otherwise, the received {@code DetailAST} is returned.
     * @param ast {@code DetailAST}.
     * @return {@code DetailAST}.
     */
    private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {
        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
        if (modifiers == null) {
            return ast;
        }
        DetailAST lastAnnot = findLastAnnotation(modifiers);
        if (lastAnnot == null) {
            // There are no annotations.
            return ast;
        }
        final DetailAST tokenAfterLast;

        if (lastAnnot.getNextSibling() == null) {
            tokenAfterLast = modifiers.getNextSibling();
        }
        else {
            tokenAfterLast = lastAnnot.getNextSibling();
        }

        if (tokenAfterLast.getLineNo() > lastAnnot.getLineNo()) {
            return tokenAfterLast;
        }
        final int lastAnnotLineNumber = lastAnnot.getLineNo();
        while (lastAnnot.getPreviousSibling() != null
               && lastAnnot.getPreviousSibling().getLineNo() == lastAnnotLineNumber) {
            lastAnnot = lastAnnot.getPreviousSibling();
        }
        return lastAnnot;
    }

