    /**
     * Returns whether a package or class is allowed to be imported.
     * The algorithm checks with the current node for a result, and if none is
     * found then calls its parent looking for a match. This will recurse
     * looking for match. If there is no clear result then
     * {@link AccessResult#UNKNOWN} is returned.
     * @param inPkg the package doing the import.
     * @param inFileName the file name doing the import.
     * @param forImport the import to check on.
     * @return an {@link AccessResult}.
     */
    public AccessResult checkAccess(String inPkg, String inFileName, String forImport) {
        final AccessResult result;
        final AccessResult returnValue = localCheckAccess(inPkg, inFileName, forImport);
        if (returnValue != AccessResult.UNKNOWN) {
            result = returnValue;
        }
        else if (parent == null) {
            if (strategyOnMismatch == MismatchStrategy.ALLOWED) {
                result = AccessResult.ALLOWED;
            }
            else {
                result = AccessResult.DISALLOWED;
            }
        }
        else {
            if (strategyOnMismatch == MismatchStrategy.ALLOWED) {
                result = AccessResult.ALLOWED;
            }
            else if (strategyOnMismatch == MismatchStrategy.DISALLOWED) {
                result = AccessResult.DISALLOWED;
            }
            else {
                result = parent.checkAccess(inPkg, inFileName, forImport);
            }
        }
        return result;
    }

