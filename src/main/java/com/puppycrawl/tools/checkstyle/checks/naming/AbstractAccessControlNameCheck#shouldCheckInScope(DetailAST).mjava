    /**
     * Should we check member with given modifiers.
     *
     * @param modifiers
     *                modifiers of member to check.
     * @return true if we should check such member.
     */
    protected boolean shouldCheckInScope(DetailAST modifiers)
    {
        if (modifiers == null) {
            // if there are no modifiers it is a package-private
            return applyToPackage;
        }

        final boolean isPublic = modifiers
                .branchContains(TokenTypes.LITERAL_PUBLIC);
        final boolean isProtected = modifiers
                .branchContains(TokenTypes.LITERAL_PROTECTED);
        final boolean isPrivate = modifiers
                .branchContains(TokenTypes.LITERAL_PRIVATE);
        final boolean isPackage = !(isPublic || isProtected || isPrivate);

        return applyToPublic && isPublic
                || applyToProtected && isProtected
                || applyToPackage && isPackage
                || applyToPrivate && isPrivate;
    }

