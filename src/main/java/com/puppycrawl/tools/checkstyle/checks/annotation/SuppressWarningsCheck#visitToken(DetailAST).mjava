    /** {@inheritDoc} */
    @Override
    public void visitToken(final DetailAST ast) {
        final DetailAST annotation = this.getSuppressWarnings(ast);

        if (annotation == null) {
            return;
        }

        final DetailAST warningHolder =
            this.findWarningsHolder(annotation);

        final DetailAST token =
                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
        DetailAST warning;

        if (token != null) {
            // case like '@SuppressWarnings(value = UNUSED)'
            warning = token.findFirstToken(TokenTypes.EXPR);
        }
        else {
            warning = warningHolder.findFirstToken(TokenTypes.EXPR);
        }

        //rare case with empty array ex: @SuppressWarnings({})
        if (warning == null) {
            //check to see if empty warnings are forbidden -- are by default
            this.logMatch(warningHolder.getLineNo(),
                warningHolder.getColumnNo(), "");
            return;
        }

        while (warning != null) {
            if (warning.getType() == TokenTypes.EXPR) {
                final DetailAST fChild = warning.getFirstChild();
                switch (fChild.getType()) {
                    //typical case
                    case TokenTypes.STRING_LITERAL:
                        final String warningText =
                            this.removeQuotes(warning.getFirstChild().getText());
                        this.logMatch(warning.getLineNo(),
                                warning.getColumnNo(), warningText);
                        break;
                        //conditional case
                        //ex: @SuppressWarnings((false) ? (true) ? "unchecked" : "foo" : "unused")
                    case TokenTypes.QUESTION:
                        this.walkConditional(fChild);
                        break;
                        //param in constant case
                        //ex: public static final String UNCHECKED = "unchecked";
                        //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)
                    case TokenTypes.IDENT:
                    case TokenTypes.DOT:
                        break;
                    default:
                        // #1252 - cases like @SuppressWarnings("un" + "used") or
                        // @SuppressWarnings((String) "unused")
                }
            }
            warning = warning.getNextSibling();
        }
    }

