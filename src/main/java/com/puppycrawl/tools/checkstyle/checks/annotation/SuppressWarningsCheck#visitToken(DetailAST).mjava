    @Override
    public void visitToken(final DetailAST ast) {
        final DetailAST annotation = getSuppressWarnings(ast);

        if (annotation != null) {
            final DetailAST warningHolder =
                findWarningsHolder(annotation);

            final DetailAST token =
                    warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
            DetailAST warning;

            if (token == null) {
                warning = warningHolder.findFirstToken(TokenTypes.EXPR);
            }
            else {
                // case like '@SuppressWarnings(value = UNUSED)'
                warning = token.findFirstToken(TokenTypes.EXPR);
            }

            // rare case with empty array ex: @SuppressWarnings({})
            if (warning == null) {
                // check to see if empty warnings are forbidden -- are by default
                logMatch(warningHolder, "");
            }
            else {
                while (warning != null) {
                    if (warning.getType() == TokenTypes.EXPR) {
                        final DetailAST fChild = warning.getFirstChild();
                        switch (fChild.getType()) {
                            // typical case
                            case TokenTypes.STRING_LITERAL:
                                final String warningText =
                                    removeQuotes(warning.getFirstChild().getText());
                                logMatch(warning, warningText);
                                break;
                            // conditional case
                            // ex:
                            // @SuppressWarnings((false) ? (true) ? "unchecked" : "foo" : "unused")
                            case TokenTypes.QUESTION:
                                walkConditional(fChild);
                                break;
                            // param in constant case
                            // ex: public static final String UNCHECKED = "unchecked";
                            // @SuppressWarnings(UNCHECKED)
                            // or
                            // @SuppressWarnings(SomeClass.UNCHECKED)
                            case TokenTypes.IDENT:
                            case TokenTypes.DOT:
                                break;
                            default:
                                // Known limitation: cases like @SuppressWarnings("un" + "used") or
                                // @SuppressWarnings((String) "unused") are not properly supported,
                                // but they should not cause exceptions.
                        }
                    }
                    warning = warning.getNextSibling();
                }
            }
        }
    }

