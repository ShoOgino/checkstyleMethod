    /**
     * Attempts to resolve the Class for a specified name. The algorithm is
     * to check:
     * - fully qualified name
     * - explicit imports
     * - enclosing package
     * - star imports
     * @param name name of the class to resolve
     * @param currentClass name of current class (for inner classes).
     * @return the resolved class
     * @throws ClassNotFoundException if unable to resolve the class
     */
    // -@cs[ForbidWildcardAsReturnType] This method can return any type, so no way to avoid wildcard
    public Class<?> resolve(String name, String currentClass)
            throws ClassNotFoundException {
        // See if the class is full qualified
        Class<?> clazz = resolveQualifiedName(name);
        if (clazz == null) {
            // try matching explicit imports
            clazz = resolveMatchingExplicitImport(name);

            if (clazz == null) {
                // See if in the package
                clazz = resolveInPackage(name);

                if (clazz == null) {
                    // see if inner class of this class
                    clazz = resolveInnerClass(name, currentClass);

                    if (clazz == null) {
                        clazz = resolveByStarImports(name);
                        // -@cs[NestedIfDepth] it is better to have single return point from method
                        if (clazz == null) {
                            // Giving up, the type is unknown, so load the class to generate an
                            // exception
                            clazz = safeLoad(name);
                        }
                    }
                }
            }
        }
        return clazz;
    }

