    @Override
    public void visitToken(DetailAST ast)
    {
        final Details details = getDetails(ast);
        final DetailAST rcurly = details.rcurly;

        if (rcurly == null || rcurly.getType() != TokenTypes.RCURLY) {
            // we need to have both tokens to perform the check
            return;
        }

        final DetailAST lcurly = details.lcurly;
        final DetailAST nextToken = details.nextToken;
        final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;

        if (getAbstractOption() == RightCurlyOption.SAME && !hasLineBreakBefore(rcurly)) {
            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);
        }

        if (shouldCheckLastRcurly) {
            if (rcurly.getLineNo() == nextToken.getLineNo()) {
                log(rcurly, MSG_KEY_LINE_ALONE, "}");
            }
        }
        else if (getAbstractOption() == RightCurlyOption.SAME
                && rcurly.getLineNo() != nextToken.getLineNo())
        {
            log(rcurly, MSG_KEY_LINE_SAME, "}");
        }
        else if (getAbstractOption() == RightCurlyOption.ALONE
                && rcurly.getLineNo() == nextToken.getLineNo()
                && !isEmptyBody(lcurly))
        {
            log(rcurly, MSG_KEY_LINE_ALONE, "}");
        }

        if (!shouldStartLine) {
            return;
        }
        final boolean startsLine =
                Utils.whitespaceBefore(rcurly.getColumnNo(),
                        getLines()[rcurly.getLineNo() - 1]);

        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {
            log(rcurly, MSG_KEY_LINE_NEW, "}");
        }
    }

