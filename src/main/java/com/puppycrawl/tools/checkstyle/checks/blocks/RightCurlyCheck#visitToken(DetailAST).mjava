    @Override
    public void visitToken(DetailAST aAST)
    {
        // Attempt to locate the tokens to do the check
        DetailAST rcurly;
        DetailAST lcurly;
        DetailAST nextToken;
        boolean shouldCheckLastRcurly = false;

        switch (aAST.getType()) {
        case TokenTypes.LITERAL_TRY:
            lcurly = aAST.getFirstChild();
            nextToken = lcurly.getNextSibling();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.LITERAL_CATCH:
            nextToken = aAST.getNextSibling();
            lcurly = aAST.getLastChild();
            rcurly = lcurly.getLastChild();
            if (nextToken == null) {
                shouldCheckLastRcurly = true;
                nextToken = getNextToken(aAST);
            }
            break;
        case TokenTypes.LITERAL_IF:
            nextToken = aAST.findFirstToken(TokenTypes.LITERAL_ELSE);
            if (nextToken != null) {
                lcurly = nextToken.getPreviousSibling();
                rcurly = lcurly.getLastChild();
            }
            else {
                shouldCheckLastRcurly = true;
                nextToken = getNextToken(aAST);
                lcurly = aAST.getLastChild();
                rcurly = lcurly.getLastChild();
            }
            break;
        case TokenTypes.LITERAL_ELSE:
            shouldCheckLastRcurly = true;
            nextToken = getNextToken(aAST);
            lcurly = aAST.getFirstChild();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.LITERAL_FINALLY:
            shouldCheckLastRcurly = true;
            nextToken = getNextToken(aAST);
            lcurly = aAST.getFirstChild();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.CLASS_DEF:
            final DetailAST child = aAST.getLastChild();
            lcurly = child.getFirstChild();
            rcurly = child.getLastChild();
            nextToken = aAST;
            break;
        case TokenTypes.CTOR_DEF:
        case TokenTypes.STATIC_INIT:
        case TokenTypes.INSTANCE_INIT:
            lcurly = aAST.findFirstToken(TokenTypes.SLIST);
            rcurly = lcurly.getLastChild();
            nextToken = aAST;
            break;
        case TokenTypes.METHOD_DEF:
        case TokenTypes.LITERAL_FOR:
        case TokenTypes.LITERAL_WHILE:
        case TokenTypes.LITERAL_DO:
            lcurly = aAST.findFirstToken(TokenTypes.SLIST);
            //SLIST could be absent if method is abstract, and code like "while(true);"
            if (lcurly == null) {
                return;
            }
            rcurly = lcurly.getLastChild();
            nextToken = aAST;
            break;
        default:
            throw new RuntimeException("Unexpected token type ("
                    + TokenTypes.getTokenName(aAST.getType()) + ")");
        }

        if ((rcurly == null) || (rcurly.getType() != TokenTypes.RCURLY)) {
            // we need to have both tokens to perform the check
            return;
        }

        if (getAbstractOption() == RightCurlyOption.SAME && !hasLineBreakBefore(rcurly)) {
            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);
        }

        if (shouldCheckLastRcurly) {
            if (rcurly.getLineNo() == nextToken.getLineNo()) {
                log(rcurly, MSG_KEY_LINE_ALONE, "}");
            }
        }
        else if ((getAbstractOption() == RightCurlyOption.SAME)
                && (rcurly.getLineNo() != nextToken.getLineNo()))
        {
            log(rcurly, MSG_KEY_LINE_SAME, "}");
        }
        else if ((getAbstractOption() == RightCurlyOption.ALONE)
                && (rcurly.getLineNo() == nextToken.getLineNo())
                && !isEmptyBody(lcurly))
        {
            log(rcurly, MSG_KEY_LINE_ALONE, "}");
        }

        if (!mShouldStartLine) {
            return;
        }
        final boolean startsLine =
                Utils.whitespaceBefore(rcurly.getColumnNo(),
                        getLines()[rcurly.getLineNo() - 1]);

        if (!startsLine && (lcurly.getLineNo() != rcurly.getLineNo())) {
            log(rcurly, MSG_KEY_LINE_NEW, "}");
        }
    }

