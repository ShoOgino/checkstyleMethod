    /**
     * Does general validation.
     * @param details for validation.
     * @param bracePolicy for placing the right curly brace.
     * @param shouldStartLine do we need to check if right curly starts line.
     * @param targetSourceLine line that we need to check if shouldStartLine is true.
     * @return violation message or empty string
     *     if there was not violation during validation.
     */
    private static String validate(Details details, RightCurlyOption bracePolicy,
                                   boolean shouldStartLine, String targetSourceLine) {
        final DetailAST rcurly = details.rcurly;
        final DetailAST lcurly = details.lcurly;
        final DetailAST nextToken = details.nextToken;
        final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;
        String violation = "";

        if (bracePolicy == RightCurlyOption.SAME
                && !hasLineBreakBefore(rcurly)
                && lcurly.getLineNo() != rcurly.getLineNo()) {
            violation = MSG_KEY_LINE_BREAK_BEFORE;
        }
        else if (shouldCheckLastRcurly) {
            if (rcurly.getLineNo() == nextToken.getLineNo()) {
                violation = MSG_KEY_LINE_ALONE;
            }
        }
        else if (shouldBeOnSameLine(bracePolicy, details)) {
            violation = MSG_KEY_LINE_SAME;
        }
        else if (shouldBeAloneOnLine(bracePolicy, details)) {
            violation = MSG_KEY_LINE_ALONE;
        }
        else if (shouldStartLine && !startsLine(details, targetSourceLine)) {
            violation = MSG_KEY_LINE_NEW;
        }
        return violation;
    }

