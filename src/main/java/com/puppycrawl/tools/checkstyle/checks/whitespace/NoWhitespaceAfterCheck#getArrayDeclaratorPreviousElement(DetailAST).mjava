    /**
     * Returns proper argument for getPositionAfter method, it is a token after
     * {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR}, in can be {@link TokenTypes#RBRACK
     * RBRACK}, {@link TokenTypes#IDENT IDENT} or an array type definition (literal).
     *
     * @param ast
     *        , {@link TokenTypes#ARRAY_DECLARATOR ARRAY_DECLARATOR} node.
     * @return previous node by text order.
     */
    private static DetailAST getArrayDeclaratorPreviousElement(DetailAST ast) {
        final DetailAST previousElement;
        final DetailAST firstChild = ast.getFirstChild();
        if (firstChild.getType() == TokenTypes.ARRAY_DECLARATOR) {
            // second or higher array index
            previousElement = firstChild.findFirstToken(TokenTypes.RBRACK);
        }
        else {
            // first array index, is preceded with identifier or type
            final DetailAST parent = getFirstNonArrayDeclaratorParent(ast);
            switch (parent.getType()) {
                // generics
                case TokenTypes.TYPE_ARGUMENT:
                    final DetailAST wildcard = parent.findFirstToken(TokenTypes.WILDCARD_TYPE);
                    if (wildcard == null) {
                        // usual generic type argument like <char[]>
                        previousElement = getTypeLastNode(ast);
                    }
                    else {
                        // constructions with wildcard like <? extends String[]>
                        previousElement = getTypeLastNode(ast.getFirstChild());
                    }
                    break;
                // 'new' is a special case with its own subtree structure
                case TokenTypes.LITERAL_NEW:
                    previousElement = getTypeLastNode(parent);
                    break;
                // mundane array declaration, can be either java style or C style
                case TokenTypes.TYPE:
                    previousElement = getPreviousNodeWithParentOfTypeAst(ast, parent);
                    break;
                // i.e. boolean[].class
                case TokenTypes.DOT:
                    previousElement = getTypeLastNode(ast);
                    break;
                // java 8 method reference
                case TokenTypes.METHOD_REF:
                    final DetailAST ident = getIdentLastToken(ast);
                    if (ident == null) {
                        // i.e. int[]::new
                        previousElement = ast.getFirstChild();
                    }
                    else {
                        previousElement = ident;
                    }
                    break;
                default:
                    throw new IllegalStateException("unexpected ast syntax " + parent);
            }
        }
        return previousElement;
    }

