    /** recursive method that finds the matches. */
    private void findMatch() {
        final boolean foundMatch = matcher.find();
        if (!foundMatch) {
            return;
        }

        final LineColumn start = text.lineColumn(matcher.start());
        final LineColumn end = text.lineColumn(matcher.end());

        if (!options.getSuppressor().shouldSuppress(start.getLine(),
                start.getColumn(), end.getLine(), end.getColumn())) {
            currentMatches++;
            if (currentMatches > options.getMaximum()) {
                if ("".equals(options.getMessage())) {
                    options.getReporter().log(start.getLine(),
                            REGEXP_EXCEEDED, matcher.pattern().toString());
                }
                else {
                    options.getReporter()
                            .log(start.getLine(), options.getMessage());
                }
            }
        }
        findMatch();
    }

