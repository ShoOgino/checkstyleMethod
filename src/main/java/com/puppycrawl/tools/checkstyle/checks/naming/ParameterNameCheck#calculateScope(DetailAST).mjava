    /**
     * Returns the scope for the method/constructor at the specified AST. If
     * the method is in an interface or annotation block, the scope is assumed
     * to be public.
     *
     * @param ast the token of the method/constructor
     * @return the scope of the method/constructor
     */
    private static Scope calculateScope(final DetailAST ast) {
        final DetailAST params = ast.getParent();
        final DetailAST meth = params.getParent();
        Scope scope = Scope.PRIVATE;

        if (meth.getType() == TokenTypes.METHOD_DEF
            || meth.getType() == TokenTypes.CTOR_DEF) {
            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {
                scope = Scope.PUBLIC;
            }
            else {
                final DetailAST mods = meth.findFirstToken(TokenTypes.MODIFIERS);
                scope = ScopeUtils.getScopeFromMods(mods);
            }
        }

        return scope;
    }

