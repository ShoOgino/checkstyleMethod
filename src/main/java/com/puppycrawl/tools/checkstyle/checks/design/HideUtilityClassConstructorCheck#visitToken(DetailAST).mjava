    @Override
    public void visitToken(DetailAST ast) {
        if (isAbstract(ast)) {
            // abstract class could not have private constructor
            return;
        }

        final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
        DetailAST child = objBlock.getFirstChild();
        final boolean hasStaticModifier = isStatic(ast);
        boolean hasMethodOrField = false;
        boolean hasNonStaticMethodOrField = false;
        boolean hasNonPrivateStaticMethodOrField = false;
        boolean hasDefaultCtor = true;
        boolean hasPublicCtor = false;

        while (child != null) {
            final int type = child.getType();
            if (type == TokenTypes.METHOD_DEF
                    || type == TokenTypes.VARIABLE_DEF) {
                hasMethodOrField = true;
                final DetailAST modifiers =
                    child.findFirstToken(TokenTypes.MODIFIERS);
                final boolean isStatic =
                    modifiers.branchContains(TokenTypes.LITERAL_STATIC);
                final boolean isPrivate =
                    modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);

                if (!isStatic && !isPrivate) {
                    hasNonStaticMethodOrField = true;
                }
                if (isStatic && !isPrivate) {
                    hasNonPrivateStaticMethodOrField = true;
                }
            }
            if (type == TokenTypes.CTOR_DEF) {
                hasDefaultCtor = false;
                final DetailAST modifiers =
                    child.findFirstToken(TokenTypes.MODIFIERS);
                if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)
                    && !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {
                    // treat package visible as public
                    // for the purpose of this Check
                    hasPublicCtor = true;
                }

            }
            child = child.getNextSibling();
        }

        final boolean hasAccessibleCtor = hasDefaultCtor || hasPublicCtor;

        // figure out if class extends java.lang.object directly
        // keep it simple for now and get a 99% solution
        final boolean extendsJLO = // J.Lo even made it into in our sources :-)
            ast.findFirstToken(TokenTypes.EXTENDS_CLAUSE) == null;

        final boolean isUtilClass = extendsJLO && hasMethodOrField
            && !hasNonStaticMethodOrField && hasNonPrivateStaticMethodOrField;

        if (isUtilClass && hasAccessibleCtor && !hasStaticModifier) {
            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
        }
    }

