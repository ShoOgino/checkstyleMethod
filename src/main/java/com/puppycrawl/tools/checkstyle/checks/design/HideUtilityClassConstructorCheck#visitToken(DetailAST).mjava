    @Override
    public void visitToken(DetailAST ast) {
        if (isAbstract(ast)) {
            // abstract class could not have private constructor
            return;
        }
        final boolean hasStaticModifier = isStatic(ast);

        final Details details = new Details(ast);
        details.invoke();

        final boolean hasDefaultCtor = details.isHasDefaultCtor();
        final boolean hasPublicCtor = details.isHasPublicCtor();
        final boolean hasMethodOrField = details.isHasMethodOrField();
        final boolean hasNonStaticMethodOrField = details.isHasNonStaticMethodOrField();
        final boolean hasNonPrivateStaticMethodOrField =
                details.isHasNonPrivateStaticMethodOrField();

        final boolean hasAccessibleCtor = hasDefaultCtor || hasPublicCtor;

        // figure out if class extends java.lang.object directly
        // keep it simple for now and get a 99% solution
        final boolean extendsJLO = // J.Lo even made it into in our sources :-)
            ast.findFirstToken(TokenTypes.EXTENDS_CLAUSE) == null;

        final boolean isUtilClass = extendsJLO && hasMethodOrField
            && !hasNonStaticMethodOrField && hasNonPrivateStaticMethodOrField;

        if (isUtilClass && hasAccessibleCtor && !hasStaticModifier) {
            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
        }
    }

