    @Override
    public void checkIndentation()
    {
        final DetailAST exprNode = getMainAst().getParent();
        if (exprNode.getParent().getType() != TokenTypes.LCURLY
            && exprNode.getParent().getType() != TokenTypes.SLIST)
        {
            return;
        }
        final DetailAST methodName = getMainAst().getFirstChild();
        checkExpressionSubtree(methodName, getLevel(), false, false);

        final DetailAST lparen = getMainAst();
        final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);
        checkLParen(lparen);

        if (rparen.getLineNo() == lparen.getLineNo()) {
            return;
        }

        checkExpressionSubtree(
            getMainAst().findFirstToken(TokenTypes.ELIST),
            new IndentLevel(getLevel(), getBasicOffset()),
            false, true);

        checkRParen(lparen, rparen);
        final LineWrappingHandler lineWrap =
            new LineWrappingHandler(getIndentCheck(), getMainAst()) {
                @Override
                public DetailAST findLastNode(DetailAST firstNode)
                {
                    DetailAST lastNode;
                    if (getFirstNode().getNextSibling() == null) {
                        lastNode = getFirstNode().getLastChild();
                    }
                    else {
                        lastNode = getFirstNode().getNextSibling();
                    }
                    return lastNode;
                }

                @Override
                public int getCurrentIndentation()
                {
                    DetailAST curNode = getFirstNode();
                    while (curNode.getType() != TokenTypes.IDENT) {
                        curNode = curNode.getFirstChild();
                    }
                    return curNode.getColumnNo() + getIndentLevel();
                }
            };
        lineWrap.checkIndentation();
    }

