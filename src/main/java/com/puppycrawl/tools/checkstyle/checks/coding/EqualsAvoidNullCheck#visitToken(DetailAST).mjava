    @Override
    public void visitToken(final DetailAST methodCall)
    {
        final DetailAST dot = methodCall.getFirstChild();
        if (dot.getType() != TokenTypes.DOT) {
            return;
        }

        final DetailAST objCalledOn = dot.getFirstChild();

        //checks for calling equals on String literal and
        //anon object which cannot be null
        //Also, checks if calling using strange inner class
        //syntax outter.inner.equals(otherObj) by looking
        //for the dot operator which cannot be improved
        if ((objCalledOn.getType() == TokenTypes.STRING_LITERAL)
                || (objCalledOn.getType() == TokenTypes.LITERAL_NEW)
                || (objCalledOn.getType() == TokenTypes.DOT))
        {
            return;
        }

        final DetailAST method = objCalledOn.getNextSibling();
        final DetailAST expr = dot.getNextSibling().getFirstChild();

        if ("equals".equals(method.getText())
            && containsOneArg(expr) && containsAllSafeTokens(expr))
        {
            log(methodCall.getLineNo(), methodCall.getColumnNo(),
                MSG_EQUALS_AVOID_NULL);
        }

        if (!ignoreEqualsIgnoreCase
            && "equalsIgnoreCase".equals(method.getText())
            && containsOneArg(expr) && containsAllSafeTokens(expr))
        {
            log(methodCall.getLineNo(), methodCall.getColumnNo(),
                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);
        }
    }

