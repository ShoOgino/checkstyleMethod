    /**
     * Returns whether an AST represents a getter method.
     * @param ast the AST to check with
     * @return whether the AST represents a getter method
     */
    private static boolean isGetterMethod(final DetailAST ast) {
        // Check have a method with exactly 7 children which are all that
        // is allowed in a proper getter method which does not throw any
        // exceptions.
        if (ast.getType() != TokenTypes.METHOD_DEF
                || ast.getChildCount() != MAX_CHILDREN) {
            return false;
        }

        // Check the name matches format of getX or isX. Technically I should
        // check that the format isX is only used with a boolean type.
        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
        final String name = type.getNextSibling().getText();
        if (!name.matches("^(is|get)[A-Z].*")) { // Depends on JDK 1.4
            return false;
        }

        // Check the return type is void
        if (type.getChildCount(TokenTypes.LITERAL_VOID) > 0) {
            return false;
        }

        // Check that is had only one parameter
        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
        if (params == null
                || params.getChildCount(TokenTypes.PARAMETER_DEF) > 0) {
            return false;
        }

        // Now verify that the body consists of:
        // SLIST -> RETURN
        // RCURLY
        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
        if (slist == null || slist.getChildCount() != 2) {
            return false;
        }

        final AST expr = slist.getFirstChild();
        return expr.getType() == TokenTypes.LITERAL_RETURN
                && expr.getFirstChild().getType() == TokenTypes.EXPR;

    }

