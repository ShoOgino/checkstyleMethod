    /**
     * Makes drop to the specified component.
     * @param component Target component to drop to.
     * @param recursive Whether to recursively find the specified component.
     * @throws TooManyListenersException When more than one listener registered
     *     on the particular event.
     */
    private void makeDropTarget(final Component component, boolean recursive)
            throws TooManyListenersException {
        // Make drop target
        final DropTarget dt = new DropTarget();
        dt.addDropTargetListener(dropListener);

        // Listen for hierarchy changes and remove the
        // drop target when the parent gets cleared out.
        component.addHierarchyListener(new HierarchyListener() {
            @Override
            public void hierarchyChanged(HierarchyEvent evt) {
                final Component parent = component.getParent();
                if (parent == null) {
                    component.setDropTarget(null);
                }
                else {
                    new DropTarget(component, dropListener);
                }
            }
        });

        if (component.getParent() != null) {
            new DropTarget(component, dropListener);
        }

        if (recursive && component instanceof Container) {
            final Container cont = (Container) component;
            final Component[] comps = cont.getComponents();
            for (Component element : comps) {
                makeDropTarget(element, recursive);
            }
        }
    }

