    /**
     * Checks if the AST is annotated with the passed in annotation
     * and returns the AST representing that annotation.
     *
     * <p>
     * This method will not look for imports or package
     * statements to detect the passed in annotation.
     * </p>
     *
     * <p>
     * To check if an AST contains a passed in annotation
     * taking into account fully-qualified names
     * (ex: java.lang.Override, Override)
     * this method will need to be called twice. Once for each
     * name given.
     * </p>
     *
     * @param ast the current node
     * @param annotation the annotation name to check for
     * @return the AST representing that annotation
     */
    public static DetailAST getAnnotation(final DetailAST ast,
        String annotation) {
        if (ast == null) {
            throw new IllegalArgumentException(THE_AST_IS_NULL);
        }

        if (annotation == null) {
            throw new IllegalArgumentException("the annotation is null");
        }

        if (CommonUtil.isBlank(annotation)) {
            throw new IllegalArgumentException(
                    "the annotation is empty or spaces");
        }

        return findFirstAnnotation(ast, annotationNode -> {
            final DetailAST firstChild = annotationNode.findFirstToken(TokenTypes.AT);
            final String name =
                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();
            return annotation.equals(name);
        });
    }

