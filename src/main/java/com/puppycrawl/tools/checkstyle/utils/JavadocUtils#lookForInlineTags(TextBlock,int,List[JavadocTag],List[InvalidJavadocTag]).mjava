    /**
     * Looks for inline tags in comment and adds them to the proper tags collection.
     * @param comment comment text block
     * @param lineNumber line number in the comment
     * @param validTags collection of valid tags
     * @param invalidTags collection of invalid tags
     */
    private static void lookForInlineTags(TextBlock comment, int lineNumber,
            final List<JavadocTag> validTags, final List<InvalidJavadocTag> invalidTags) {
        final String text = comment.getText()[lineNumber];
        // Match Javadoc text after comment characters
        final Matcher commentMatcher = COMMENT_PATTERN.matcher(text);
        final String commentContents;

        // offset including comment characters
        final int commentOffset;

        if (commentMatcher.find()) {
            commentContents = commentMatcher.group(1);
            commentOffset = commentMatcher.start(1) - 1;
        }
        else {
            // No leading asterisks, still valid
            commentContents = text;
            commentOffset = 0;
        }
        final Matcher tagMatcher = INLINE_TAG_PATTERN.matcher(commentContents);
        while (tagMatcher.find()) {
            final String tagName = tagMatcher.group(1);
            final String tagValue = tagMatcher.group(2).trim();
            final int line = comment.getStartLineNo() + lineNumber;
            int col = commentOffset + tagMatcher.start(1) - 1;
            if (lineNumber == 0) {
                col += comment.getStartColNo();
            }
            if (JavadocTagInfo.isValidName(tagName)) {
                validTags.add(new JavadocTag(line, col, tagName,
                        tagValue));
            }
            else {
                invalidTags.add(new InvalidJavadocTag(line, col,
                        tagName));
            }
        }
    }

