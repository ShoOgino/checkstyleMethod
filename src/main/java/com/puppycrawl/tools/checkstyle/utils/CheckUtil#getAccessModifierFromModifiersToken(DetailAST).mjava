    /**
     * Returns {@link AccessModifier} based on the information about access modifier
     * taken from the given token of type {@link TokenTypes#MODIFIERS}.
     * @param modifiersToken token of type {@link TokenTypes#MODIFIERS}.
     * @return {@link AccessModifier}.
     * @throws IllegalArgumentException when expected non-null modifiersToken with type 'MODIFIERS'
     */
    public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {
        if (modifiersToken == null || modifiersToken.getType() != TokenTypes.MODIFIERS) {
            throw new IllegalArgumentException("expected non-null AST-token with type 'MODIFIERS'");
        }

        // default access modifier
        AccessModifier accessModifier = AccessModifier.PACKAGE;
        for (DetailAST token = modifiersToken.getFirstChild(); token != null;
             token = token.getNextSibling()) {
            final int tokenType = token.getType();
            if (tokenType == TokenTypes.LITERAL_PUBLIC) {
                accessModifier = AccessModifier.PUBLIC;
            }
            else if (tokenType == TokenTypes.LITERAL_PROTECTED) {
                accessModifier = AccessModifier.PROTECTED;
            }
            else if (tokenType == TokenTypes.LITERAL_PRIVATE) {
                accessModifier = AccessModifier.PRIVATE;
            }
        }
        return accessModifier;
    }

