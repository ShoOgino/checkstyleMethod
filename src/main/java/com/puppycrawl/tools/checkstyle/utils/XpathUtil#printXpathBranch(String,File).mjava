    /**
     * Returns xpath query results on file as string.
     *
     * @param xpath query to evaluate
     * @param file file to run on
     * @return all results as string separated by {@link XpathUtil#DELIMITER}
     * @throws CheckstyleException if some parsing error happens
     * @throws IOException if an error occurs
     */
    public static String printXpathBranch(String xpath, File file) throws CheckstyleException,
            IOException {
        final XPathEvaluator xpathEvaluator = new XPathEvaluator();
        try {
            final RootNode rootNode = new RootNode(JavaParser.parseFile(file,
                JavaParser.Options.WITH_COMMENTS));
            final XPathExpression xpathExpression = xpathEvaluator.createExpression(xpath);
            final XPathDynamicContext xpathDynamicContext =
                xpathExpression.createDynamicContext(rootNode);
            final List<Item<?>> matchingItems = xpathExpression.evaluate(xpathDynamicContext);
            return matchingItems.stream()
                .map(item -> ((AbstractNode) item).getUnderlyingNode())
                .map(AstTreeStringPrinter::printBranch)
                .collect(Collectors.joining(DELIMITER));
        }
        catch (XPathException ex) {
            final String errMsg = String.format(Locale.ROOT,
                "Error during evaluation for xpath: %s, file: %s", xpath, file.getCanonicalPath());
            throw new CheckstyleException(errMsg, ex);
        }
    }

