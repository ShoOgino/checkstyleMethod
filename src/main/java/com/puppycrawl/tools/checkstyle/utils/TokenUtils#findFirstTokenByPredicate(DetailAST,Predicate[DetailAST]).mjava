    /**
     * Finds the first node {@link Optional} of {@link DetailAST} which matches the predicate.
     * @param root root node.
     * @param predicate predicate.
     * @return {@link Optional} of {@link DetailAST} node which matches the predicate.
     */
    public static Optional<DetailAST> findFirstTokenByPredicate(DetailAST root,
                                                                Predicate<DetailAST> predicate) {
        Optional<DetailAST> result = Optional.empty();
        DetailAST rootNode = root;
        while (rootNode != null) {
            DetailAST toVisit = rootNode.getFirstChild();
            if (predicate.test(toVisit)) {
                result = Optional.of(toVisit);
                break;
            }
            while (rootNode != null && toVisit == null) {
                toVisit = rootNode.getNextSibling();
                if (toVisit == null) {
                    rootNode = rootNode.getParent();
                }
            }
            rootNode = toVisit;
        }
        return result;
    }

