    /**
     * Read the module details from the supplied input stream of the module's XML metadata file.
     *
     * @param moduleMetadataStream input stream object of a module's metadata file
     * @param moduleType type of module
     * @return module detail object extracted from the XML metadata file
     * @throws ParserConfigurationException if a parser configuration exception occurs
     * @throws IOException if a IO exception occurs
     * @throws SAXException if a SAX exception occurs during parsing the XML file
     */
    public static ModuleDetails read(InputStream moduleMetadataStream, ModuleType moduleType)
            throws ParserConfigurationException, IOException, SAXException {
        ModuleDetails result = null;
        if (moduleType != null) {
            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
            final DocumentBuilder builder = factory.newDocumentBuilder();
            final Document document = builder.parse(moduleMetadataStream);
            final Element root = document.getDocumentElement();
            final Element element = getDirectChildsByTag(root, "module").get(0);
            final ModuleDetails moduleDetails = new ModuleDetails();
            final Element module = getDirectChildsByTag(element, moduleType.getLabel()).get(0);
            moduleDetails.setModuleType(moduleType);
            result = createModule(module, moduleDetails);
        }
        return result;
    }

