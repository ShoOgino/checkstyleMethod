    /**
     * Read the module details from the supplied input stream of the module's XML metadata file.
     *
     * @param moduleMetadataStream input stream object of a module's metadata file
     * @param moduleType type of module
     * @return module detail object extracted from the XML metadata file
     * @throws ParserConfigurationException if a parser configuration exception occurs
     * @throws IOException if a IO exception occurs
     * @throws SAXException if a SAX exception occurs during parsing the XML file
     */
    public static ModuleDetails read(InputStream moduleMetadataStream, ModuleType moduleType)
            throws ParserConfigurationException, IOException, SAXException {
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        final DocumentBuilder builder = factory.newDocumentBuilder();
        final Document document = builder.parse(moduleMetadataStream);
        final Element root = document.getDocumentElement();
        final Element element = getDirectChildsByTag(root, "module").get(0);
        Element module = null;
        final ModuleDetails moduleDetails = new ModuleDetails();
        if (moduleType == ModuleType.CHECK) {
            module = getDirectChildsByTag(element, "check").get(0);
            moduleDetails.setModuleType(ModuleType.CHECK);
        }
        else if (moduleType == ModuleType.FILTER) {
            module = getDirectChildsByTag(element, "filter").get(0);
            moduleDetails.setModuleType(ModuleType.FILTER);
        }
        else if (moduleType == ModuleType.FILEFILTER) {
            module = getDirectChildsByTag(element, "file-filter").get(0);
            moduleDetails.setModuleType(ModuleType.FILEFILTER);
        }
        ModuleDetails result = null;
        if (module != null) {
            result = createModule(module, moduleDetails);
        }
        return result;
    }

