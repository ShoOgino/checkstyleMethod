    /**
     * Loops over the files specified checking them for errors. The exit code
     * is the number of errors found in all the files.
     * @param args the command line arguments
     * @throws UnsupportedEncodingException if there is a problem to use UTF-8
     * @throws CheckstyleException if there is a problem with parsing a property file
     * @throws FileNotFoundException if there is a problem with files access
     **/
    public static void main(String... args) throws UnsupportedEncodingException,
            CheckstyleException, FileNotFoundException
    {
        int errorCounter = 0;
        boolean cliViolations = false;

        try {
            //parse CLI arguments
            final CommandLine commandLine = parseCli(args);

            // show version and exit if it is requested
            if (commandLine.hasOption("v")) {
                System.out.println("Checkstyle version: "
                        + Main.class.getPackage().getImplementationVersion());
            }
            else {
                // return error is smth is wrong in arguments
                final List<String> messages = validateCli(commandLine);
                cliViolations = !messages.isEmpty();
                if (messages.isEmpty()) {

                    // create config helper object
                    final CliOptions config = convertCliToPojo(commandLine);
                    // run Checker
                    errorCounter = runCheckstyle(config);

                }
                else {
                    errorCounter = 1;
                    for (String message : messages) {
                        System.out.println(message);
                    }
                }
            }
        }
        catch (ParseException pex) {
            // smth wrong with arguments - print error and manual
            cliViolations = true;
            errorCounter = 1;
            System.out.println(pex.getMessage());
            printUsage();
        }
        catch (Exception ex) {
            // smth wrong during processing
            errorCounter = 1;
            throw ex;
        }
        finally {
            // return exit code base on validation of Checker
            if (errorCounter != 0 && !cliViolations) {
                System.out.println(String.format("Checkstyle ends with %d errors.", errorCounter));
            }
            // provide proper exit code based on results.
            System.exit(errorCounter);
        }
    }

