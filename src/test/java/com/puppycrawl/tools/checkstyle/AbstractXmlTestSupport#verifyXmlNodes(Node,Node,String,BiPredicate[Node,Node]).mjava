    private static void verifyXmlNodes(Node expected, Node actual, String path,
            BiPredicate<Node, Node> ordered) {
        final Node expectedFirstChild = expected.getFirstChild();
        final Node actualFirstChild = actual.getFirstChild();

        if (expectedFirstChild == null) {
            assertNull(actualFirstChild, "no children nodes should exist: " + path);
            assertEquals(expected.getNodeValue(), actual.getNodeValue(),
                    "text should be the same: " + path);
        }
        else {
            assertNotNull(actualFirstChild, "children nodes should exist: " + path);

            if (ordered == null) {
                Node actualChild = actualFirstChild;

                for (Node expectedChild = expectedFirstChild; expectedChild != null;
                        expectedChild = expectedChild.getNextSibling()) {
                    verifyXmlNode(expectedChild, actualChild, path, ordered);

                    actualChild = actualChild.getNextSibling();
                }

                assertNull(actualChild, "node have same number of children: " + path);
            }
            else {
                final Set<Node> expectedChildren = XmlUtil.getChildrenElements(expected);
                final Set<Node> actualChildren = XmlUtil.getChildrenElements(actual);

                assertEquals(expectedChildren.size(), actualChildren.size(),
                        "node have same number of children: " + path);

                for (Node expectedChild : expectedChildren) {
                    Node foundChild = null;

                    for (Node actualChild : actualChildren) {
                        if (ordered.test(expectedChild, actualChild)) {
                            foundChild = actualChild;
                            break;
                        }
                    }

                    assertNotNull(foundChild,
                            "node should exist: " + path + expectedChild.getNodeName() + "/");

                    verifyXmlNode(expectedChild, foundChild, path, ordered);
                }
            }
        }
    }

