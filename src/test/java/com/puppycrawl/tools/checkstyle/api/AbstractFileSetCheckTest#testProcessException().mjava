    @Test
    public void testProcessException() throws Exception {
        final ExceptionFileSetCheck check = new ExceptionFileSetCheck();
        check.configure(new DefaultConfiguration("filesetcheck"));
        check.setFileExtensions("tmp");
        final File firstFile = new File("inputAbstractFileSetCheck.tmp");

        try {
            check.process(firstFile, new FileText(firstFile, Collections.emptyList()));
            fail("Exception is expected");
        }
        catch (IllegalArgumentException ex) {
            // exception is expected
        }

        final Field field = AbstractFileSetCheck.class.getDeclaredField("MESSAGE_COLLECTOR");
        field.setAccessible(true);
        @SuppressWarnings("unchecked")
        final SortedSet<LocalizedMessage> internalMessages =
                ((ThreadLocal<SortedSet<LocalizedMessage>>) field.get(null)).get();
        assertEquals("Internal message should only have 1", 1, internalMessages.size());

        // again to prove only 1 violation exists
        final File secondFile = new File("inputAbstractFileSetCheck.tmp");
        try {
            check.process(secondFile, new FileText(secondFile, Collections.emptyList()));
            fail("Exception is expected");
        }
        catch (IllegalArgumentException ex) {
            // exception is expected
        }

        @SuppressWarnings("unchecked")
        final SortedSet<LocalizedMessage> internalMessages2 =
            ((ThreadLocal<SortedSet<LocalizedMessage>>) field.get(null)).get();
        assertEquals("Internal message should only have 1 again", 1, internalMessages2.size());
    }

