    @Test
    public void testExistingTargetFileWithError(@SysErr Capturable systemErr,
            @SysOut Capturable systemOut) throws Exception {
        assertExitWithStatus(2, () -> {
            invokeMain("-c", getPath("InputMainConfig-classname2-error.xml"),
                    getPath("InputMain.java"));
        });
        final Violation errorCounterTwoMessage = new Violation(1,
                Definitions.CHECKSTYLE_BUNDLE, Main.ERROR_COUNTER,
                new String[] {String.valueOf(2)}, null, getClass(), null);
        final Violation invalidPatternMessageMain = new Violation(1,
                "com.puppycrawl.tools.checkstyle.checks.naming.messages",
                "name.invalidPattern", new String[] {"InputMain", "^[a-z0-9]*$"},
                null, getClass(), null);
        final Violation invalidPatternMessageMainInner = new Violation(1,
                "com.puppycrawl.tools.checkstyle.checks.naming.messages",
                "name.invalidPattern", new String[] {"InputMainInner", "^[a-z0-9]*$"},
                null, getClass(), null);
        final String expectedPath = getFilePath("InputMain.java");
        assertEquals(
                addEndOfLine(auditStartMessage.getViolation(),
                    "[ERROR] " + expectedPath + ":3:14: "
                        + invalidPatternMessageMain.getViolation() + " [TypeName]",
                    "[ERROR] " + expectedPath + ":5:7: "
                        + invalidPatternMessageMainInner.getViolation() + " [TypeName]",
                    auditFinishMessage.getViolation()),
                systemOut.getCapturedData(), "Unexpected output log");
        assertEquals(addEndOfLine(errorCounterTwoMessage.getViolation()),
                systemErr.getCapturedData(), "Unexpected system error log");
    }

