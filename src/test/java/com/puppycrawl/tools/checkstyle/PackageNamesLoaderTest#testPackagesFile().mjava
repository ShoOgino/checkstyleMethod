    /**
     * Tests the loading of package names. This test needs mocking, because the package names would
     * have to be placed in {@literal checkstyle_packages.xml}, but this will affect every test,
     * which is undesired.
     *
     * @throws Exception if error occurs
     */
    @Test
    @SuppressWarnings("unchecked")
    public void testPackagesFile() throws Exception {
        final URLConnection mockConnection = Mockito.mock(URLConnection.class);
        when(mockConnection.getInputStream()).thenReturn(
            Files.newInputStream(Paths.get(getPath("InputPackageNamesLoaderFile.xml"))));

        final URL url = getMockUrl(mockConnection);

        final Enumeration<URL> enumeration = mock(Enumeration.class);
        when(enumeration.hasMoreElements()).thenReturn(true).thenReturn(false);
        when(enumeration.nextElement()).thenReturn(url);

        final ClassLoader classLoader = mock(ClassLoader.class);
        when(classLoader.getResources("checkstyle_packages.xml")).thenReturn(enumeration);

        final Set<String> actualPackageNames = PackageNamesLoader.getPackageNames(classLoader);
        final String[] expectedPackageNames = {
            "com.puppycrawl.tools.checkstyle",
            "com.puppycrawl.tools.checkstyle.checks",
            "com.puppycrawl.tools.checkstyle.checks.annotation",
            "com.puppycrawl.tools.checkstyle.checks.blocks",
            "com.puppycrawl.tools.checkstyle.checks.coding",
            "com.puppycrawl.tools.checkstyle.checks.design",
            "com.puppycrawl.tools.checkstyle.checks.header",
            "com.puppycrawl.tools.checkstyle.checks.imports",
            "com.puppycrawl.tools.checkstyle.checks.indentation",
            "com.puppycrawl.tools.checkstyle.checks.javadoc",
            "com.puppycrawl.tools.checkstyle.checks.metrics",
            "com.puppycrawl.tools.checkstyle.checks.modifier",
            "com.puppycrawl.tools.checkstyle.checks.naming",
            "com.puppycrawl.tools.checkstyle.checks.regexp",
            "com.puppycrawl.tools.checkstyle.checks.sizes",
            "com.puppycrawl.tools.checkstyle.checks.whitespace",
            "com.puppycrawl.tools.checkstyle.filefilters",
            "com.puppycrawl.tools.checkstyle.filters",
        };

        assertEquals("Invalid package names length.", expectedPackageNames.length,
            actualPackageNames.size());
        final Set<String> checkstylePackagesSet =
                new HashSet<>(Arrays.asList(expectedPackageNames));
        assertEquals("Invalid names set.", checkstylePackagesSet, actualPackageNames);
    }

