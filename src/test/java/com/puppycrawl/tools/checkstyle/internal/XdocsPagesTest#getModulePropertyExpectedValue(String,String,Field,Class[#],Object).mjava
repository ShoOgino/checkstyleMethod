    /**
     * Get's the name of the bean property's default value for the class.
     * @param sectionName The name of the section/module being worked on.
     * @param propertyName The property name to work with.
     * @param field The bean property's field.
     * @param fieldClass The bean property's type.
     * @param instance The class instance to work with.
     * @return String form of property's default value.
     * @noinspection ReuseOfLocalVariable, OverlyNestedMethod
     */
    private static String getModulePropertyExpectedValue(String sectionName, String propertyName,
            Field field, Class<?> fieldClass, Object instance) throws Exception {
        String result = null;

        if (field != null) {
            Object value = field.get(instance);

            // noinspection IfStatementWithTooManyBranches
            if ("Checker".equals(sectionName) && "localeCountry".equals(propertyName)) {
                result = "default locale country for the Java Virtual Machine";
            }
            else if ("Checker".equals(sectionName) && "localeLanguage".equals(propertyName)) {
                result = "default locale language for the Java Virtual Machine";
            }
            else if ("Checker".equals(sectionName) && "charset".equals(propertyName)) {
                result = "System property \"file.encoding\"";
            }
            else if ("charset".equals(propertyName)) {
                result = "the charset property of the parent Checker module";
            }
            else if ("PropertyCacheFile".equals(fieldClass.getSimpleName())) {
                result = "null (no cache file)";
            }
            else if (fieldClass == boolean.class) {
                result = value.toString();
            }
            else if (fieldClass == int.class) {
                if (value.equals(Integer.MAX_VALUE)) {
                    result = "java.lang.Integer.MAX_VALUE";
                }
                else {
                    result = value.toString();
                }
            }
            else if (fieldClass == int[].class) {
                if (value instanceof Collection) {
                    final Collection<?> collection = (Collection<?>) value;
                    final int[] newArray = new int[collection.size()];
                    final Iterator<?> iterator = collection.iterator();
                    int index = 0;

                    while (iterator.hasNext()) {
                        newArray[index] = (Integer) iterator.next();
                        index++;
                    }

                    value = newArray;
                }

                if (isPropertyTokenType(sectionName, propertyName)) {
                    result = "";
                    boolean first = true;

                    if (value instanceof BitSet) {
                        final BitSet list = (BitSet) value;
                        final StringBuilder sb = new StringBuilder(20);

                        for (int i = 0; i < list.size(); i++) {
                            if (list.get(i)) {
                                if (first) {
                                    first = false;
                                }
                                else {
                                    sb.append(", ");
                                }

                                sb.append(TokenUtils.getTokenName(i));
                            }
                        }

                        result = sb.toString();
                    }
                    else if (value != null) {
                        final StringBuilder sb = new StringBuilder(20);

                        for (int i = 0; i < Array.getLength(value); i++) {
                            if (first) {
                                first = false;
                            }
                            else {
                                sb.append(", ");
                            }

                            sb.append(TokenUtils.getTokenName((int) Array.get(value, i)));
                        }

                        result = sb.toString();
                    }
                }
                else {
                    result = Arrays.toString((int[]) value).replace("[", "").replace("]", "");

                    if (result.isEmpty()) {
                        result = "{}";
                    }
                }
            }
            else if (fieldClass == double[].class) {
                result = Arrays.toString((double[]) value).replace("[", "").replace("]", "")
                        .replace(".0", "");
                if (result.isEmpty()) {
                    result = "{}";
                }
            }
            else if (fieldClass == String[].class) {
                if (value instanceof Collection) {
                    final Collection<?> collection = (Collection<?>) value;
                    final String[] newArray = new String[collection.size()];
                    final Iterator<?> iterator = collection.iterator();
                    int index = 0;

                    while (iterator.hasNext()) {
                        final Object next = iterator.next();
                        newArray[index] = (String) next;
                        index++;
                    }

                    value = newArray;
                }

                if (value != null && Array.getLength(value) > 0) {
                    if (Array.get(value, 0) instanceof Number) {
                        final String[] newArray = new String[Array.getLength(value)];

                        for (int i = 0; i < newArray.length; i++) {
                            newArray[i] = TokenUtils.getTokenName(((Number) Array.get(value, i))
                                    .intValue());
                        }

                        value = newArray;
                    }

                    result = Arrays.toString((Object[]) value).replace("[", "")
                            .replace("]", "");
                }
                else {
                    result = "";
                }

                if (result.isEmpty()) {
                    if ("fileExtensions".equals(propertyName)) {
                        result = "all files";
                    }
                    else {
                        result = "{}";
                    }
                }
            }
            else if (fieldClass == URI.class || fieldClass == String.class) {
                if (value != null) {
                    result = '"' + value.toString() + '"';
                }
            }
            else if (fieldClass == Pattern.class) {
                if (value != null) {
                    result = '"' + value.toString().replace("\n", "\\n").replace("\t", "\\t")
                            .replace("\r", "\\r").replace("\f", "\\f") + '"';

                    if ("\"$^\"".equals(result)) {
                        result += " (empty)";
                    }
                }
            }
            else if (fieldClass == Pattern[].class) {
                if (value instanceof Collection) {
                    final Collection<?> collection = (Collection<?>) value;
                    final Pattern[] newArray = new Pattern[collection.size()];
                    final Iterator<?> iterator = collection.iterator();
                    int index = 0;

                    while (iterator.hasNext()) {
                        final Object next = iterator.next();
                        newArray[index] = (Pattern) next;
                        index++;
                    }

                    value = newArray;
                }

                if (value != null && Array.getLength(value) > 0) {
                    final String[] newArray = new String[Array.getLength(value)];

                    for (int i = 0; i < newArray.length; i++) {
                        newArray[i] = ((Pattern) Array.get(value, i)).pattern();
                    }

                    result = Arrays.toString(newArray).replace("[", "")
                            .replace("]", "");
                }
                else {
                    result = "";
                }

                if (result.isEmpty()) {
                    result = "{}";
                }
            }
            else if (fieldClass.isEnum()) {
                if (value != null) {
                    result = value.toString().toLowerCase(Locale.ENGLISH);
                }
            }
            else if (fieldClass == AccessModifier[].class) {
                result = Arrays.toString((Object[]) value).replace("[", "").replace("]", "");
            }
            else {
                Assert.fail("Unknown property type: " + fieldClass.getSimpleName());
            }

            if (result == null) {
                result = "null";
            }
        }

        return result;
    }

