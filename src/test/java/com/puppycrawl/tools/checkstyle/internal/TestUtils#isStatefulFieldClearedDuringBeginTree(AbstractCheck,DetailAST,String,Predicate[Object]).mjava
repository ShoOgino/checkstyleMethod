    /**
     * Checks if stateful field is cleared during {@link AbstractCheck#beginTree} in check.
     *
     * @param check      check object which field is to be verified
     * @param astToVisit ast to pass into check methods
     * @param fieldName  name of the field to be checked
     * @param isClear    function for checking field state
     * @return {@code true} if state of the field is cleared
     * @throws NoSuchFieldException   if there is no field with the
     *                                {@code fieldName} in the {@code check}
     * @throws IllegalAccessException if the field is inaccessible
     */
    public static boolean isStatefulFieldClearedDuringBeginTree(AbstractCheck check,
                                                                DetailAST astToVisit,
                                                                String fieldName,
                                                                Predicate<Object> isClear)
            throws NoSuchFieldException, IllegalAccessException {
        check.beginTree(null);
        check.visitToken(astToVisit);
        check.beginTree(null);
        final Field field = check.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        return isClear.test(field.get(check));
    }

