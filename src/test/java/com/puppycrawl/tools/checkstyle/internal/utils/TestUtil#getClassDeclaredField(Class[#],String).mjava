    /**
     * Retrieves the specified field by it's name in the class or it's direct super.
     *
     * @param clss The class to retrieve the field for.
     * @param fieldName The name of the field to retrieve.
     * @return The class' field.
     * @throws NoSuchFieldException if the requested field cannot be found in the class.
     */
    public static Field getClassDeclaredField(Class<?> clss, String fieldName)
            throws NoSuchFieldException {
        final Optional<Field> classField = Arrays.stream(clss.getDeclaredFields())
                .filter(field -> fieldName.equals(field.getName())).findFirst();
        final Field resultField;
        if (classField.isPresent()) {
            resultField = classField.get();
        }
        else {
            resultField = clss.getSuperclass().getDeclaredField(fieldName);
        }
        resultField.setAccessible(true);
        return resultField;
    }

