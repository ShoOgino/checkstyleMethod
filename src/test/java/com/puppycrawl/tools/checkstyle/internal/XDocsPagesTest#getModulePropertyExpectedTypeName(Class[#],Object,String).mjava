    /** @noinspection IfStatementWithTooManyBranches */
    private static String getModulePropertyExpectedTypeName(Class<?> clss, Object instance,
            String propertyName) {
        final String instanceName = instance.getClass().getSimpleName();
        String result = null;

        if (clss == boolean.class) {
            result = "Boolean";
        }
        else if (clss == int.class) {
            result = "Integer";
        }
        else if (clss == int[].class) {
            result = "Integer Set";
        }
        else if (clss == double[].class) {
            result = "Number Set";
        }
        else if (clss == String[].class) {
            if (propertyName.endsWith("Tokens") || propertyName.endsWith("Token")
                    || "AtclauseOrderCheck".equals(instanceName) && "target".equals(propertyName)
                    || "MultipleStringLiteralsCheck".equals(instanceName)
                            && "ignoreOccurrenceContext".equals(propertyName)) {
                result = "subset of tokens TokenTypes";
            }
            else {
                result = "String Set";
            }
        }
        else if (clss == URI.class) {
            result = "URI";
        }
        else if (clss == Pattern.class) {
            result = "Regular Expression";
        }
        else if (clss == SeverityLevel.class) {
            result = "Severity";
        }
        else if (clss == Scope.class) {
            result = "Scope";
        }
        else if (clss != String.class) {
            Assert.fail("Unknown property type: " + clss.getSimpleName());
        }

        if ("SuppressWarningsHolder".equals(instanceName)) {
            result = result + " in a format of comma separated attribute=value entries. The "
                    + "attribute is the fully qualified name of the Check and value is its alias.";
        }

        return result;
    }

