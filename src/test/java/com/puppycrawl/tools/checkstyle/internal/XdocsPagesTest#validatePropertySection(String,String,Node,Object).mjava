    private static void validatePropertySection(String fileName, String sectionName,
            Node subSection, Object instance) throws Exception {
        final Set<String> properties = getProperties(instance.getClass());
        final Class<?> clss = instance.getClass();

        fixCapturedProperties(sectionName, instance, clss, properties);

        if (subSection != null) {
            assertFalse(properties.isEmpty(), fileName + " section '" + sectionName
                    + "' should have no properties to show");

            final Set<Node> nodes = XmlUtil.getChildrenElements(subSection);
            assertEquals(1, nodes.size(), fileName + " section '" + sectionName
                    + "' subsection 'Properties' should have one child node");

            final Node div = nodes.iterator().next();
            assertEquals("div", div.getNodeName(), fileName + " section '" + sectionName
                        + "' subsection 'Properties' has unexpected child node");
            final String wrapperMessage = fileName + " section '" + sectionName
                    + "' subsection 'Properties' wrapping div for table needs the"
                    + " class 'wrapper'";
            assertTrue(div.hasAttributes(), wrapperMessage);
            assertNotNull(div.getAttributes().getNamedItem("class").getNodeValue(), wrapperMessage);
            assertTrue(div.getAttributes().getNamedItem("class").getNodeValue().contains("wrapper"),
                    wrapperMessage);

            final Node table = XmlUtil.getFirstChildElement(div);
            assertEquals("table", table.getNodeName(), fileName + " section '" + sectionName
                    + "' subsection 'Properties' has unexpected child node");

            validatePropertySectionProperties(fileName, sectionName, table, instance,
                    properties);
        }

        assertTrue(properties.isEmpty(),
                fileName + " section '" + sectionName + "' should show properties: " + properties);
    }

