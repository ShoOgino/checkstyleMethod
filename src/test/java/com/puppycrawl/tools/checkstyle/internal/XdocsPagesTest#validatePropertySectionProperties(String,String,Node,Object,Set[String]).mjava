    private static void validatePropertySectionProperties(String fileName, String sectionName,
            Node subSection, Object instance, Set<String> properties) throws Exception {
        boolean skip = true;
        boolean didJavadocTokens = false;
        boolean didTokens = false;

        for (Node row : XmlUtil.getChildrenElements(XmlUtil.getFirstChildElement(subSection))) {
            final List<Node> columns = new ArrayList<>(XmlUtil.getChildrenElements(row));

            Assert.assertEquals(fileName + " section '" + sectionName
                    + "' should have the requested columns", 5, columns.size());

            if (skip) {
                Assert.assertEquals(fileName + " section '" + sectionName
                        + "' should have the specific title", "name", columns.get(0)
                        .getTextContent());
                Assert.assertEquals(fileName + " section '" + sectionName
                        + "' should have the specific title", "description", columns.get(1)
                        .getTextContent());
                Assert.assertEquals(fileName + " section '" + sectionName
                        + "' should have the specific title", "type", columns.get(2)
                        .getTextContent());
                Assert.assertEquals(fileName + " section '" + sectionName
                        + "' should have the specific title", "default value", columns.get(3)
                        .getTextContent());
                Assert.assertEquals(fileName + " section '" + sectionName
                        + "' should have the specific title", "since", columns.get(4)
                        .getTextContent());

                skip = false;
                continue;
            }

            Assert.assertFalse(fileName + " section '" + sectionName
                    + "' should have token properties last", didTokens);

            final String propertyName = columns.get(0).getTextContent();
            Assert.assertTrue(fileName + " section '" + sectionName
                    + "' should not contain the property: " + propertyName,
                    properties.remove(propertyName));

            if ("tokens".equals(propertyName)) {
                final AbstractCheck check = (AbstractCheck) instance;
                validatePropertySectionPropertyTokens(fileName, sectionName, check, columns);
                didTokens = true;
            }
            else if ("javadocTokens".equals(propertyName)) {
                final AbstractJavadocCheck check = (AbstractJavadocCheck) instance;
                validatePropertySectionPropertyJavadocTokens(fileName, sectionName, check, columns);
                didJavadocTokens = true;
            }
            else {
                Assert.assertFalse(fileName + " section '" + sectionName
                        + "' should have javadoc token properties next to last, before tokens",
                        didJavadocTokens);

                validatePropertySectionPropertyEx(fileName, sectionName, instance, columns,
                        propertyName);
            }

            Assert.assertFalse(fileName + " section '" + sectionName
                    + "' should have a version for " + propertyName, columns.get(4)
                    .getTextContent().trim().isEmpty());
            Assert.assertTrue(fileName + " section '" + sectionName
                    + "' should have a valid version for " + propertyName,
                    VERSION.matcher(columns.get(4).getTextContent().trim()).matches());
        }
    }

