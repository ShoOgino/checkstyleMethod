    @Test
    public void testAllCheckstyleMessages() throws Exception {
        for (Class<?> module : CheckUtil.getCheckstyleChecks()) {
            for (Field message : CheckUtil.getCheckMessages(module)) {
                Assert.assertEquals(module.getSimpleName() + "." + message.getName()
                        + " should be 'public static final'", Modifier.PUBLIC | Modifier.STATIC
                        | Modifier.FINAL, message.getModifiers());

                // below is required for package/private classes
                if (!message.isAccessible()) {
                    message.setAccessible(true);
                }

                for (Locale locale : ALL_LOCALES) {
                    final String messageString = message.get(null).toString();
                    String result = null;

                    try {
                        result = CheckUtil.getCheckMessage(module, locale, messageString);
                    }
                    catch (IllegalArgumentException ex) {
                        Assert.fail(module.getSimpleName() + " with the message '" + messageString
                                + "' in locale '" + locale.getLanguage() + "' failed with: "
                                + ex.getClass().getSimpleName() + " - " + ex.getMessage());
                    }

                    Assert.assertNotNull(
                            module.getSimpleName() + " should have text for the message '"
                                    + messageString + "' in locale " + locale.getLanguage() + "'",
                            result);
                    Assert.assertFalse(
                            module.getSimpleName() + " should have non-empty text for the message '"
                                    + messageString + "' in locale '" + locale.getLanguage() + "'",
                            result.trim().isEmpty());
                    Assert.assertFalse(
                            module.getSimpleName() + " should have non-TODO text for the message '"
                                    + messageString + "' in locale " + locale.getLanguage() + "'",
                            !"todo.match".equals(messageString)
                                    && result.trim().startsWith("TODO"));
                }
            }
        }
    }

