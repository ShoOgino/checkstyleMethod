    private static void validatePropertySectionProperties(String fileName, String sectionName,
            Node subSection, Object instance, Set<String> properties) throws Exception {
        boolean skip = true;
        boolean didJavadocTokens = false;
        boolean didTokens = false;

        for (Node row : XmlUtil.getChildrenElements(XmlUtil.getFirstChildElement(subSection))) {
            if (skip) {
                skip = false;
                continue;
            }
            Assert.assertFalse(fileName + " section '" + sectionName
                    + "' should have token properties last", didTokens);

            final List<Node> columns = new ArrayList<>(XmlUtil.getChildrenElements(row));

            final String propertyName = columns.get(0).getTextContent();
            Assert.assertTrue(fileName + " section '" + sectionName
                    + "' should not contain the property: " + propertyName,
                    properties.remove(propertyName));

            if ("tokens".equals(propertyName)) {
                final AbstractCheck check = (AbstractCheck) instance;
                validatePropertySectionPropertyTokens(fileName, sectionName, check, columns);
                didTokens = true;
            }
            else if ("javadocTokens".equals(propertyName)) {
                final AbstractJavadocCheck check = (AbstractJavadocCheck) instance;
                validatePropertySectionPropertyJavadocTokens(fileName, sectionName, check, columns);
                didJavadocTokens = true;
            }
            else {
                Assert.assertFalse(fileName + " section '" + sectionName
                        + "' should have javadoc token properties next to last, before tokens",
                        didJavadocTokens);
                Assert.assertFalse(fileName + " section '" + sectionName
                        + "' should have a description for " + propertyName, columns.get(1)
                        .getTextContent().trim().isEmpty());

                final String actualTypeName = columns.get(2).getTextContent().replace("\n", "")
                        .replace("\r", "").replaceAll(" +", " ").trim();
                final String actualValue = columns.get(3).getTextContent().replace("\n", "")
                        .replace("\r", "").replaceAll(" +", " ").trim();

                Assert.assertFalse(fileName + " section '" + sectionName
                        + "' should have a type for " + propertyName, actualTypeName.isEmpty());

                final PropertyDescriptor descriptor = PropertyUtils.getPropertyDescriptor(instance,
                        propertyName);
                final Class<?> clss = descriptor.getPropertyType();
                final String expectedTypeName =
                        getModulePropertyExpectedTypeName(clss, instance, propertyName);
                final String expectedValue = getModulePropertyExpectedValue(clss, instance,
                        propertyName);

                if (expectedTypeName != null) {
                    Assert.assertEquals(fileName + " section '" + sectionName
                            + "' should have the type for " + propertyName, expectedTypeName,
                            actualTypeName);
                    if (expectedValue != null) {
                        Assert.assertEquals(fileName + " section '" + sectionName
                                + "' should have the value for " + propertyName, expectedValue,
                                actualValue);
                    }
                }
            }
        }
    }

