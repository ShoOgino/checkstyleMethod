    @Test
    public void testAllStyleRules() throws Exception {
        for (Path path : XdocUtil.getXdocsStyleFilePaths(XdocUtil.getXdocsFilePaths())) {
            final String fileName = path.getFileName().toString();
            final String input = new String(Files.readAllBytes(path), UTF_8);
            final Document document = XmlUtil.getRawXml(fileName, input, input);
            final NodeList sources = document.getElementsByTagName("tr");
            Set<String> styleChecks = null;

            if (path.toFile().getName().contains("google")) {
                styleChecks = new HashSet<>(GOOGLE_MODULES);
            }
            else if (path.toFile().getName().contains("sun")) {
                styleChecks = new HashSet<>();
            }

            String lastRuleName = null;

            for (int position = 0; position < sources.getLength(); position++) {
                final Node row = sources.item(position);
                final List<Node> columns = new ArrayList<>(
                        XmlUtil.findChildElementsByTag(row, "td"));

                if (columns.isEmpty()) {
                    continue;
                }

                final String ruleName = columns.get(1).getTextContent().trim();

                if (lastRuleName != null) {
                    Assert.assertTrue(
                            fileName + " rule '" + ruleName + "' is out of order compared to '"
                                    + lastRuleName + "'",
                            ruleName.toLowerCase(Locale.ENGLISH).compareTo(
                                    lastRuleName.toLowerCase(Locale.ENGLISH)) >= 0);
                }

                if (!"--".equals(ruleName)) {
                    validateStyleAnchors(XmlUtil.findChildElementsByTag(columns.get(0), "a"),
                            fileName, ruleName);
                }

                validateStyleModules(XmlUtil.findChildElementsByTag(columns.get(2), "a"),
                        XmlUtil.findChildElementsByTag(columns.get(3), "a"), styleChecks, fileName,
                        ruleName);

                lastRuleName = ruleName;
            }

            // these modules aren't documented, but are added to the config
            styleChecks.remove("BeforeExecutionExclusionFileFilter");
            styleChecks.remove("TreeWalker");
            styleChecks.remove("Checker");

            Assert.assertTrue(fileName + " requires the following check(s) to appear: "
                    + styleChecks, styleChecks.isEmpty());
        }
    }

