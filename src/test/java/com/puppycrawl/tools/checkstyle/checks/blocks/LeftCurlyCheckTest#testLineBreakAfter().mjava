    @Test
    public void testLineBreakAfter() throws Exception
    {
        checkConfig.addAttribute("option", LeftCurlyOption.EOL.toString());
        checkConfig.addAttribute("maxLineLength", "100");
        final String[] expected = {
            "9:1: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "12:5: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "16:9: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "18:13: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "20:17: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "26:22: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "28:17: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "35:33: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "36:21: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "39:29: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "39:34: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "45:37: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "54:5: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
            "56:27: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{"),
            "66:1: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{"),
        };
        verify(checkConfig, getPath("InputLeftCurlyLineBreakAfter.java"), expected);
    }

