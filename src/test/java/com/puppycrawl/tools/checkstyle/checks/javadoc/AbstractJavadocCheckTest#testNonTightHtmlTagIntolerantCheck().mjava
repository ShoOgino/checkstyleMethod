    @Test
    public void testNonTightHtmlTagIntolerantCheck() throws Exception {
        final DefaultConfiguration checkConfig =
                createModuleConfig(NonTightHtmlTagIntolerantCheck.class);
        checkConfig.addAttribute("violateExecutionOnNonTightHtml", "true");
        final String[] expected = {
            "11: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "18: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "21: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"),
            "26: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "32: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "tr"),
            "39: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"),
            "59: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"),
            "76: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "85: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "tr"),
            "129: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
        };
        verify(checkConfig, getPath("InputAbstractJavadocNonTightHtmlTags.java"), expected);
    }

