    @Test
    public void testReturn() {
        final DetailAstImpl ast = new DetailAstImpl();
        final DetailAstImpl astChild = new DetailAstImpl();
        astChild.setType(TokenTypes.TYPE);
        ast.setFirstChild(astChild);
        final DetailAstImpl astChild2 = new DetailAstImpl();
        astChild2.setType(TokenTypes.LITERAL_INT);
        astChild.setFirstChild(astChild2);

        final int[] validTypes = {
            TokenTypes.METHOD_DEF,
        };
        for (int type: validTypes) {
            ast.setType(type);
            assertTrue("Invalid ast type for current tag: " + ast.getType(),
                    JavadocTagInfo.RETURN.isValidOn(ast));
        }

        astChild2.setType(TokenTypes.LITERAL_VOID);
        assertFalse("Should return false when ast type is invalid for current tag",
                JavadocTagInfo.RETURN.isValidOn(ast));

        ast.setType(TokenTypes.LAMBDA);
        assertFalse("Should return false when ast type is invalid for current tag",
                JavadocTagInfo.RETURN.isValidOn(ast));
    }

