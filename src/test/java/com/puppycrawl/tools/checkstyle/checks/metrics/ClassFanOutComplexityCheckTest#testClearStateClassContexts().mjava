    /**
     * We cannot reproduce situation when visitToken is called and leaveToken is not.
     * So, we have to use reflection to be sure that even in such situation
     * state of the field will be cleared.
     *
     * @throws Exception when code tested throws exception
     */
    @Test
    public void testClearStateClassContexts() throws Exception {
        final ClassFanOutComplexityCheck check = new ClassFanOutComplexityCheck();
        final DetailAST root = JavaParser.parseFile(
                new File(getPath("InputClassFanOutComplexity.java")),
                JavaParser.Options.WITHOUT_COMMENTS);
        final Optional<DetailAST> classDef = TestUtil.findTokenInAstByPredicate(root,
            ast -> ast.getType() == TokenTypes.CLASS_DEF);

        Assert.assertTrue("Ast should contain CLASS_DEF", classDef.isPresent());
        Assert.assertTrue("State is not cleared on beginTree",
                TestUtil.isStatefulFieldClearedDuringBeginTree(check, classDef.get(),
                    "classesContexts",
                    classContexts -> ((Collection<?>) classContexts).size() == 1));
    }

