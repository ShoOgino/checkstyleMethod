    @Test
    public void testClassAliasToString() throws Exception {
        Class<?> tokenType = Class
                .forName("com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$Token");

        Class<?> regularClassType = Class
                .forName(
                        "com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$RegularClass");
        Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(tokenType,
                String.class, AbstractTypeAwareCheck.class);
        regularClassConstructor.setAccessible(true);

        Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,
                int.class);
        Object token = tokenConstructor.newInstance("blablabla", 1, 1);

        Object regularClass = regularClassConstructor.newInstance(token, "sur",
                new JavadocMethodCheck());

        Class<?> classAliasType = Class.forName(
                "com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$ClassAlias");
        Class<?> abstractTypeInfoType = Class.forName(
                "com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$AbstractClassInfo");

        Constructor<?> classAliasConstructor = classAliasType
                .getDeclaredConstructor(tokenType, abstractTypeInfoType);
        classAliasConstructor.setAccessible(true);

        Object classAlias = classAliasConstructor.newInstance(token, regularClass);
        Method toString = classAlias.getClass().getDeclaredMethod("toString");
        toString.setAccessible(true);
        String result = (String) toString.invoke(classAlias);
        assertEquals("ClassAlias[alias Token[blablabla(1x1)] for Token[blablabla(1x1)]]", result);
    }

