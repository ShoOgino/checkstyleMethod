    @Test
    public void testNonTightHtmlTagIntolerantCheckVisitCount()
            throws Exception {
        final DefaultConfiguration checkConfig =
                createModuleConfig(NonTightHtmlTagIntolerantCheck.class);
        checkConfig.addAttribute("violateExecutionOnNonTightHtml", "true");
        checkConfig.addAttribute("reportVisitJavadocToken", "true");
        final String[] expected = {
            "12: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "19: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "22: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"),
            "27: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "33: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "tr"),
            "40: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"),
            "47:8: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
            "60: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"),
            "68:13: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
            "77: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
            "86: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "tr"),
            "105:8: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
            "111:8: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
            "115:8: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
            "130: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"),
        };
        verify(checkConfig, getPath("InputAbstractJavadocNonTightHtmlTagsVisitCount.java"),
                expected);
    }

