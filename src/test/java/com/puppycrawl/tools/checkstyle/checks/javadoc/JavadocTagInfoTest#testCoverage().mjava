    @Test
    public void testCoverage() {
        assertEquals("Invalid type", JavadocTagInfo.Type.BLOCK, JavadocTagInfo.VERSION.getType());

        assertEquals("Invalid toString result", "text [@version] name [version] type [BLOCK]",
            JavadocTagInfo.VERSION.toString());

        try {
            JavadocTagInfo.fromName(null);
            fail("IllegalArgumentException is expected");
        }
        catch (IllegalArgumentException ex) {
            assertEquals("Invalid exception message",
                    "the name is null", ex.getMessage());
        }

        try {
            JavadocTagInfo.fromName("myname");
            fail("IllegalArgumentException is expected");
        }
        catch (IllegalArgumentException ex) {
            assertEquals("Invalid exception message",
                    "the name [myname] is not a valid Javadoc tag name", ex.getMessage());
        }

        try {
            JavadocTagInfo.fromText(null);
            fail("IllegalArgumentException is expected");
        }
        catch (IllegalArgumentException ex) {
            assertEquals("Invalid exception message", "the text is null", ex.getMessage());
        }

        try {
            JavadocTagInfo.fromText("myname");
            fail("IllegalArgumentException is expected");
        }
        catch (IllegalArgumentException ex) {
            assertEquals("Invalid exception message",
                    "the text [myname] is not a valid Javadoc tag text", ex.getMessage());
        }

        assertEquals("Invalid fromText result",
                JavadocTagInfo.VERSION, JavadocTagInfo.fromText("@version"));
    }

