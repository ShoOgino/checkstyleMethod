    @Test
    public void testOthers() throws ReflectiveOperationException {
        JavadocTagInfo[] tags = {
            JavadocTagInfo.CODE,
            JavadocTagInfo.DOC_ROOT,
            JavadocTagInfo.LINK,
            JavadocTagInfo.LINKPLAIN,
            JavadocTagInfo.LITERAL,
            JavadocTagInfo.SEE,
            JavadocTagInfo.SINCE,
            JavadocTagInfo.VALUE,
        };
        for (JavadocTagInfo tagInfo : tags) {
            DetailAST astParent = new DetailAST();
            astParent.setType(TokenTypes.LITERAL_CATCH);

            final DetailAST ast = new DetailAST();
            Method setParent = ast.getClass().getDeclaredMethod("setParent", DetailAST.class);
            setParent.setAccessible(true);
            setParent.invoke(ast, astParent);

            int[] validTypes = {
                TokenTypes.PACKAGE_DEF,
                TokenTypes.CLASS_DEF,
                TokenTypes.INTERFACE_DEF,
                TokenTypes.ENUM_DEF,
                TokenTypes.ANNOTATION_DEF,
                TokenTypes.METHOD_DEF,
                TokenTypes.CTOR_DEF,
                TokenTypes.VARIABLE_DEF,
            };
            for (int type: validTypes) {
                ast.setType(type);
                assertTrue(tagInfo.isValidOn(ast));
            }

            astParent.setType(TokenTypes.SLIST);
            ast.setType(TokenTypes.VARIABLE_DEF);
            assertFalse(tagInfo.isValidOn(ast));

            ast.setType(TokenTypes.PARAMETER_DEF);
            assertFalse(tagInfo.isValidOn(ast));
        }
    }

