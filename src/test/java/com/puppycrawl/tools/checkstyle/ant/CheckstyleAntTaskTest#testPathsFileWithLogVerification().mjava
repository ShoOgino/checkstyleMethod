    @Test
    public final void testPathsFileWithLogVerification() throws IOException {
        // given
        TestRootModuleChecker.reset();
        final CheckstyleAntTaskLogStub antTask = new CheckstyleAntTaskLogStub();
        antTask.setConfig(getPath(CUSTOM_ROOT_CONFIG_FILE));
        antTask.setProject(new Project());
        final FileSet examinationFileSet = new FileSet();
        examinationFileSet.setFile(new File(getPath(FLAWLESS_INPUT)));
        final Path sourcePath = new Path(antTask.getProject());
        sourcePath.addFileset(examinationFileSet);
        antTask.addPath(sourcePath);
        antTask.addPath(new Path(new Project()));

        // when
        antTask.execute();

        // then
        final List<String> loggedMessages = antTask.getLoggedMessages();

        assertEquals("Scanning path was not logged", 1, loggedMessages.stream().filter(
            msg -> msg.startsWith("1) Scanning path")).count());

        assertEquals("Scanning path was not logged", 1, loggedMessages.stream().filter(
            msg -> msg.startsWith("1) Adding 1 files from path")).count());

        assertEquals("Scanning empty was logged", 0, loggedMessages.stream().filter(
            msg -> msg.startsWith("2) Adding 0 files from path ")).count());

        assertTrue("Checker is not processed",
                TestRootModuleChecker.isProcessed());
        final List<File> filesToCheck = TestRootModuleChecker.getFilesToCheck();
        assertThat("There more files to check then expected",
                filesToCheck.size(), is(1));
        assertThat("The path of file differs from expected",
                filesToCheck.get(0).getAbsolutePath(), is(getPath(FLAWLESS_INPUT)));
    }

