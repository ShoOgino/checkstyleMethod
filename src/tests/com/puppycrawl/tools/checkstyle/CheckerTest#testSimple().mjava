    public void testSimple()
        throws Exception
    {
        mProps.setProperty(Defn.MAX_METHOD_LENGTH_PROP, "19");
        mProps.setProperty(Defn.MAX_CONSTRUCTOR_LENGTH_PROP, "9");
        mProps.setProperty(Defn.STATIC_PATTERN_PROP, "^s[A-Z][a-zA-Z0-9]*$");
        mProps.setProperty(Defn.MEMBER_PATTERN_PROP, "^m[A-Z][a-zA-Z0-9]*$");
        mProps.setProperty(Defn.IGNORE_LINE_LENGTH_PATTERN_PROP,
                           "^.*is OK.*regexp.*$");
        mProps.setProperty(Defn.TODO_PATTERN_PROP, "FIXME:");
        mProps.setProperty(Defn.MEMBER_PATTERN_PROP, "^m[A-Z][a-zA-Z0-9]*$");
        mProps.setProperty(Defn.LOCAL_FINAL_VAR_PATTERN_PROP, "[A-Z]+");
        final Checker c = createChecker();
        final String filepath = getPath("InputSimple.java");
        assertNotNull(c);
        final String[] expected = {
            filepath + ":18: Line is longer than 80 characters.",
            filepath + ":25:29: Name 'badConstant' must match pattern '^[A-Z](_?[A-Z0-9]+)*$'.",
            filepath + ":30:24: Name 'badStatic' must match pattern '^s[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":35:17: Name 'badMember' must match pattern '^m[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":39:19: Variable 'mNumCreated2' must be private and have accessor methods.",
            filepath + ":42:40: ',' is not followed by whitespace.",
            filepath + ":49:23: Variable 'sTest1' must be private and have accessor methods.",
            filepath + ":51:26: Variable 'sTest3' must be private and have accessor methods.",
            filepath + ":53:16: Variable 'sTest2' must be private and have accessor methods.",
            filepath + ":56:9: Variable 'mTest1' must be private and have accessor methods.",
            filepath + ":58:16: Variable 'mTest2' must be private and have accessor methods.",
            filepath + ":71:30: ',' is not followed by whitespace.",
            filepath + ":80: Method length is 20 lines (max allowed is 19).",
            filepath + ":103: Constructor length is 10 lines (max allowed is 9).",
            filepath + ":119:13: Name 'ABC' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":122:19: Name 'cde' must match pattern '[A-Z]+'.",
            filepath + ":127:9: '{' should be on the previous line.",
            filepath + ":130:18: Name 'I' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":131:9: '{' should be on the previous line.",
            filepath + ":132:20: Name 'InnerBlockVariable' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":142:30: Name 'BAD__NAME' must match pattern '^[A-Z](_?[A-Z0-9]+)*$'.",
            filepath + ":145: Line is longer than 80 characters.",
            filepath + ":161: Comment matches to-do format 'FIXME:'.",
            filepath + ":162: Comment matches to-do format 'FIXME:'.",
            filepath + ":163: Comment matches to-do format 'FIXME:'.",
            filepath + ":167: Comment matches to-do format 'FIXME:'.",
            filepath + ":194:5: More than 7 parameters.",
        };
        verify(c, filepath, expected);
    }

