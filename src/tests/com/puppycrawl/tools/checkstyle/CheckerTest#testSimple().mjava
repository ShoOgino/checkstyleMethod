    public void testSimple()
        throws Exception
    {
        mConfig.setMaxFileLength(20);
        mConfig.setMaxMethodLength(19);
        mConfig.setMaxConstructorLength(9);
        mConfig.setParamPat("^a[A-Z][a-zA-Z0-9]*$");
        mConfig.setStaticPat("^s[A-Z][a-zA-Z0-9]*$");
        mConfig.setMemberPat("^m[A-Z][a-zA-Z0-9]*$");
        mConfig.setIgnoreLineLengthPat("^.*is OK.*regexp.*$");
        final Checker c = createChecker();
        final String filepath = getPath("InputSimple.java");
        assertNotNull(c);
        final String[] expected = {
            filepath + ":1: file length is 160 lines (max allowed is 20).",
            filepath + ":3: Line does not match expected header line of '// Created: 2001'.",
            filepath + ":18: line longer than 80 characters",
            filepath + ":19:25: line contains a tab character",
            filepath + ":25:29: variable 'badConstant' must match pattern '^[A-Z](_?[A-Z0-9]+)*$'.",
            filepath + ":30:24: variable 'badStatic' must match pattern '^s[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":35:17: variable 'badMember' must match pattern '^m[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":39:19: variable 'mNumCreated2' must be private and have accessor methods.",
            filepath + ":42:40: ',' needs to be followed by whitespace.",
            filepath + ":49:23: variable 'sTest1' must be private and have accessor methods.",
            filepath + ":51:26: variable 'sTest3' must be private and have accessor methods.",
            filepath + ":53:16: variable 'sTest2' must be private and have accessor methods.",
            filepath + ":56:9: variable 'mTest1' must be private and have accessor methods.",
            filepath + ":58:16: variable 'mTest2' must be private and have accessor methods.",
            filepath + ":71:19: parameter 'badFormat1' must match pattern '^a[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":71:30: ',' needs to be followed by whitespace.",
            filepath + ":71:34: parameter 'badFormat2' must match pattern '^a[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":72:25: parameter 'badFormat3' must match pattern '^a[A-Z][a-zA-Z0-9]*$'.",
            filepath + ":80: method length is 20 lines (max allowed is 19).",
            filepath + ":103: constructor length is 10 lines (max allowed is 9).",
            filepath + ":119:13: variable 'ABC' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":123:19: variable 'CDE' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":127:9: '{' should be on the previous line.",
            filepath + ":130:18: variable 'I' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":131:9: '{' should be on the previous line.",
            filepath + ":132:20: variable 'InnerBlockVariable' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":137:10: method name 'ALL_UPPERCASE_METHOD' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
            filepath + ":142:30: variable 'BAD__NAME' must match pattern '^[A-Z](_?[A-Z0-9]+)*$'.",
            filepath + ":145: line longer than 80 characters",
            filepath + ":145:35: line contains a tab character",
            filepath + ":146:64: line contains a tab character",
            filepath + ":153:27: '=' is not followed by whitespace.",
            filepath + ":154:9: line contains a tab character",
            filepath + ":154:27: '=' is not followed by whitespace.",
            filepath + ":155:10: line contains a tab character",
            filepath + ":155:27: '=' is not followed by whitespace.",
            filepath + ":156:1: line contains a tab character",
            filepath + ":156:27: '=' is not followed by whitespace.",
            filepath + ":157:3: line contains a tab character",
            filepath + ":157:27: '=' is not followed by whitespace.",
            filepath + ":158:3: line contains a tab character",
            filepath + ":158:27: '=' is not followed by whitespace.",
        };
        verify(c, filepath, expected);
    }

