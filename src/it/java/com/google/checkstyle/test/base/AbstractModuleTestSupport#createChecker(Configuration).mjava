    /**
     * Creates {@link Checker} instance based on the given {@link Configuration} instance.
     * @param moduleConfig {@link Configuration} instance.
     * @return {@link Checker} instance based on the given {@link Configuration} instance.
     * @throws Exception if an exception occurs during checker configuration.
     */
    public final Checker createChecker(Configuration moduleConfig)
            throws Exception {
        if (checkstyleModules == null) {
            checkstyleModules = CheckUtil.getCheckstyleModules();
        }

        final String name = moduleConfig.getName();
        ModuleCreationOption moduleCreationOption = ModuleCreationOption.IN_CHECKER;

        for (Class<?> moduleClass : checkstyleModules) {
            if (moduleClass.getSimpleName().equals(name)
                    || moduleClass.getSimpleName().equals(name + "Check")) {
                if (ModuleReflectionUtils.isCheckstyleCheck(moduleClass)
                        || ModuleReflectionUtils.isTreeWalkerFilterModule(moduleClass)) {
                    moduleCreationOption = ModuleCreationOption.IN_TREEWALKER;
                }
                break;
            }
        }

        return createChecker(moduleConfig, moduleCreationOption);
    }

