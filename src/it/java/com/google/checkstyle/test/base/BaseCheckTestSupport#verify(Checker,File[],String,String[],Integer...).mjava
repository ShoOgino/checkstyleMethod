    void verify(Checker aC,
            File[] aProcessedFiles,
            String aMessageFileName,
            String[] aExpected,
            Integer... aWarnsExpected)
        throws Exception {
        stream.flush();
        final List<File> theFiles = Lists.newArrayList();
        Collections.addAll(theFiles, aProcessedFiles);
        final int errs = aC.process(theFiles);

        // process each of the lines
        final ByteArrayInputStream localStream =
            new ByteArrayInputStream(stream.toByteArray());
        try (final LineNumberReader lnr = new LineNumberReader(
                new InputStreamReader(localStream, StandardCharsets.UTF_8))) {

            for (int i = 0; i < aExpected.length; i++) {
                final String expected = aMessageFileName + ":" + aExpected[i];
                String actual = lnr.readLine();
                assertEquals("error message " + i, expected, actual);
                String parseInt = removeDeviceFromPathOnWindows(actual);
                parseInt = parseInt.substring(parseInt.indexOf(':') + 1);
                parseInt = parseInt.substring(0, parseInt.indexOf(':'));
                int lineNumber = Integer.parseInt(parseInt);
                Integer integer = 0;
                if (Arrays.asList(aWarnsExpected).contains(lineNumber)) {
                    integer = lineNumber;
                }
                assertEquals("error message " + i, (long) integer, lineNumber);
            }

            assertEquals("unexpected output: " + lnr.readLine(),
                    aExpected.length, errs);
        }
        aC.destroy();
    }

